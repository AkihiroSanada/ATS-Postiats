%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"string.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/ML/SATS/CODEGEN/string.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("July, 2012")

#atscode_separator()

staload "libats/SATS/ML_basis.sats"

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

fun string_copy (s: NSH(string)):<> string

fun substring_copy
  (s: NSH(string), st: size_t, ln: size_t):<> string
// end of [substring_copy]

#atscode_separator()

fun string_append
  (s1: NSH(string), s2: NSH(string)):<> string
overload + with string_append

#atscode_separator()

fun stringlst_concat (xs: list0 (string)):<> string

#atscode_separator()

fun string_explode (s: string):<> list0 (char)
fun string_implode (cs: list0 (char)):<> string

#atscode_separator()

fun string_foreach (s: string, f: cfun (char, void)): void

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "string_atxt.txt")
%}\
