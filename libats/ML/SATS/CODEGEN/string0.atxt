%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"string0.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/ML/SATS/CODEGEN/string0.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2013")

#atscode_separator()

staload "libats/SATS/ML_basics.sats"

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()
//
// HX-2013-02:
// a string0-value is represented an array of character;
// in principle, this array should be treated as read-only.
//
#atscode_separator()

abstype string0_type
typedef string0 = string0_type

#atscode_separator()

castfn array2string0 (cs: array0 (char)):<> string0
castfn string2array0 (cs: string0):<> array0 (char)

#atscode_separator()

fun string0_get_ref (str: string0):<> Ptr1
fun string0_get_size (str: string0):<> size_t

fun string0_get_refsize
  (A: string0):<> [n:nat] (arrayref (char, n), size_t (n))
// end of [string0_get_refsize]

#atscode_separator()

symintr string0
fun string0_make_string (str: string):<!wrt> string0
overload string0 with string0_make_string

#atscode_separator()

fun string0_imake_string (str: string0):<!wrt> string

#atscode_separator()

symintr string0_get_at

fun{tk:tk}
string0_get_at_gint (str: string0, i: g0int(tk)):<!exn> char
overload string0_get_at with string0_get_at_gint of 0
fun{tk:tk}
string0_get_at_guint (str: string0, i: g0uint(tk)):<!exn> char
overload string0_get_at with string0_get_at_guint of 0

#atscode_separator()

fun lt_string0_string0
  (str1: string0, str2: string0):<> bool
overload < with lt_string0_string0
fun lte_string0_string0
  (str1: string0, str2: string0):<> bool
overload <= with lte_string0_string0

fun gt_string0_string0
  (str1: string0, str2: string0):<> bool
overload > with gt_string0_string0
fun gte_string0_string0
  (str1: string0, str2: string0):<> bool
overload >= with gte_string0_string0

fun eq_string0_string0
  (str1: string0, str2: string0):<> bool
overload = with eq_string0_string0
fun neq_string0_string0
  (str1: string0, str2: string0):<> bool
overload != with neq_string0_string0
overload <> with neq_string0_string0

#atscode_separator()

fun string0_compare
  (str1: string0, str2: string0):<> int
overload compare with string0_compare

#atscode_separator()

fun string0_contains (str: string0, c: char):<> bool

#atscode_separator()

fun string0_copy (str: string0):<!wrt> string0

#atscode_separator()

fun string0_append (str1: string0, str2: string0):<!wrt> string0
overload + with string0_append

#atscode_separator()

fun string0_foreach (str: string0, f: cfun (char, void)): void
fun string0_rforeach (str: string0, f: cfun (char, void)): void

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "string0_atxt.txt")
%}\
