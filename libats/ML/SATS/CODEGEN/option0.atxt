%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"option0.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/ML/SATS/CODEGEN/option0.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("May, 2012")

#atscode_separator()

staload "libats/SATS/ML_basics.sats"

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

castfn
option0_of_option {a:t@ype} (xs: Option a):<> option0 (a)
castfn
option0_of_option_vt {a:t@ype} (xs: Option_vt a):<> option0 (a)
castfn
option_of_option0 {a:t@ype} (xs: option0 a):<> Option (a)

#atscode_separator()

fun{
a:t0p
} option0_some (x: a):<> option0 (a)
fun{}
option0_none {a:t0p} ((*void*)):<> option0 (a)

#atscode_separator()

fun{}
option0_is_some {a:t0p} (x: option0 a):<> bool
fun{}
option0_is_none {a:t0p} (x: option0 a):<> bool

#atscode_separator()

fun{a:t0p}
option0_unsome_exn (opt: option0 (a)):<!exn> a

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "option0_atxt.txt")
%}\
