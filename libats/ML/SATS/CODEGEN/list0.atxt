%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list0.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/ML/SATS/CODEGEN/list0.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("May, 2012")

#atscode_separator()

staload "libats/ML/basics.sats"

#atscode_separator()

typedef cfun (a: t0p, b:t0p) = (a) -<cloref1> b

#atscode_separator()

castfn
list0_of_list {a:t@ype} (xs: List a):<> list0 (a)
castfn
list0_of_list_vt {a:t@ype} (xs: List_vt a):<> list0 (a)
castfn
list_of_list0 {a:t@ype} (xs: list0 a):<> List (a)

#atscode_separator()

fun{a:t0p}
list0_head_exn (xs: list0 a):<!exn> a
fun{a:t0p}
list0_head_opt (xs: list0 a):<> option0 (a)

fun{a:t0p}
list0_tail_exn (xs: list0 a):<!exn> list0 (a)
fun{a:t0p}
list0_tail_opt (xs: list0 a):<> option0 (list0 (a))

#atscode_separator()

fun{a:t0p}
list0_nth_exn (xs: list0 a, i: int):<!exn> a
fun{a:t0p}
list0_nth_opt (xs: list0 a, i: int):<> option0 (a)

#atscode_separator()

fun{a:t0p}
list0_concat (xss: list0 (list0 (a))):<> list0 (a)

#atscode_separator()

fun{a:t0p}{b:t0p}
list0_map (xs: list0 (a), f: cfun (a, b)): list0 (b)

#atscode_separator()

fun{a:t0p}
list0_exists (xs: list0 (a), f: cfun (a, bool)): bool

fun{a:t0p}
list0_forall (xs: list0 (a), f: cfun (a, bool)): bool

#atscode_separator()

fun{a:t0p}
list0_find (xs: list0 a, pred: cfun (a, bool)): option0 (a)

#atscode_separator()

fun{a:t0p}
list0_filter (xs: list0 (a), f: cfun (a, bool)): list0 (a)

#atscode_separator()

fun{a:t0p}
list0_foreach (xs: list0 a, f: cfun (a, void)): void

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list0_atxt.txt")
%}\
