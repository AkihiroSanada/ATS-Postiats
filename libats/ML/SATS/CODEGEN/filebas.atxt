%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"filebas.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/ML/SATS/CODEGEN/filebas.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("January, 2013")

#atscode_separator()

staload "libats/SATS/ML_basis.sats"

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

typedef charlst0 = list0 (char)
typedef stringlst0 = list0 (string)

#atscode_separator()

fun fileref_open_opt
  (path: NSH(string), fm: file_mode): option0 (FILEref)
// end of [fileref_open_opt]

#atscode_separator()

fun fileref_get_line_charlst (filr: FILEref): charlst0

(*
** HX: for handling files of "tiny" size
*)
fun fileref_get_lines_charlstlst (filr: FILEref): list0 (charlst0)

#atscode_separator()

fun fileref_get_line_string (filr: FILEref): string

(*
** HX: for handling files of "tiny" size
*)
fun fileref_get_lines_stringlst (filr: FILEref): stringlst0

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "filebas_atxt.txt")
%}\
