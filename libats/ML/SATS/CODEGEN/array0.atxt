%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"array0.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/ML/SATS/CODEGEN/array0.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("July, 2012")

#atscode_separator()

staload "libats/SATS/ML_basics.sats"

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

(*
typedef array0 (a: t@ype) = arrszref (a)
*)

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

castfn 
array0_of_arrszref
  {a:vt0p} (A: arrszref (a)):<> array0 (a)
// end of [array0_of_arrszref]

castfn 
arrszref_of_array0
  {a:vt0p} (A: array0 (a)):<> arrszref (a)
// end of [arrszref_of_array0]

#atscode_separator()

symintr array0

fun
array0_make_arrayref
  {a:vt0p}{n:int}
  (A: arrayref (a, n), n: size_t (n)):<!wrt> array0 (a)
overload array0 with array0_make_arrayref

#atscode_separator()

fun{a:t0p}
array0_make_elt
  (asz: size_t, x: a):<!wrt> array0 (a)

fun{a:t0p}
array0_make_list
  (xs: list0 (INV(a))):<!wrt> array0 (a)

fun{a:t0p}
array0_make_arrpsz
  {n:int} (psz: arrpsz (a, n)):<!wrt> array0 (a)

#atscode_separator()

fun{tk:tk}{a:t0p}
array0_get_at_gint (A: array0 (a), i: g0int(tk)):<!exn,!ref> a
fun{tk:tk}{a:t0p}
array0_get_at_guint (A: array0 (a), i: g0uint(tk)):<!exn,!ref> a

fun{tk:tk}{a:t0p}
array0_set_at_gint (A: array0 (a), i: g0int(tk), x: a):<!exn,!refwrt> void
fun{tk:tk}{a:t0p}
array0_set_at_guint (A: array0 (a), i: g0uint(tk), x: a):<!exn,!refwrt> void

fun{tk:tk}{a:vt0p}
array0_exch_at_gint (A: array0 (a), i: g0int(tk), x: &a):<!exn,!refwrt> void
fun{tk:tk}{a:vt0p}
array0_exch_at_guint (A: array0 (a), i: g0uint(tk), x: &a):<!exn,!refwrt> void

#atscode_separator()

fun array0_get_size {a:t0p} (A: array0 a):<> size_t

#atscode_separator()

fun{a:t0p}
array0_append
  (A1: array0 (a), A2: array0 (a)):<!refwrt> array0 (a)
// end of [array0_append]

#atscode_separator()

fun{a:t0p}
array0_foreach
  (A: array0 (a), f: (&a) -<cloref1> void): void
// end of [array0_foreach]

fun{a:t0p}
array0_iforeach
  (A: array0 (a), f: (size_t, &a) -<cloref1> void): void
// end of [array0_iforeach]

#atscode_separator()

(*
** HX: raising NotFoundExn if no satisfying element is found
*)
fun{a:t0p}
array0_find_exn
  (A: array0 (a), p: (&a) -<cloref1> bool): size_t
// end of [array0_find_exn]

fun{a:t0p}
array0_find_opt
  (A: array0 (a), p: (&a) -<cloref1> bool): option0 (size_t)
// end of [array0_find_opt]

#atscode_separator()

fun{
a:t0p}{res:t0p
} array0_foldleft (
  A: array0 (a), ini: res, f: (res, &a) -<cloref1> res
) : res // end of [array0_foldleft]

fun{
a:t0p}{res:t0p
} array0_ifoldleft (
  A: array0 (a), ini: res, f: (res, size_t, &a) -<cloref1> res
) : res // end of [array0_ifoldleft]

#atscode_separator()

fun{a:t0p}
array0_rforeach
  (A: array0 (a), f: (&a) -<cloref1> void): void
// end of [array0_rforeach]

#atscode_separator()

fun{
a:t0p}{res:t0p
} array0_foldright (
  A: array0 (a), f: (&a, res) -<cloref1> res, snk: res
) : res // end of [array0_foldright]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "array0_atxt.txt")
%}\
