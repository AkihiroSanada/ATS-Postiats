(* ****** ****** *)

%{
implement srcfilename_get () = "../array0.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_array0")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/array0\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for supporting
ML-style processing of persisten arrays. Note that a plain array (as is in
C) is not available in languages such as Java and ML due to the need for
performing array-bounds checking at run-time. Instead, arrays in these
languages are always bundled together with their sizes. In ATS, the type
#stacode("array0(T)") is for an array paired with its size in which
elements of the type T are stored.

")

(* ****** ****** *)

#declnamesynop("array0")

(* ****** ****** *)

#declnamesynop("array0_of_arrszref")
#declnamesynop("arrszref_of_array0")

(* ****** ****** *)

#declnamesynop("array0_make_arrpsz")
#declexample("\

The following code builds an array of digits and then print them out:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/array0.sats"
//
implement main () = let
  val xs = (array0)$arrpsz{int}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  val () = array0_foreach<int> (xs, lam (x) => print_int (x))
  val () = print_newline ()
in
  0(*normal*)
end // end of [main]
')
")

(* ****** ****** *)

#declnamesynop("array0_make_elt")

(* ****** ****** *)

#declnamesynop("array0_make_list")

(* ****** ****** *)

#declnamesynop("array0_get_at")
#declnamesynop("array0_set_at")
#declnamesynop("array0_exch_at")

(* ****** ****** *)

#declnamesynop("array0_copy")
#declnamesynop("array0_append")
#declnamesynop("array0_tabulate")

(* ****** ****** *)

#declnamesynop("array0_find_exn")
#decldescrpt("\

This function returns the index of the first array-cell in a given array
that contains an element satisfiing a given predicate. If there is no such
an element, then the function raises an exception (#dyncode("NotFoundExn")).

")
#declnamesynop("array0_find_opt")
#decldescrpt("\
This function is just the optional version of #dyncode("array0_find_exn").
")

(* ****** ****** *)

#declnamesynop("array0_foreach")
#declnamesynop("array0_iforeach")

(* ****** ****** *)

#declnamesynop("array0_foldleft")
#declnamesynop("array0_ifoldleft")

(* ****** ****** *)

#declnamesynop("array0_rforeach")

(* ****** ****** *)

#declnamesynop("array0_foldright")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("array0_get_at")
#declnamesynop("array0_set_at")
#declnamesynop("array0_exch_at")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [array0.atxt] *)
