#decltitle("\
ATSLIB/libats/ML/option0\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for supporting
ML-style processing of option-values. The programmer is encouraged to use
the dependent datatype #stacode("option") instead of #stacode("option0")
after gaining some familiarity with dependent types.

")

(* ****** ****** *)

#declname("option0")
#declsynopsis2("\

The full name of the option0-type constructor is
#stacode("option0_t0ype_type"), which is given to the datatype declared as
follows:

#pats2xhtmls('\
datatype // t@ype+: covariant
option0_t0ype_type
  (a: t@ype+) = Some0 of (a) | None0 of ()
// end of [option0_t0ype_type]
')
")

(* ****** ****** *)

#declnamesynop("option0_of_option")
#decldescript("\
This function casts an option-value of indexed type to an option-value of
unindexed type.
")
#declnamesynop("option0_of_option_vt")
#decldescript("\
This function casts a linear option-value of indexed type to an option-value of
unindexed type.
")
#declnamesynop("option_of_option0")
#decldescript("\
This function casts an option-value of unindexed type to an option-value of
indexed type.
")

(* ****** ****** *)

#declnamesynop("option0_some")
#decldescript('\
This is just the function version of the constructor #dyncode("Some0").
')
#declnamesynop("option0_none")
#decldescript('\
This is just the function version of the constructor #dyncode("None0").
')

(* ****** ****** *)

#declnamesynop("option0_is_some")
#decldescript('\
This funtion returns true if and only a given option-value is formed with
the constructor #dyncode('Some0').
')
#declnamesynop("option0_is_none")
#decldescript('\
This funtion returns true if and only a given option-value is formed with
the constructor #dyncode('None0').
')

(* ****** ****** *)

#declnamesynop("option0_unsome_exn")
#decldescript("\

If a given option-value is of the form #dyncode("Some0(v)"), then the
function returns v. Otherwise, it raises an exception (NotSomeExn).

")

(* ****** ****** *)

(* end of [option0.atxt] *)
