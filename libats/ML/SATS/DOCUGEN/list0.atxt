(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_list0")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/list0\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for supporting
ML-style processing of list-values. The programmer is encouraged to use the
dependent datatype #stacode("list") instead of #stacode("list0") after
gaining familiarity with dependent types.

")

(* ****** ****** *)

#declname("list0")
#declsynopsis2("\

The full name of the list0-type constructor is
#stacode("list0_t0ype_type"), which is given to the datatype declared as
follows:

#pats2xhtmls('\
datatype // t@ype+: covariant
list0_t0ype_type (a: t@ype+) =
  | list0_cons of (a, list0_t0ype_type a)
  | list0_nil of ()
// end of [list0_t0ype_type]
')
")

(* ****** ****** *)

#declnamesynop("list0_of_list")
#decldescrpt("\
This function casts a list-value of indexed type to a list-value of
unindexed type.
")
#declnamesynop("list0_of_list_vt")
#decldescrpt("\
This function casts a linear list-value of indexed type to a list-value of
unindexed type.
")
#declnamesynop("list_of_list0")
#decldescrpt("\
This function casts a list-value of unindexed type to a list-value of
indexed type.
")

(* ****** ****** *)

#declnamesynop("list0_sing")
#declnamesynop("list0_pair")

#declnamesynop("list0_is_nil")
#declnamesynop("list0_is_cons")

#declnamesynop("list0_is_empty")
#declnamesynop("list0_isnot_empty")

(* ****** ****** *)

#declnamesynop("list0_make_elt")
#decldescrpt("\

Given an integer n and an element x, this function returns a list
consisting of n occurrences of x if n is a natural number. Otherwise it
raises an exception (#dyncode("IllegalArgExn")).

")

#declnamesynop("list0_make_arrpsz")
#decldescrpt("\

This function, which overloads the symbol #dyncode("list0"), is often
conveniently employed to build a list of some fixed length.\

")
#declexample("\

The following code builds a list of digits and then print them out:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement main () = let
  val xs = list0$arrpsz{int}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  val () = list0_foreach<int> (xs, lam (x) => print_int (x))
  val () = print_newline ()
in
  0(*normal*)
end // end of [main]
')
")

(* ****** ****** *)

#declnamesynop("list0_head_exn")
#decldescrpt("\

This function returns the head of a given list if the list is non-empty or
raises an exception (#dyncode("ListSubscriptExn")) if the list is empty.
")

#declnamesynop("list0_head_opt")
#decldescrpt("\
This function is the optional version of #dyncode("list0_head_exn").
")

(* ****** ****** *)

#declnamesynop("list0_tail_exn")
#decldescrpt("\

This function returns the tail of a given list if the list is non-empty or
raises an exception (#dyncode("ListSubscriptExn")) if the list is empty.
")

#declnamesynop("list0_tail_opt")
#decldescrpt("\
This function is the optional version of #dyncode("list0_tail_exn").
")

(* ****** ****** *)

#declnamesynop("list0_nth_exn")
#decldescrpt("\

This function returns element i of a given list if i is a natural number
less than the length of the list.  Otherwise, it raises an exception
(#dyncode("ListSubscriptExn")).\

")
#declexample("\

The following code gives a #emph('terribly inefficient') O(n^2)-time
implementation of list concatenation:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}
list0_append (xs, ys) = let
  fun loop (
    xs: list0 a, i: int, res: list0 a
  ) : list0 a =
    if i > 0 then let
      val i1 = i - 1
      val res = list0_cons (list0_nth_exn (xs, i1), res)
    in
      loop (xs, i1, res)
    end else res // end of [if]
  // end of [loop]
in
  $effmask_all (loop (xs, list0_length (xs), ys))
end // end of [list0_append]
')
")

#declnamesynop("list0_nth_opt")
#decldescrpt("\
This function is the optional version of #dyncode("list0_nth_exn").
")

(* ****** ****** *)

#declnamesynop("list0_insert_at_exn")
#declnamesynop("list0_remove_at_exn")

(* ****** ****** *)

#declnamesynop("list0_length")
#decldescrpt("\

This function returns the length of a given list, and its implementation is
tail-recursive. For convenience, #dyncode("list0_length") overloads the
symbol #dyncode("length").

")

#declnamesynop("list0_append")
#decldescrpt("\

Given two lists xs and ys, this function returns the concatenation of xs
and ys. For convenience, #dyncode("list0_append") overloads the symbol
#dyncode("+").  Note that the implementation of #dyncode("list0_append") is
tail-recursive in ATSLIB.\

")
#declexample("\

The following code checks that the length of the concatenation of two lists
equals the sum of their individual lengths:

#pats2xhtmld_tryit("\
//
staload \"libats/ML/SATS/list0.sats\"
//
implement
main () = let
  \#define M 10
  \#define N 20
  \#define length list0_length
  val xs = list0_make_elt<char> (M, 'a')
  val ys = list0_make_elt<char> (N, 'b')
  val () = assert (length (xs) + length (ys) = length (xs + ys))
in
  0(*normal*)
end // end of [main]
")
")

(* ****** ****** *)

#declnamesynop("list0_extend")

#decldescrpt("\

Given a lists xs and y, this function returns the concatenation of xs and
the singleton list consisting of y.

")
#declexample("\

The following code gives a typical implementation of the list-reverse
function by a beginner of functional programming:

#pats2xhtmld_tryit("\
//
staload \"libats/ML/SATS/list0.sats\"
//
implement{a}
list0_reverse (xs) =
  case+ xs of
  | list0_cons
      (x, xs) => list0_extend (list0_reverse (xs), x)
  | list0_nil () => list0_nil ()
// end of [list0_reverse]
")

Note that this implementation is #emph('terribly inefficient') both
time-wise and memory-wise: It is O(n^2)-time and non-tail-recursive.  ")

(* ****** ****** *)

#declnamesynop("list0_reverse")
#decldescrpt("\
This function returns the reverse of a given list, and its implementation
is tail-recurisive.
")

#declnamesynop("list0_reverse_append")
#decldescrpt("\

Given two lists xs and ys, this function returns the concatenation of the
rxs and ys, where rxs refers to the reverse of xs.  The implementation of
#dyncode("list0_reverse_append") in ATSLIB is tail-recursive.\

")

(* ****** ****** *)

#declnamesynop("list0_concat")
#decldescrpt("\

Given a list xss of lists, this funciton returns the concatenation
of xss[0], xss[1], ..., and xss[n-1], where n is the length of xss.  ")

(* ****** ****** *)

#declnamesynop("list0_take_exn")
#decldescrpt("\

Given a list xs and an integer i, this function contructs another list
consisting of the first i elemements of xs. If i is negative, the function
raises the exception #dyncode("IllegalArgExn"). If i exceeds the length of
xs, then the function raises the exception #dyncode("ListSubscriptExn").\

")

#declnamesynop("list0_drop_exn")
#decldescrpt("\

Given a list xs and an integer i, this function returns the suffix of xs
that is of length n-i, where n is the length of xs.  If i is negative, the
function raises the exception #dyncode("IllegalArgExn"). If i exceeds the
length of xs, then the function raises the exception
#dyncode("ListSubscriptExn").\

")

(* ****** ****** *)

#declnamesynop("list0_app")
#decldescrpt("\
This function is idential to #dyncode("list0_foreach").
")

(* ****** ****** *)

#declnamesynop("list0_foreach")
#decldescrpt("\

This function applies its second argument to each element in its first
argument.  ")

#declnamesynop("list0_iforeach")
#decldescrpt("\

This function applies its second argument f to (i, x), where i ranges from
0 to the length of xs minus 1 and x is element i in xs.\

")
#declexample("\

The following code implements a function for printing out a given list:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
fun{a:t0p}
fprint_list (
  out: FILEref, xs: list0 a, sep: string
) : void = let
  fun f (
    i: int, x: a
  ) :<cloref1> void = let
    val () = if i > 0 then fprint_string (out, sep)
  in
    fprint_val<a> (out, x)
  end // end of [f]
in
  list0_iforeach (xs, f)
end // end of [fprint_list]
')\

Note that the argument sep of #dyncode("fprint_list") is only printed
between two list elements.

")

(* ****** ****** *)

#declnamesynop("list0_foreach2")
#decldescrpt("\

Given two lists xs and ys of length m and n, respectively, this function
applies its third argument to each pair (xs[i], ys[i]), where i ranges from
0 until min(m,n)-1, inclusively, and xs[i] (ys[i]) refers to element i in
the list xs (ys).  ")

#declnamesynop("list0_foreach2_eq")
#decldescrpt("\

This function is largely similar to #dyncode("list0_foreach2").  After a
call to the function returns, the value stored in the call-by-reference
parameter sgn equals sgn(n1-n2), that is, the sign of n1-n2, where n1 and
n2 are the lengths of the first and second arguments of the function,
respectively.  ")

")

(* ****** ****** *)

#declnamesynop("list0_foldleft")
#decldescrpt("\

Given a list xs of length n, this function returns the value f (...f (f
(ini, xs[0]), xs[1])..., xs[n-1]), where the notation xs[i] refers to
element i in the list xs. The implementation of this function is
tail-recursive.

")
#declexample('\

The following code gives a standard implementation of the list-reverse
function:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}
list0_reverse (xs) = $effmask_all (
  list0_foldleft<a><list0(a)> (xs, list0_nil, lam (res, x) => list0_cons (x, res))
) // end of [list0_reverse]
')
')

(* ****** ****** *)

#declnamesynop("list0_ifoldleft")
#decldescrpt("\

Given a list xs of length n, this function returns the value f (...f (f
(ini, 0, xs[0]), 1, xs[1])..., n-1, xs[n-1]), where the notation xs[i]
refers to element i in the list xs. The implementation of this function is
tail-recursive.

")

#declnamesynop("list0_foldleft2")
#decldescrpt("\

Given two lists xs1 and xs2 of length n1 and n2, respectively, this
function returns the value f (...f (ini, xs1[0], xs2[0])..., xs1[n-1],
xs2[n-1]), where n equals min(n1, n2).

")

(* ****** ****** *)

#declnamesynop("list0_foldright")
#decldescrpt("\

Given a list xs of length n, this function returns the value f (xs[0], f
(xs[1], ...f (xs[n-1], snk)...)), where the notation xs[i] refers to
element i in the list xs. The implementation of this function is #emph("not")
tail-recursive, and stack-overflow may occur if the xs is long (e.g.,
containing 1,000,000 elements).

")
#declexample('\

The following code gives a standard implementation of the list-append
function:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}
list0_append (xs, ys) = $effmask_all (
  list0_foldright<a><list0(a)> (xs, lam (x, res) => list0_cons (x, res), ys)
) // end of [list0_append]
')
')

(* ****** ****** *)

#declnamesynop("list0_exists")
#decldescrpt("\

This function returns true if and only if there exists an element in its
first argument that satisfies the predicated provided as its second
argument.  ")

#declnamesynop("list0_exists2")
#decldescrpt("\

Given two lists xs1 and xs2 of length n1 and n2, respectively, this
function returns true if and only if p(xs1[i], xs2[i]) returns true for
some i between 0 and min(n1,n2)-1, inclusively.  ")

(* ****** ****** *)

#declnamesynop("list0_forall")
#decldescrpt("\

This function returns true if and only if every element in its first
argument satisfies the predicated provided as its second argument.  ")

(* ****** ****** *)

#declnamesynop("list0_forall2")
#decldescrpt("\

Given two lists xs1 and xs2 of length n1 and n2, respectively, this
function returns true if and only if p(xs1[i], xs2[i]) returns true for
every i between 0 and min(n1,n2)-1, inclusively.  ")

#declnamesynop("list0_forall2_eq")
#decldescrpt("\

This function is largely similar to #dyncode("list0_forall2").  Given two
lists xs1 and xs2 of length n1 and n2, respectively, this function returns
true if and only if p(xs1[i], xs2[i]) returns true for every i between 0
and min(n1,n2)-1, inclusively. If this function returns true, then the
value stored in the call-by-reference parameter sgn equals sgn(n1-n2), that
is, the sign of n1-n2.  Otherwise, the value equals 0.  ")

#declexample("\

The following code implements a function that checks whether two given
lists are equal based on a given equality funtion on list elements:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}
list0_equal
  (xs1, xs2, eqfn) = let
  var sgn: int // uninitialied
  val ans = list0_forall2_eq (xs1, xs2, eqfn, sgn)
in
  if sgn = 0 then
    ans // [xs1] and [xs2] are of the same length
  else
    false // [xs1] and [xs2] are of different length
  // end of [if]
end // end of [list0_equal]
')
")

(* ****** ****** *)

#declnamesynop("list0_equal")
#decldescrpt("\

Given two lists xs1 and xs2 and a function eqfn, this function returns true
if and only if xs1 and xs2 are of the same length and eqfn(xs1[i], xs2[i])
holds for each natural number i less than the length of xs1.

")

(* ****** ****** *)

#declnamesynop("list0_find_exn")
#decldescrpt("\

This functions returns the first element in its first argument that
satisfies the predicate given as its second argument. In case that such an
element does not exist, the function raises an exception
(#dyncode("NotFoundExn")).\

")
#declnamesynop("list0_find_opt")
#decldescrpt("\
This function is the optional version of #dyncode("list0_find_exn").
")

(* ****** ****** *)

#declnamesynop("list0_map")
#decldescrpt("\

This function returns a list consisting of the sequence of results obtained
from applying its second argument f to each element in its first argument xs.
Following is a standard implementation of this function:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}{b}
list0_map (xs, f) = let
in
//
case+ xs of
| list0_cons (x, xs) =>
    list0_cons (f x, list0_map (xs, f))
| list0_nil () => list0_nil ()
//
end // end of [list0_map]
')

However, the implementation of this function in ATSLIB is tail-recursive.\

")

(* ****** ****** *)

#declnamesynop("list0_imap")
#decldescrpt("\

Given a list xs, this function returns a list consisting of the sequence of
results obtained from applying its second argument f to each pair (i,
xs[i]), where i ranges from 0 until the length of xs minus 1, inclusively,
and xs[i] refers to element i in the list xs.

Following is a standard implementation of this function:

#pats2xhtmld_tryit('
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}{b}
list0_imap (xs, f) = let
//
fun aux (
  i: int, xs: list0 a, f: cfun2 (int, a, b)
) : list0 b = let
in
  case+ xs of
  | list0_cons (x, xs) =>
      list0_cons (f (i, x), aux (i+1, xs, f))
  | list0_nil () => list0_nil ()
end // end of [aux]
//
in
  aux (0, xs, f)
end // end of [list0_imap]
')\

However, the implementation of this function in ATSLIB is tail-recursive.\

")

(* ****** ****** *)

#declnamesynop("list0_map2")
#decldescrpt("\

This function returns a list consisting of the sequence of results obtained
from applying its third argument f to each pair in the zip of the first and
second arguments.

Following is a standard implementation of this function:

#pats2xhtmld_tryit('\
//
staload \"libats/ML/SATS/list0.sats\"
//
implement{a1,a2}{b}
list0_map2 (xs1, xs2, f) = let
in
//
case+ xs1 of
| list0_cons (x1, xs1) => (
  case+ xs2 of
  | list0_cons (x2, xs2) =>
      list0_cons (f (x1, x2), list0_map2 (xs1, xs2, f))
  | list0_nil () => list0_nil ()
  )
| list0_nil () => list0_nil ()
//
end // end of [list0_map2]
')\

However, the implementation of this function in ATSLIB is tail-recursive.\

")

(* ****** ****** *)

#declnamesynop("list0_filter")
#decldescrpt("\

This function returns a list consisting of the sequence of elements in its
first argument that satisfy the predicate provided as its second argument.

Following is a standard implementation of this function:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement{a}
list0_filter (xs, p) = let
in
//
case+ xs of
| list0_cons (x, xs) =>
    if p (x) then
      list0_cons (x, list0_filter<a> (xs, p))
    else
      list0_filter<a> (xs, p)
    // end of [if]
| list0_nil () => list0_nil ()
//
end // end of [list0_filter]
')\

However, the implementation of this function in ATSLIB is tail-recursive.\

")

(* ****** ****** *)

#declnamesynop("list0_tabulate")
#decldescrpt("\

Given an integer n and a function f, this function returns a list
consisting of the elements f(0), f(1), ..., f(n-1) if n is a natural
number. Otherwise, it raises an exception (#dyncode("IllegalArgExn")).

")
#declexample("\

The following code implements a function that returns a list consisting of
all the permutations of a given list xs:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
fun{a:t0p}
list0_permute
  (xs0: list0 (a)): list0 (list0 a) = let
  val n = list0_length (xs0)
in
//
case+ xs0 of
| list0_cons (x0, xs1) => let
    val yss = list0_permute (xs1)
    val f = lam (ys: list0 a) =<cloref1>
      list0_tabulate<list0(a)> (n, lam i => list0_insert_at_exn (ys, i, x0))
    // end of [val]
  in
    list0_concat (list0_map (yss, f))
  end // end of [list0_cons]
| list0_nil () => list0_sing (list0_nil)
//
end // end of [list0_permute]
')
")

(* ****** ****** *)

#declnamesynop("list0_zip")
#decldescrpt("\

Given two lists xs and ys of length m and n, respectively, this function
returns a list of pairs (xs[i], ys[i]), where i ranges from 0 until
min(m,n)-1 and xs[i] (ys[i]) refers to element i in xs (ys).\

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/list0.sats"
//
implement
{x,y}
list0_zip (xs, ys) = let
in
//
case+ xs of
| list0_cons (x, xs) => (
  case+ ys of
  | list0_cons (y, ys) =>
      list0_cons (@(x, y), list0_zip<x,y> (xs, ys))
  | list0_nil () => list0_nil ()
  )
| list0_nil () => list0_nil ()
//
end // end of [list0_zip]
')\

However, the implementation of this function in ATSLIB is tail-recursive.\

")

(* ****** ****** *)

#declnamesynop("list0_zipwith")
#decldescrpt("\
This function does exactly the same as #dyncode("list0_map2").
")

(* ****** ****** *)

#declnamesynop("list0_mergesort")

(* ****** ****** *)

(* end of [list0.atxt] *)
