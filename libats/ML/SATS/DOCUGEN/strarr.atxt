(* ****** ****** *)

%{
implement srcfilename_get () = "../strarr.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_strarr")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/strarr\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for processing
strings in functional programming, where a string are represented as
an array of characters. Sometimes, the name #emph("strarr-value")
is used to refer to such a string.

")

(* ****** ****** *)

#declnamesynop("strarr")
#declnamesynop("strarr_type")

(* ****** ****** *)

#declnamesynop("strarr2array")
#decldescrpt("\
This cast function turns a strarr-value to an array of characters.\
")

#declnamesynop("array2strarr")
#decldescrpt("\
This cast function turns an array of characters to a strarr-value.\
")

(* ****** ****** *)

#declnamesynop("strarr_make_string")
#decldescrpt("\
This function, which overloads the symbol #dyncode("strarr"), builds
a strarr-value corresponding to a given C-style string.\
")

(* ****** ****** *)

#declnamesynop("strarr_copy")
#decldescrpt("\
Given a strarr-value, this function returns a copy of it.
")

(* ****** ****** *)

#declnamesynop("strarr_append")
#decldescrpt("\

This function, which overload the symbol #dyncode("+"), returns the
concatenation of two given strings.

")

(* ****** ****** *)

#declnamesynop("strarr_foreach")
#decldescrpt("\

This function traverses its first argument (a string) from the start to the
end and applies to each encountered character its second argument (a
closure-function).\

")
#declexample("\

The following code prints a given string onto the standard output channel:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/strarr.sats"
//
implement
main0 () = {
  val cs = (strarr)"abcdefg"
  val () = strarr_foreach (cs, lam (c) => print_char (c))
  val () = print_newline ()
} // end of [main0]
')
")

(* ****** ****** *)

#declnamesynop("strarr_rforeach")
#decldescrpt("\

This function traverses its first argument (a string) from the end to the
start and applies to each encountered character its second argument (a
closure-function).\

")

(* ****** ****** *)

(* end of [strarr.atxt] *)
