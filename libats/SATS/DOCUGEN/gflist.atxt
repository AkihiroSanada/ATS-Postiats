(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_gflist")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/gflist\
")

(* ****** ****** *)

#declpreamble("\

This package contains various functions for manipulating generic functional
lists that are assigned the fully indexed list type.

")

(* ****** ****** *)

#declname("gflist_vt")
#declsynop2('\
#para('\
#pats2xhtmls('\
datatype
gflist (
  a:t@ype+, ilist(*ind*)
) =
  | gflist_nil (a, ilist_nil) of ()
  | {x:int}{xs:ilist}
    gflist_cons
      (a, ilist_cons (x, xs)) of (stamped_t (a, x), gflist (a, xs))
    // end of [gflist_cons]
// end of [gflist]
')
')
')

(* ****** ****** *)

#declname("gflist_vt")
#declsynop2('\
#para('\
#pats2xhtmls('\
dataviewtype
gflist_vt (
  a:viewt@ype+, ilist(*ind*)
) =
  | gflist_vt_nil (a, ilist_nil) of ()
  | {x:int}{xs:ilist}
    gflist_vt_cons
      (a, ilist_cons (x, xs)) of (stamped_vt (a, x), gflist_vt (a, xs))
    // end of [gflist_vt_cons]
// end of [gflist_vt]
')
')
')

(* ****** ****** *)

#declnamesynop("gflist_length")

(* ****** ****** *)

#declnamesynop("gflist_append")

(* ****** ****** *)

#declnamesynop("gflist_revapp")
#declnamesynop("gflist_reverse")

(* ****** ****** *)

#declnamesynop("gflist_mergesort$cmp")
#declnamesynop("gflist_mergesort")

(* ****** ****** *)

(* end of [gflist.atxt] *)
