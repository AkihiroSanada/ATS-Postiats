(* ****** ****** *)

%{
implement srcfilename_get () = "../gflist.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_gflist")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/gflist\
")

(* ****** ****** *)

#declpreamble("\

This package contains various functions for manipulating generic functional
lists that are assigned the fully indexed list type.

")

(* ****** ****** *)

#declname("gflist_vt")
#declsynop2('\
#para('\
#pats2xhtmls('\
datatype
gflist (
  a:t@ype+, ilist(*ind*)
) =
  | gflist_nil (a, ilist_nil) of ()
  | {x:int}{xs:ilist}
    gflist_cons
      (a, ilist_cons (x, xs)) of (stamped_t (a, x), gflist (a, xs))
    // end of [gflist_cons]
// end of [gflist]
')
')
')

(* ****** ****** *)

#declname("gflist_vt")
#declsynop2('\
#para('\
#pats2xhtmls('\
dataviewtype
gflist_vt (
  a:viewt@ype+, ilist(*ind*)
) =
  | gflist_vt_nil (a, ilist_nil) of ()
  | {x:int}{xs:ilist}
    gflist_vt_cons
      (a, ilist_cons (x, xs)) of (stamped_vt (a, x), gflist_vt (a, xs))
    // end of [gflist_vt_cons]
// end of [gflist_vt]
')
')
')

(* ****** ****** *)

#declnamesynop("gflist_length")
#decldescrpt("\

Given a list, this function returns a proof and an integer such that the
proof attests to the integer being the length of the list.  ")

(* ****** ****** *)

#declnamesynop("gflist_append")
#decldescrpt("\

Given two lists xs1 and xs2, this function returns a proof and a list res
such that the proof attests to res being the result of appending xs1 to
xs2. The implementation given for #dyncode("gflist_append") is
tail-recursive.

")

(* ****** ****** *)

#declnamesynop("gflist_revapp")
#decldescrpt("\

Given two lists xs1 and xs2, this function returns a proof and a list res
such that the proof attests to res being the result of appending the reverse of
xs1 to xs2.  ")

(* ****** ****** *)

#declnamesynop("gflist_reverse")
#decldescrpt("\

Given a list xs, this function returns a proof and another list ys such
that the proof attests to ys being the reverse of xs. ")


(* ****** ****** *)

#declnamesynop("gflist_mergesort$cmp")
#declnamesynop("gflist_mergesort")
#decldescrpt("\

Given a list xs, this function returns a proof and another list ys such
that the proof attests to ys being an ordered permutation of ys. ")

(* ****** ****** *)

(* end of [gflist.atxt] *)
