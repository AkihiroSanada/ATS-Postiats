(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_fundeque_fingertree")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/fundeque_fingertree\
")

(* ****** ****** *)

#declpreamble("\

This package implements a functional deque (double-ended queue) based on
the so-called finger-tree structure.

")

(* ****** ****** *)

#declnamesynop("deque_t0ype_int_type")

(* ****** ****** *)

#declname("deque")
#declsynop2('
#para('\
#pats2xhtmls('\
stadef deque = deque_t0ype_int_type
typedef deque (a:t@ype) = [n:int] deque (a, n)
')')
')

(* ****** ****** *)

#declnamesynop("Deque")

(* ****** ****** *)

#declnamesynop("lemma_deque_param")

(* ****** ****** *)

#declnamesynop("fundeque_nil")
#decldescrpt("This function creates an empty deque.")

(* ****** ****** *)

#declnamesynop("fundeque_is_nil")
#declnamesynop("fundeque_is_cons")

(* ****** ****** *)

#declnamesynop("fundeque_size")

(* ****** ****** *)

#declnamesynop("fundeque_cons")
#declnamesynop("fundeque_uncons")
#declnamesynop("fundeque_get_atbeg")

(* ****** ****** *)

#declnamesynop("fundeque_snoc")
#declnamesynop("fundeque_unsnoc")
#declnamesynop("fundeque_get_atend")

(* ****** ****** *)

#declnamesynop("fundeque_append")

(* ****** ****** *)

#declnamesynop("fundeque_foreach$fwork")
#declnamesynop("fundeque_foreach")
#declnamesynop("fundeque_foreach_env")

(* ****** ****** *)

#declnamesynop("fundeque_rforeach$fwork")
#declnamesynop("fundeque_rforeach")
#declnamesynop("fundeque_rforeach_env")

(* ****** ****** *)

(* end of [fundeque_fingertree.atxt] *)
