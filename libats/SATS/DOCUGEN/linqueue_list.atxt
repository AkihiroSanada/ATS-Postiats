(* ****** ****** *)

%{
implement srcfilename_get () = "../linqueue_list.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_linqueue_list")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/linqueue_list\
")

(* ****** ****** *)

#declpreamble("\

#para("\

This package implements linear queues based on the singly-linked list
structure.

")

")

(* ****** ****** *)

#declnamesynop("queue")
#declnamesynop("queue_viewtype")

(* ****** ****** *)

#declnamesynop("queue_is_empty")
#declnamesynop("queue_isnot_empty")

(* ****** ****** *)

#declnamesynop("queue_size")

(* ****** ****** *)

#declnamesynop("queue_insert")
#decldescrpt("\

This function inserts an element at the end of a given queue.")

(* ****** ****** *)

#declnamesynop("queue_takeout")
#decldescrpt("\

This function takes out the element at the front of a given queue if the
queue is not empty, and returns true. Otherwise, it returns false. ")

(* ****** ****** *)

#declnamesynop("queue_takeout_list")
#decldescrpt("\

This function takes out all of the elements in a given queue. Note
that the complexity of the funtion is O(1).

")

(* ****** ****** *)

#declnamesynop("queue_foreach$cont")
#declnamesynop("queue_foreach$fwork")
#declnamesynop("queue_foreach")
#declnamesynop("queue_foreach_env")

(* ****** ****** *)

#declnamesynop("mynode")
#declnamesynop("mynode_viewtype")

(* ****** ****** *)

#declnamesynop("mynode2ptr")
#declnamesynop("mynode_free_null")

(* ****** ****** *)

#declnamesynop("mynode_make_elt")
#declnamesynop("mynode_getref_elt")
#declnamesynop("mynode_free_elt")

(* ****** ****** *)

#declnamesynop("queue_insert_ngc")
#declnamesynop("queue_takeout_ngc")

(* ****** ****** *)

#declname("qstruct")
#declsynop2('\
#para('
#pats2xhtmls('\
abst@ype
qstruct_tsz =
  $extype "atslib_linqueue_list_qstruct"
stadef qstruct = qstruct_tsz
absviewt@ype
qstruct_vt0ype (a:viewt@ype+, n:int) = qstruct_tsz
stadef qstruct = qstruct_vt0ype
')
')
')

#decldescrpt('\
#para('\

The abstract type #stacode("qstruct_tsz") is primarily
needed for allocating a variable in a function frame for
storing a qstruct-value.

')

#para('\

Given a type T and an integer N,
the abstract type #stacode("qstruct_vt0ype(T, N)") is
for an unboxed queue containing N elements of type T.

')

')

(* ****** ****** *)

#declnamesynop("qstruct_initize")
#declnamesynop("qstruct_uninitize")
#declnamesynop("qstruct_objfize")
#declnamesynop("qstruct_unobjfize")

(* ****** ****** *)

#declnamesynop("qstruct_insert")
#declnamesynop("qstruct_takeout")
#declnamesynop("qstruct_takeout_list")

(* ****** ****** *)

(* end of [linqueue_list.atxt] *)
