(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_linmap_skiplist")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/linmap_skiplist\
")

(* ****** ****** *)

#declpreamble("\

This package implements linear maps based on the (randomized) skip-list
structure.\

")

(* ****** ****** *)

#declnamesynop("map_viewtype")

(* ****** ****** *)

#declnamesynop("map") // = map_viewtype

(* ****** ****** *)

#declnamesynop("compare_key_key")
#decldescrpt("This function is for comparing map keys.")

(* ****** ****** *)

#declnamesynop("linmap_make_nil")
#decldescrpt("This function creates an empty map.")

(* ****** ****** *)

#declnamesynop("linmap_is_nil")
#decldescrpt("This function tests whether a given map is empty.")
#declnamesynop("linmap_isnot_nil")
#decldescrpt("This function tests whether a given map is non-empty.")

(* ****** ****** *)

#declnamesynop("linmap_search")
#declnamesynop("linmap_search_ref")
#declnamesynop("linmap_search_opt")

(* ****** ****** *)

#declnamesynop("linmap_insert")
#decldescrpt("\

In the case where the key [k0] is already associated with some item in
the given map, this function replaces the item with [x0] while storing
the item into [res].\

")
#declnamesynop("linmap_insert_any")
#decldescrpt("\

This function carries out insertion regardless whether
the key [k0] is already associated with some item in the given map.\

")

(* ****** ****** *)

#declnamesynop("linmap_takeout")
#declnamesynop("linmap_takeout_opt")
#declnamesynop("linmap_remove")

(* ****** ****** *)

#declnamesynop("linmap_foreach$fwork")
#declnamesynop("linmap_foreach")
#declnamesynop("linmap_foreach_env")

(* ****** ****** *)

(* end of [linmap_skiplist.atxt] *)
