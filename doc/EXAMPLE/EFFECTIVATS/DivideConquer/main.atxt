<!DOCTYPE html>
<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EFFECTIVATS-DivideConquer</title>
##patsyntax()
##thePage_style()
</head>

<body>

<h1>
Effective ATS:<br>
Let's build a template-based package!
</h1>

##para('\

ATS is a feature-rich language, and dependent types, linear types and
embeddable templates can be seen as three of its most prominent
features. The richness of programming features can potentially make it
highly demanding for a programmer to rein in the inherent complexity
associated with ATS. In this article, I would like to present a
template-based package that is designed to (partially) relieve a
programmer of the heavy burden that is so often associated with
programming in ATS.

')##comment("para")

##para('\

The code presented in this article is essentially based on some library code of ATS available
<a href="https://github.com/githwxi/ATS-Postiats/tree/master/libats/BUCS320/DivideConquer/.">on-line</a>.

')##comment("para")

<h2>Divide-and-Conquer</h2>

##para('\

In problem-solving, divide-and-conquer (D&amp;C) is a strategy that
divides a given problem of certain size into a collection of
subproblems of less size and then solves the subproblems (recursively)
and then combines the obtained solutions to the subproblems to form a
solution to the original given problem.

')##comment("para")

##para('\

Formally, D&amp;C can be given a template-based implemenation as follows:

<pre
class="patsyntax">
##dats2xhtml('\
//
implement
{}(*tmp*)
DC_solve(x0) = let
//
val
test = DC_base_test<>(x0)
//
in (* in-of-let *)
//
if
(test)
then
DC_base_solve<>(x0)
else r0 where
{
  val xs = DC_divide<>(x0)
  val r0 = DC_conquer<>(x0, xs)
} (* end of [else] *)
//
end // end of [DC_solve]
//
')</pre>

Basically, ##dyncode("DC_base_test") is called to test whether a given
input can be classified as a base case; if it is, then
##dyncode("DC_base_solve") can be called to return the output for the
given input immediately; otherwise, ##dyncode("DC_divide") is called
to divide the input into a list of inputs, which are then passed to
##dyncode("DC_conquer"):

')##comment("para")

<pre
class="patsyntax">
##dats2xhtml('\
//
implement
{}(*tmp*)
DC_conquer
  (x0, xs) = r0 where
{
//
val rs =
list0_map<input><output>
( xs
, lam(x) => DC_solve<>(x)
) (* end of [val] *)
//
val r0 = DC_conquer$combine<>(x0, rs)
//
} (* end of [DC_conquer] *)
//
')</pre>

As can be expected, the function ##dyncode("DC_conquer") is called to
process a given list of inputs and then form an output (for the
original input) based on the obtained outputs corresponding to the
list of inputs.

')##comment("para")

<hr size="2">
<p>
This article is written by <a href="http://www.cs.bu.edu/~hwxi/">Hongwei Xi</a>.
</p>
##thePage_script()
</body>
</html>
