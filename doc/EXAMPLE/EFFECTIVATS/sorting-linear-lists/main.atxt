%{
#include "./../ATEXT/atextfun.hats"
%}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EFFECTIVATS-word-counting</title>
#patscode_style()
</head>

<body>

<h1>
Effective ATS: Sorting Linear Lists
</h1>

<hr size="2">

In this article, I present an implementation of merge-sort on linear
lists. While quick-sort is often preferred over merge-sort for sorting
arrays, the latter is likely to be the chosen one for sorting lists. When
employed to sort an array, a serious weakness of merge-sort lies in its
need for additional memory (proportional to the size of the array) in order
to perform merging operation. However, there is no need for additional
additional when merge-sort is applied to lists. Some strengths of
merge-sort include its being a stable sorting algorithm and its
(worst-case) time-complexity being O(n(log(n)).

<h2>
Abstract Interface for Linear Lists
</h2>

<hr size="2">

This article is written by <a href="http://www.cs.bu.edu/~hwxi/">Hongwei Xi</a>.

</body>
</html>

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
