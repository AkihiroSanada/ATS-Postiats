<!DOCTYPE html>
<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EFFECTIVATS-GraphSearch</title>
##patsyntax()
##thePage_style()
</head>

<body>

<h1>
Effective ATS:<br>
A Template-Based Implementation of Graph Search
</h1>

##para('\

ATS is a feature-rich language, and dependent types, linear types and
embeddable templates can be seen as three of its most prominent
features. Note that a template being embeddable simply means that the
template can be given an implementation inside the body of a function
(so that any argument of this function can be referred to in the
implementation). In this article, I present a concrete example to
illustrate that embeddable templates can play a pivotal role in
support of a style of refinement-based programming.

')##comment("para")

<h2>Generic Graph Search</h2>

##para('\

Abstractly speaking, a graph is a (possibly infinite) collection of
nodes and each node is associated with a set of nodes that are
referred to as its neighbors. Let us introduce an abstract type
##stacode("node") for the nodes in a given graph (on which some kind of
search is to be performed):

<pre
class="patsyntax">
##dats2xhtml('\
//
abstype node = ptr
typedef nodelst = list0(node)
//
extern
fun
node_get_neighbors(nx: node): nodelst
//
')</pre>

Clearly, the interface assigned to ##dyncode("node_get_neighbors")
imposes the assumption that the set of neighbors of each node is finite.
Another choice is to define ##stacode("nodelst") as a linear stream
of the type ##stacode("stream_vt(node)").

')##comment("para")

##para('\

A common approach to searching a graph employs a store for nodes
that are to be processed. The search is over if the store becomes
empty. Otherwise, a node is chosen from the store to be processed
and all of its neighbors are put into the store. Let us introduce
a function ##dyncode("process_node") as follows for processing each
chosen node:

<pre
class="patsyntax">
##dats2xhtml('\
//
extern
fun{}
process_node(nx: node): bool
//
')</pre>

Note that a call to ##dyncode("process_node") returns a boolean value
to indicate whether the search should continue or stop immediately.

')##comment("para")

##para('\

The following two functions are for inserting a node and a list of
nodes into the store containing nodes that are to be processed:

<pre
class="patsyntax">
##dats2xhtml('\
//
extern
fun{} // for inserting a node
theSearchStore_insert(nx: node): void
extern
fun{} // for inserting a list of nodes
theSearchStore_insert_lst(nxs: nodelst): void
//
')</pre>

In addition, the following function is for choosing (based certian
search strategy) a node from the store:

<pre
class="patsyntax">
##dats2xhtml('\
//
extern
fun{}
theSearchStore_choose((*void*)): Option_vt(node)
//
')</pre>

Note that the function ##dyncode("theSearchStore_choose") returns a
node only if the store is not empty. A generic implementation of graph
search can now be given as follows:

<pre
class="patsyntax">
##dats2xhtml('\
//
extern
fun{}
GraphSearch(): void
//
(* ****** ****** *)

implement
{}(*tmp*)
GraphSearch
  ((*void*)) = let
//
fun
search
(
// argless
): void = let
//
val
opt = theSearchStore_choose()
//
in
//
case+ opt of
| ~None_vt() => ()
| ~Some_vt(nx) => let
    val cont = process_node(nx)
  in
    if cont
      then let
        val nxs =
          node_get_neighbors(nx)
        // end of [val]
      in
        theSearchStore_insert_lst(nxs); search((*void*))
      end // end of [then]
    // end of [if]
  end (* end of [Some_vt] *)
//
end (* end of [search] *)
//
in
  search((*void*))
end // end of [GraphSearch]
')</pre>

This implementation (of ##dyncode("GraphSearch")) should be
straightforward to follow.

')##comment("para")

<h2>Generic Graph DFS</h2>

##para('\

The so-called depth-first search (DFS) on a tree simply means that the
children of a node being processed should be processed next before the
other stored nodes. When generalized to search on a graph, DFS means
that the neighbors of a node being processed should be processed next.
In terms of implementation, the store employed by DFS should follow the
last-in-first-out principle, that is, the node chosen for the next round
should be the last node put into the store.

<pre
class="patsyntax">
##dats2xhtml('\
//
extern
fun{}
node_mark(node): void
extern
fun{}
node_unmark(node): void
//
extern
fun{}
node_is_marked(node): bool
overload
.is_marked with node_is_marked
//
')</pre>

')

##para('\

<pre
class="patsyntax">
##dats2xhtml('\
//
extern
fun{}
theSearchStore_get
  ((*void*)): slistref(node)
//
(* ****** ****** *)
//
implement
theSearchStore_insert<>
  (nx) = let
//
val
theStore = theSearchStore_get()
//
in
//
if
~(nx.is_marked())
then
(
  node_mark(nx);
  slistref_insert(theStore, nx)
)
//
end (* end of [theSearchStore_insert] *)
//
implement
{}(*tmp*)
theSearchStore_insert_lst(nxs) =
(
nxs
).rforeach()(lam nx => theSearchStore_insert(nx))
//
implement
theSearchStore_choose<>
  ((*void*)) = let
//
val
theStore = theSearchStore_get()
//
in
  slistref_takeout_opt(theStore)
end // end of [theSearchStore_choose]
//
')</pre>

')

<h2>Solving 8-Queen Puzzle</h2>

<h2>Generic Graph BFS</h2>

<h2>Playing Doublets Game</h2>

<h2>Compiling and Testing</h2>

##para("""\

Please find in the following files the entirety of the code presented
in this article:

<pre>
GraphSearch.dats // generic graph search
GraphSearch_dfs.dats // generic depth-first graph search
GraphSearch_bfs.dats // generic breadth-first graph search
QueenPuzzle.dats // solving 8-queen puzzle with GraphSearch_dfs
DoubletsPlay.dats // implementing Doublets based on GraphSearch_bfs
</pre>

In addition, there is an accompanying ##filename("Makefile") for compiling
and testing the code.\

""")

<hr size="2">
<p>
This article is written by <a href="http://www.cs.bu.edu/~hwxi/">Hongwei Xi</a>.
</p>
##thePage_script()
</body>
</html>
