%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2funcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture06-10">
#title("Through ATS to PHP")

#para("\

#emphasis("Through-one-to-all") is a catchy phrase often used to
describe ATS. When given a programming language X, a programmer often
assumes automatically that X is just meant for constructing programs
#emphasis("manually"). Sometimes, a (much) more productive approach to
writing code in X is to write some code in another programming
language for generating the needed code in X.\

")

#para("\

PHP is a programming language of great popularity for primarily
supporting the server-side web development. In this chapter, I plan to
demonstrate a style of co-programming with ATS and PHP.  In practice
(of this style of co-programming), ATS is mainly intended for
high-level programming (that, for instance, makes extensive use of
combinators) and PHP for relatively low-level programming (that, for
instance, handles direct interactions with the web server running PHP
code).

")

</chapter><!--id="lecture06-10"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

