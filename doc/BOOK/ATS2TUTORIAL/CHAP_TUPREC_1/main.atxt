%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from CHAP_TUPREC_1/main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="boxed_tuprec">
#title("Boxed Tuples and Records")

#para("\

A #emphasis("boxed") tuple/record is just a reference to
some location in memory where a flat tuple/record is stored.
Often the word #emphasis("unboxed") is also used to describe a
flat tuple/record.

")

#para("\

In the following code,
the types #stacode("abc_tup")
and #stacode("abc_rec") are for boxed tuples and records, respectively:

#atscode("\
typedef
abc_tup = '(int, int, string) // for tuples
typedef
abc_rec = '{a=int, b=int, c=string} // for records
")

Note that a tuple is just a special record in the sense that the
labels in the tuple are fixed to be ranging from 0 to n-1, inclusive,
where n is the tuple length. In the case of #stacode("abc_tup"), the
three associated labels are 0, 1, and 2. Note that #dyncode("'(") and
#dyncode("'{") are special symbols in ATS and there is no space
allowed after the single quote. If the use of these special symbols is
to be avoided, then one can declare the types #stacode("abc_tup") and
#stacode("abc_rec") as follows in a slightly different syntax:

#atscode("\
typedef
abc_tup = $tup(int, int, string) // for tuples
typedef
abc_rec = $ref{a=int, b=int, c=string} // for records
")

Also, the keywords
#stacode("$tup") and #stacode("$rec") can be replaced with
#stacode("$tuple") and #stacode("$record"), respectively.

")

#para("\

The following code demonstrates how tuples and records can be created
and their components (i.e., fields) taken out:

#atscode("\
//
val x_tup = '(0, 1, \"2\") : abc_tup
val x_rec = '{a=0, b=1, c=\"2\"} : abc_rec
//
val ((*void*)) = assertloc(x_tup.0 = x_rec.a)
val ((*void*)) = assertloc(x_tup.1 = x_rec.b)
val ((*void*)) = assertloc(x_tup.2 = x_rec.c)
//
")

")#comment("para")

#para("\

It should be noted that both #dyncode("x_tup") and #dyncode("x_rec")
are immutable. If one tries to typecheck the following code, then he
or she should see error messages reporting that #dyncode("x_tup.0")
and #dyncode("x_rec.a") are non-left-values:

#atscode("\
//
val () = x_tup.0 := 100 // *ERROR*: x_tup.0 not a left-value
val () = x_rec.a := 100 // *ERROR*: x_tup.0 not a left-value
//
")

")#comment("para")

#para("\

In order to have a tuple/record with mutable fields, we can just
literally create a reference to a flat tuple/record. In the following
code, the types #stacode("abc_tup_") and #stacode("abc_rec_") are
declcared for flat tuples and records, respectively:

#atscode("\
//
typedef abc_tup_r = ref(abc_tup_) // for tuples
typedef abc_rec_r = ref(abc_rec_) // for records
//
")

and the types #stacode("abc_tup_r") and #stacode("abc_rec_r") are for
references to tuples and records classified by #stacode("abc_tup_")
and #stacode("abc_rec_"), respetively:

#atscode("\
//
typedef abc_tup_r = ref(abc_tup_) // for tuples
typedef abc_rec_r = ref(abc_rec_) // for records
//
")

The code below demonstrates how tuples and records with mutable fields
can be created and their fields accessed and updated.

#atscode("\
//
val x_tup_r = ref<abc_tup_>(@(0, 1, \"2\"))
val x_rec_r = ref<abc_rec_>(@{a=0, b=1, c=\"2\"})
//
(* ****** ****** *)
//
val () = assertloc(x_tup_r->0 = x_rec_r->a)
val () = assertloc(x_tup_r->1 = x_rec_r->b)
val () = assertloc(x_tup_r->2 = x_rec_r->c)
//
(* ****** ****** *)
//
val () = x_tup_r->0 := 100 // *OKAY*: x_tup_r.0 is a left-value
val () = x_rec_r->a := 100 // *OKAY*: x_rec_r.a is a left-value
//
")

")

#para("\
  
")

#para("\

Please find #mycodelink("chap_tuprec_1.dats", "on-line") the entirety of the
code used in this chapter plus some testing code.\

")#comment("para")

</chapter><!--"boxed_tuprec"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_list.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} // end of [main]
%}
