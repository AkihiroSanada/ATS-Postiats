%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2fpcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture06">
#title("Functional List-Processing (2)")

#para("\

Let us see more functions in this chapter for performing functional
list-processing.

")

#para("\

A commonly used (higher-order) function is often referred to as
list-map, which takes a list and a function and returns a newly
constructed list consisting of all of the elements obtained from
applying the function to each element in the given list:

#dats2xhtml('\
//
extern
fun
{a:t@ype}
{b:t@ype}
list0_map
(xs: list0(a), fopr: cfun(a, b)): list0(b)
//
implement
{a}{b}
list0_map
(
  xs, fopr
) = auxlst(xs) where
{
//
fun
auxlst
(xs: list0(a)): list0(b) =
(
case+ xs of
| list0_nil() => list0_nil()
| list0_cons(x, xs) => list0_cons(fopr(x), auxlst(xs))
)
//
} (* end of [list0_map] *)
//
')

For instance, given the list #dyncode("(1, 2, 3, 4, 5)") and the
integer square function, #dyncode("list0_map") returns the list
consisting of #dyncode("1"), #dyncode("4"), #dyncode("9"),
#dyncode("16"), and #dyncode("25").\

")

#para("\

Another commonly used (higher-order) function is often referred to as
list-filter, which takes a list and a predicate (i.e., a function
returning a boolean value) and returns a newly constructed list
consisting of all of the elements in the given list that satisfy the
given predicate:

")

#para("\

#dats2xhtml('\
//
extern
fun
{a:t@ype}
list0_filter
(xs: list0(a), test: cfun(a, bool)): list0(a)
//
implement
{a}(*tmp*)
list0_filter
(
  xs, test
) = auxlst(xs) where
{
//
fun
auxlst
(xs: list0(a)): list0(a) =
(
case+ xs of
| list0_nil() =>
  list0_nil()
| list0_cons(x, xs) =>
  if test(x) then list0_cons(x, auxlst(xs)) else auxlst(xs)
)
//
} (* end of [list0_map] *)
//
')

For instance, given the list #dyncode("(1, 2, 3, 4, 5)")
and the predicate for testing whether an integer is even,
#dyncode("list0_filter") returns the list consisting of #dyncode("2")
and #dyncode("4").

")

#para("\

Please find #mycodelink("LECTURE/06/CODE", "on-line") the entirety of
the code used in this chapter. \

")#comment("para")

</chapter><!--id="lecture06"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

