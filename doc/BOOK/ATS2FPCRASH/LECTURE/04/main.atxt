%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2fpcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture04">
#title("Higher-Order Functions")

#para("\

In ATS, an anonymous function can be defined as a
lambda-abstraction. For instance, the square function on integers can
be defined as follows:

#dats2xhtml('\
//
val
square = lam(x: int): int => x * x
//
')

where the keyword #keycode("lam") is for constructing a
lambda-abstraction.  For defining a recursive anonymous function, the
keyword #keycode("fix") needed. For instance, the factorial function
can also be implemented as follows:

#dats2xhtml('\
//
val fact =
fix f(x: int): int => if x > 0 then x * f(x) else 1
//
')

A function value can be passed as a function argument just like any
other values, and a higher-order function refers to one that takes a
function value as its argument. As far as terminology is concerned, a
first-order function takes no function arguments; a second-order
function takes a first-order function as its argument; a third-order
function takes a second-order function as its argument; etc. In
practice, higher-order functions are overwhelmingly second-order ones.

")

#para("\

At this point, I want to digress a bit by advocating a so-called
#emphasis("build-your-own-library") approach to learning
programming. Often a limitation faced by someone learning programming
is that one does not have many opportunities to actually use the code
written by oneself. For instance, we rarely see a case where someone
makes extensive use of a data structure (such as hash table and
associative map) implemented by his or her own. Most likely, one
implements some data structure for the purpose of learning about it
and then throws the code away afterwards. My own experience strongly
indicates that one can learn a great deal more about programming if
one insists on calling library functions implemented by oneself. From
this point on, I will gradually build a library for this book and I
encourage everyone reading the book to study the source code for the library
<ulink url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FPCRASH/LECTURE/MYLIB\">on-line</ulink>.

")

#para("\

#dats2xhtml('\
//
extern
fun
int_foreach
(n0: int, fwork: cfun(int, void)): void
//
')

")

#para("\

Please find #mycodelink("LECTURE/04/CODE", "on-line") the entirety of
the code used in this chapter. \

")#comment("para")

</chapter><!--id="lecture04"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

