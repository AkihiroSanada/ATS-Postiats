%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2fpcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture11">
#title("Linear Lazy Stream-Processing")

#para("\

As the name suggests, linear lazy streams are the linear version of
lazy streams. In ATS, a linear value is one that cannot be shared; it
must be consumed properly for otherwise a type error is reported
during typechecking. Before moving on, let me present a simple but
telling example that demonstrates a stream-based approach to
addressing the potential risk of stack overflow due to deeply nested
non-tail-recursive calls.

")

#para("\

Please find #mycodelink("LECTURE/11/CODE", "on-line") the entirety of
the code used in this chapter. \

")#comment("para")

</chapter><!--id="lecture11"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

