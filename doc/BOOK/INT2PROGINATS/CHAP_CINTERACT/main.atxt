%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/int2proginats.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="Cinteraction">
#title("Interaction with C")

#para('\

ATS and C share precisely the same native/flat/unboxed data representation.
As a consequence, there is no need for wrapping/unwrapping or
boxing/unboxing when calling from C a function in ATS or vice versa, and
there is also no run-time overhead for doing so. To a large extent, ATS can
be considered a front-end to C that is equipped with a highly expressive
type system and a localizable template system.

')#comment("para")

</chapter>

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
