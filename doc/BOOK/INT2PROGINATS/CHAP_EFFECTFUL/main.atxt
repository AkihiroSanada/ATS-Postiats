%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/int2proginats.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
id="effecftul_programming_features">
#title("Effectful Programming Features")

#para("\

Effectful programming features are those that can generate effects at
run-time. But what is really an effect? The answer to this question is
rather complex as it depends on the model of evaluation. I will gradually
introduce various kinds of effects in this book. In sequential programming,
that is, constructing programs to be evaluated sequentially (in contrast to
concurrently), an expression is effectless if there exists a value such
that the expression and the value cannot be distinguished as far as
evaluation is concerned. For instance, the expression #dyncode("1+2") is
effectless as it cannot be distinguished from the value #dyncode("3"). An
effectless expression is also said to be pure.  On the other hand, an
effectful expression is one that can be distinguished from any given
values. For instance, the expression #dyncode('print("Hello")') is
effectful as its evaluation results in an observable behavior that
distinguishes the expression from any values.  In this case,
#dyncode('print("Hello")') is said to certain I/O effect.  If the
evaluation of an expression never terminates, then the expression is also
effectul. For instance, let us define a function #dyncode("loop") as
follows:

#atscode("\
fun loop (): void = loop ()
")

Then the expression #dyncode("loop()") can be distinguished from
any values in the following context:

#atscode('\
let val _ = [] in print ("Terminated") end
')

If the hole #dyncode("[]") in the context is replaced with
#dyncode("loop()"), then the evaluation of the resulting expression
continues forever.  If the hole #dyncode("[]") is replaced with any value,
then the evaluation leads to the string \"Terminated\" being printed out.
The expression #dyncode("loop") is said to contain non-termination effect.\

")#comment("para")

#para("\

I will cover programming features related to exceptional control-flow,
persistent memory storage and simple I/O in this chapter, which are all of
common use in practical programming.\

")

#para("\

The code employed for illustration in this chapter plus some additional
code for testing is available #mycodelink("CHAP_EFFECTFUL/", "on-line").\

")

</chapter><!--id="effectful_programming_features"-->

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
