(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libc_stdio")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libc/stdio\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are mostly the API for
the corresponding libc-functions declared in [stdio.h].

")

(* ****** ****** *)

#declnamesynop("FILEptr")
#declnamesynop("FILEptr0")
%{
(*
#declnamesynop("FILEref") // this one is declared in prelude/basic_sta.sats
*)
%}

(* ****** ****** *)

#declnamesynop("FILEptr2ptr")

(* ****** ****** *)

#declnamesynop("FILEptr_encode")
#declnamesynop("FILEptr_decode")

(* ****** ****** *)

#declnamesynop("FILEptr_free_null")

(* ****** ****** *)

#declnamesynop("FILEref_get_ptr")
#decldescrpt("\

This cast function is called on a FILEref-value filr to get the linear
FILEptr-value of filr for temporary use.  ")

(* ****** ****** *)

#declnamesynop("fopen_err")
#declexample("\

The following code opens a file of the name \"foo.txt\", writes into it the
string \"Hello, world!\", and then closes it:

#pats2xhtmld_tryit('\
//
staload "libc/SATS/stdio.sats"
//
implement
main () = let
//
val filp = fopen_err ("foo.txt", file_mode_w)
//
in
//
if FILEptr2ptr(filp) != 0 then let
  val () = fputs_exn (file_mode_lte_w_w | "Hello, world!", filp)
  val () = fclose_exn (filp)
in
  0
end else let
  val () = perror ("Can\'t open file")
  val () = FILEptr_free_null (filp)
in
  1
end // end of [if]
//
end // end of [main]
')
")

#declnamesynop("fopen_exn")
#declnamesynop("fopen_ref_exn")

(* ****** ****** *)

#declnamesynop("fclose0_err")
#declnamesynop("fclose1_err")
#declnamesynop("fclose0_exn")
#declnamesynop("fclose1_exn")

(* ****** ****** *)

#declnamesynop("clearerr0")
#declnamesynop("clearerr1")

(* ****** ****** *)

#declnamesynop("feof0")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
feof. It returns a nonzero if and only if the end-of-file indicator for the
stream associated with its argument is set.

")
#declnamesynop("feof1")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
feof. It returns a nonzero if and only if the end-of-file indicator for the
stream associated with its argument is set.

")

(* ****** ****** *)

#declnamesynop("ferror0")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
ferror. ")

#declnamesynop("ferror1")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
ferror. ")

(* ****** ****** *)

#declnamesynop("fflush0_err")
#declnamesynop("fflush1_err")

#declnamesynop("fflush0_exn")
#declnamesynop("fflush1_exn")

(* ****** ****** *)

#declnamesynop("fgetc0_err")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
fgetc. ")
#declexample("\

The following code copies chars read from the standard input channel to the
standard output channel:

#pats2xhtmld_tryit('\
//
staload "libc/SATS/stdio.sats"
//
local

fun loop (
  inp: FILEref, out: FILEref
) : void =
  if feof0 (inp) = 0 then let
    val _(*err*) = fputc0_err (fgetc0_err (inp), out) in loop (inp, out)
  end else () // end of [if]
// end of [loop]

in // in of [local]

implement
main () = 0 where {
  val () = loop (stdin_ref, stdout_ref)
} // end of [main]

end // end of [local]
')
")

#declnamesynop("fgetc1_err")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
fgetc. ")

(* ****** ****** *)

#declnamesynop("fgets0_err")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
fgets. ")
#declexample("\

The following code copies lines read from the standard input channel to the
standard output channel:

#pats2xhtmld_tryit('\
//
staload
UN="prelude/SATS/unsafe.sats"
staload "libc/SATS/stdio.sats"
//
local

fun loop
  {sz:pos} (
  inp: FILEref
, out: FILEref
, buf: &bytes(sz)? >> _
, sz: int sz
) : void = let
  val p = fgets0_err (buf, sz, inp)
in
  if p > 0 then let // p=addr@(buf) or NULL
    val _(*err*) = fputs0_err ($UN.cast{string}(p), out)
  in
    loop (inp, out, buf, sz)
  end else () // end of [if]
end // end of [loop]

in // in of [local]

implement
main () = 0 where {
  \#define BUFSZ 1024
  var buf = @[byte][BUFSZ]()
  val () = loop (stdin_ref, stdout_ref, buf, BUFSZ)
} // end of [main]

end // end of [local]
')
")

#declnamesynop("fgets1_err")
#decldescrpt("\

This function directly corresponds to the libc-function of the name
fgets. ")

(* ****** ****** *)

#declnamesynop("fgetpos")

(* ****** ****** *)

#declnamesynop("fileno0")
#declnamesynop("fileno1")

(* ****** ****** *)

#declnamesynop("fdopen_err")
#declnamesynop("fdopen_exn")

(* ****** ****** *)

#declnamesynop("fputc0_err")
#declnamesynop("fputc1_err")

#declnamesynop("fputc0_exn")
#declnamesynop("fputc1_exn")

(* ****** ****** *)

#declnamesynop("fputs0_err")
#declnamesynop("fputs1_err")

#declnamesynop("fputs0_exn")
#declnamesynop("fputs1_exn")

(* ****** ****** *)

#declnamesynop("fread")
#declnamesynop("fread_byte")
#declnamesynop("fread_byte_exn")

(* ****** ****** *)

#declnamesynop("fwrite")
#declnamesynop("fwrite_byte")
#declnamesynop("fwrite_byte_exn")

(* ****** ****** *)

#declnamesynop("perror")

(* ****** ****** *)

#declnamesynop("getchar0")
#declnamesynop("getchar1")

(* ****** ****** *)

#declnamesynop("putchar0")
#declnamesynop("putchar1")

(* ****** ****** *)

#declnamesynop("puts_err")
#declnamesynop("puts_exn")

(* ****** ****** *)

#declnamesynop("remove_err")
#declnamesynop("remove_exn")

(* ****** ****** *)

#declnamesynop("rename_err")
#declnamesynop("rename_exn")

(* ****** ****** *)

#declnamesynop("rewind0")
#declnamesynop("rewind1")

(* ****** ****** *)

#declnamesynop("tmpfile_err")
#declnamesynop("tmpfile_exn")
#declnamesynop("tmpfile_ref_exn")

(* ****** ****** *)

#declnamesynop("ungetc0_err")
#declnamesynop("ungetc0_exn")
#declnamesynop("ungetc1_err")
#declnamesynop("ungetc1_exn")

(* ****** ****** *)

(* end of [stdio.atxt] *)
