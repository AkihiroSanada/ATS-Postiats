%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"unistd.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/libats/SATS/CODEGEN/unistd.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

\#define SHR(x) x // SHARED // HX: for commenting
\#define NSH(x) x // NSHARED // HX: for commenting

#atscode_separator()

fun execv {n:pos}{l:addr} (
  pf: !parrnull_v (string, l, n) | path: NSH(string), argv: ptr l
) : int = "mac\#atslib_execv" // end of [execv]
fun execv_unsafe (path: NSH(string), argv: ptr): int = "mac\#atslib_execv"

fun execvp {n:pos}{l:addr} (
  pf: !parrnull_v (string, l, n) | fname: NSH(string), argv: ptr l
) : int = "mac\#atslib_execvp" // end of [execvp]
fun execvp_unsafe (fname: NSH(string), argv: ptr): int = "mac\#atslib_execvp"

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "unistd_atxt.txt")
%}\
