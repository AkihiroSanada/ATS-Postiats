%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"unsafe.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/unsafe.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

staload "prelude/SATS/unsafe.sats"

#atscode_separator()

implement{a}
ptr_get (p) = x where {
  val [l:addr] p = (ptr1_of_ptr)p
  prval (pf, fpf) = __assert () where {
    extern praxi __assert (): (a @ l, a? @ l -<lin,prf> void)
  } // end of [prval]
  val x = !p
  prval () = fpf (pf)
} // end of [ptr_get]

implement{a}
ptr_set (p, x) = () where {
  val [l:addr] p = (ptr1_of_ptr)p
  prval (pf, fpf) = __assert () where {
    extern praxi __assert (): (a? @ l, a @ l -<lin,prf> void)
  } // end of [prval]
  val () = !p := x
  prval () = fpf (pf)
} // end of [ptr_set]

implement{a}
ptr_exch (p, x) = () where {
  val [l:addr] p = (ptr1_of_ptr)p
  prval (pf, fpf) = __assert () where {
    extern praxi __assert (): (a @ l, a @ l -<lin,prf> void)
  } // end of [prval]
  val tmp = !p
  val () = !p := x
  val () = x := tmp
  prval () = fpf (pf)
} // end of [ptr_exch]

#atscode_separator()

implement{a}
cptr_get (p) = ptr_get<a> (cptr2ptr (p))

implement{a}
cptr_set (p, x) = ptr_set<a> (cptr2ptr (p), x)

implement{a}
cptr_exch (p, x) = ptr_exch<a> (cptr2ptr (p), x)

#atscode_separator()

local

staload GN = "prelude/SATS/gnumber.sats"

in // in of [local]

implement{a}
ptr_addby (p, x) =
  ptr_set<a> (p, $GN.gnumber_add (ptr_get<a> (p), x))
// end of [ptr_addby]

implement{a}
ptr_subby (p, x) =
  ptr_set<a> (p, $GN.gnumber_sub (ptr_get<a> (p), x))
// end of [ptr_subby]

implement{a}
ptr_mulby (p, x) =
  ptr_set<a> (p, $GN.gnumber_mul (ptr_get<a> (p), x))
// end of [ptr_mulby]

implement{a}
ptr_divby (p, x) =
  ptr_set<a> (p, $GN.gnumber_div (ptr_get<a> (p), x))
// end of [ptr_divby]

implement{a}
ptr_modby (p, x) =
  ptr_set<a> (p, $GN.gnumber_mod (ptr_get<a> (p), x))
// end of [ptr_modby]

end // end of [local]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "unsafe_atxt.txt")
%}\
