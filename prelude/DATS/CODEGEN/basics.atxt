%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"basics.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/basics.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("March, 2012")

#atscode_separator()

primplmnt
false_elim () = case+ 0 of _ =/=> ()

#atscode_separator()

primplmnt inteq_make () = INTEQ ()
primplmnt addreq_make () = ADDREQ ()
primplmnt booleq_make () = BOOLEQ ()
primplmnt chareq_make () = CHAREQ ()

#atscode_separator()

primplmnt prop_verify () = ()
primplmnt prop_verify_and_add () = ()

#atscode_separator()

implement
argv_get_at
  (argv, i) = x where {
  val (pf, fpf | p) =
    argv_takeout_strarr (argv)
  val x = !p.[i]
  prval () = minus_addback (fpf, pf | argv)
} // end of [argv_get_at]

#atscode_separator()

implement{a}
compval_elt_elt
  (x1, x2, cmp) = cmp (x1, x2)
// end of [compval_elt_elt]

implement{a}
compval_elt_elt_env
  (x1, x2, cmp, env) = cmp (x1, x2, env)
// end of [compval_elt_elt_env]

#atscode_separator()

implement{a}
compref_elt_elt
  (x1, x2, cmp) = cmp (x1, x2)
// end of [compref_elt_elt]

implement{a}
compref_elt_elt_env
  (x1, x2, cmp, env) = cmp (x1, x2, env)
// end of [compref_elt_elt_env]

#atscode_separator()

implement{a}
print_elt (x) = fprint_elt<a> (stdout_ref, x)
implement{a}
prerr_elt (x) = fprint_elt<a> (stderr_ref, x)

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "basics_atxt.txt")
%}\
