%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"string.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/string.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

%{
fun
fun_string_cmp_decl
  (opr: string): atext = let
//
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
implement
%s_string_string (x1, x2) = (compare_string_string (x1, x2) %s 0)\
", @(
 opr, fopr_d
)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [fun_char_cmp0_decl]
%}\
\
#fun_string_cmp_decl("lt")
#fun_string_cmp_decl("lte")
#fun_string_cmp_decl("gt")
#fun_string_cmp_decl("gte")
#fun_string_cmp_decl("eq")
#fun_string_cmp_decl("neq")

#atscode_separator()

implement
string0_length
  (str) = string1_length ($UN.cast{String}(str))
// end of [string0_length]

implement
string1_length
  {n} (str) = __strlen (str) where {
  extern fun __strlen (str: string n):<> size_t (n) = "mac\#atspre_strlen"
} // end of [where] // end of [string1_length]

#atscode_separator()

implement
strchr {n} (str, c0) = let
  prval () = lemma_string_param (str)
  extern fun __strchr (string, int):<> ptr = "mac\#atspre_strchr"
  extern fun __sub (ptr, ptr):<> ssizeBtw (0, n) = "mac\#atspre_sub_ptr_ptr"
  val p0 = string2ptr (str)
  val p1 = __strchr (str, (int_of_char)c0)
in
  if p1 > the_null_ptr then __sub (p1, p0) else g1int2int (~1)
end // end of [strchr]

implement
strrchr {n} (str, c0) = let
  prval () = lemma_string_param (str)
  extern fun __strrchr (string, int):<> ptr = "mac\#atspre_strrchr"
  extern fun __sub (ptr, ptr):<> ssizeBtw (0, n) = "mac\#atspre_sub_ptr_ptr"
  val p0 = string2ptr (str)
  val p1 = __strrchr (str, (int_of_char)c0)
in
  if p1 > the_null_ptr then __sub (p1, p0) else g1int2int (~1)
end // end of [strrchr]

#atscode_separator()

implement
strstr {n} (haystack, needle) = let
  prval () = lemma_string_param (haystack)
  extern fun __strstr (string, string):<> ptr = "mac\#atspre_strstr"
  extern fun __sub (ptr, ptr):<> ssizeBtw (0, n) = "mac\#atspre_sub_ptr_ptr"
  val p0 = string2ptr (haystack)
  val p1 = __strstr (haystack, needle)
in
  if p1 > the_null_ptr then __sub (p1, p0) else g1int2int (~1)
end // end of [strstr]

#atscode_separator()

implement
strspn {n} (str, accept) = let
  prval () = lemma_string_param (str)
  extern fun __strspn (string, string):<> sizeLte (n) = "mac\#atspre_strspn"
in
  __strspn (str, accept)
end // end of [strspn]

implement
strcspn {n} (str, reject) = let
  prval () = lemma_string_param (str)
  extern fun __strcspn (string, string):<> sizeLte (n) = "mac\#atspre_strcspn"
in
  __strcspn (str, reject)
end // end of [strcspn]

#atscode_separator()

implement{env}
string_foreach__cont (c, env) = true
implement{env}
string_foreach__fwork (c, env) = ((*void*))

implement{}
string_foreach (str) = let
  var env: void = () in string_foreach_env (str, env)
end // end of [string_foreach]

implement{env}
string_foreach_env
  {n} (str, env) = let
//
\#define NUL '\000'
//
fun loop (
  p: ptr, env: &env
) : ptr = let
  val p = $UN.cast2Ptr1 (p)
  val c = $UN.ptr_get<char> (p)
  val cont = (
    if c != NUL then string_foreach__cont (c, env) else false
  ) : bool // end of [val]
in
  if cont then let
    val () =
      string_foreach__fwork<env> (c, env)
    val p = ptr1_succ<char> (p)
  in
    loop (p, env)
  end else p // end of [if]
end // end of [fun]
//
val p0 =
  string2ptr (str)
val p1 = loop (p0, env)
//
in
  $UN.cast{sizeLte(n)}(p1 - p0)
end // end of [string_foreach_env]

#atscode_separator()

implement{env}
string_rforeach__cont (c, env) = true
implement{env}
string_rforeach__fwork (c, env) = ((*void*))

implement{}
string_rforeach (str) = let
  var env: void = () in string_rforeach_env (str, env)
end // end of [string_rforeach]

implement{env}
string_rforeach_env
  {n} (str, env) = let
//
val n = string1_length (str)
typedef chararr = array (char, n)
val p = $UN.cast{Ptr1} (str)
prval (pf, fpf) = $UN.ptr_vget {chararr} (p)
//
implement
array_rforeach__cont<char><env>
  (c, env) = string_rforeach__cont<env> (c, env)
implement
array_rforeach__fwork<char><env>
  (c, env) = string_rforeach__fwork<env> (c, env)
val res = array_rforeach_env<char><env> (!p, n, env)
//
prval () = fpf (pf)
//
in
  res
end // end of [string_rforeach_env]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "string_atxt.txt")
%}\
