%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"arrayptr.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/arrayptr.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("May, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

implement{a}
arrayptr_foreach_fun
  (A, asz, f) = let
  val p = ptrcast (A)
  prval pfarr = arrayptr_takeout (A)
  val () = array_foreach_fun<a> (!p, asz, f)
  prval () = arrayptr_addback (pfarr | A)
in
  // nothing
end // end of [arrayptr_foreach_fun]

implement{a}
arrayptr_foreach_funenv
  (pfv | A, asz, f, env) = let
  val p = ptrcast (A)
  prval pfarr = arrayptr_takeout (A)
  val () = array_foreach_funenv<a> (pfv | !p, asz, f, env)
  prval () = arrayptr_addback (pfarr | A)
in
  // nothing
end // end of [arrayptr_foreach_funenv]

#atscode_separator()

implement{a}
arrayptr_iforeach_fun
  (A, asz, f) = let
  val p = ptrcast (A)
  prval pfarr = arrayptr_takeout (A)
  val () = array_iforeach_fun<a> (!p, asz, f)
  prval () = arrayptr_addback (pfarr | A)
in
  // nothing
end // end of [arrayptr_iforeach_fun]

implement{a}
arrayptr_iforeach_funenv
  (pfv | A, asz, f, env) = let
  val p = ptrcast (A)
  prval pfarr = arrayptr_takeout (A)
  val () = array_iforeach_funenv<a> (pfv | !p, asz, f, env)
  prval () = arrayptr_addback (pfarr | A)
in
  // nothing
end // end of [arrayptr_iforeach_funenv]

#atscode_separator()

implement{a}
arrayptr_initize
  (A, asz) = () where {
  val p = ptrcast (A)
  prval pfarr = arrayptr_takeout (A)
  val () = array_initize<a> (!p, asz)
  prval () = arrayptr_addback (pfarr | A)
} // end of [arrayptr_initize]

implement{a}
arrayptr_uninitize
  (A, asz) = () where {
  val p = ptrcast (A)
  prval pfarr = arrayptr_takeout (A)
  val () = array_uninitize<a> (!p, asz)
  prval () = arrayptr_addback (pfarr | A)
} // end of [arrayptr_uninitize]

#atscode_separator()

implement{a}
arrayptr_make_uninitized
  (asz) = let
  val (pf, pfgc | p) = array_ptr_alloc<a> (asz)
in
  arrayptr_encode (pf, pfgc | p)
end // end of [arrayptr_uninitize]

#atscode_separator()

implement{a}
arrayptr_make_elt
  (asz, elt) = let
//
val (
  pf, pfgc | p
) = array_ptr_alloc<a> (asz)
val () = $effmask_wrt (array_initize_elt<a> (!p, asz, elt))
//
in
  arrayptr_encode (pf, pfgc | p)
end // end of [arrayptr_make_elt]

#atscode_separator()

implement{a}
arrayptr_make_list
  (asz, xs) = let
//
val (
  pf, pfgc | p
) = array_ptr_alloc<a> (asz)
val () = $effmask_wrt (array_initize_list<a> (!p, asz, xs))
//
in
  arrayptr_encode (pf, pfgc | p)
end // end of [arrayptr_make_list]

implement{a}
arrayptr_make_list_vt
  (asz, xs) = let
//
val (pf, pfgc | p) = array_ptr_alloc<a> (asz)
val () = $effmask_wrt (array_initize_list_vt<a> (!p, asz, xs))
//
in
  arrayptr_encode (pf, pfgc | p)
end // end of [arrayptr_make_list_vt]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "arrayptr_atxt.txt")
%}\
