%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"gprint.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/gprint.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("August, 2012")

#atscode_separator()

implement{a}
gprint (x) = let
  val out = gprint$out () in fprint_val<a> (out, x)
end // end of [gprint]

implement{} gprint$out () = stdout_ref

#atscode_separator()

implement{}
gprint_list$beg () = "("
implement{}
gprint_list$end () = ")"
implement{}
gprint_list$sep () = ", "

implement{a}
gprint_list (xs) = let
//
val out = gprint$out ()
val sep = gprint_list$sep ()
val _beg = gprint_list$beg ()
and _end = gprint_list$end ()
//
val () = fprint_string (out, _beg)
val () = fprint_list_sep (out, xs, sep)
val () = fprint_string (out, _end)
//
in
end // end of [gprint_list]

implement(a)
gprint<List(a)> (xs) = gprint_list<a> (xs)

#atscode_separator()

implement{}
gprint_array$beg () = "["
implement{}
gprint_array$end () = "]"
implement{}
gprint_array$sep () = ", "

implement{a}
gprint_array (A, n) = let
//
val out = gprint$out ()
val sep = gprint_array$sep ()
val _beg = gprint_list$beg ()
and _end = gprint_list$end ()
//
val () = fprint_string (out, _beg)
val () = fprint_array_sep (out, A, n, sep)
val () = fprint_string (out, _end)
//
in
  // nothing
end // end of [gprint_array]

#atscode_separator()

implement{a}
gprint_arrayptr
  (A, n) = () where {
  val p = ptrcast (A)
  prval pf = arrayptr_takeout (A)
  val () = gprint_array<a> (!p, n)
  prval () = arrayptr_addback (pf | A)
} // end of [gprint_arrayptr]

#atscode_separator()

implement{a}
gprint_arrayref
  (A, n) = () where {
  val (vbox pf | p) = arrayref_get_viewptr (A)
  val () = $effmask_ref (gprint_array<a> (!p, n))
} // end of [gprint_arrayref]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "gprint_atxt.txt")
%}\
