%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"filebas.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/filebas.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

staload STDIO = "libc/SATS/stdio.sats"
viewtypedef FILEptr1 = $STDIO.FILEptr1

#atscode_separator()

\#define c2i char2int0
\#define i2c int2char0

#atscode_separator()

local

extern
castfn file_mode
  {fm:file_mode} (x: string):<> file_mode (fm)
// end of [extern]

in (* in of [local] *)

implement file_mode_r = file_mode ("r")
implement file_mode_rr = file_mode ("r+")
implement file_mode_w = file_mode ("w")
implement file_mode_ww = file_mode ("w+")
implement file_mode_a = file_mode ("a")
implement file_mode_aa = file_mode ("a+")

end // end of [local]

#atscode_separator()

extern
castfn
__cast_filp (r: FILEref): FILEptr1

#atscode_separator()

(*
//
// HX: atspre_fileref_close
//
implement
fileref_close (filr) = $STDIO.fclose0_exn (filr)
*)

#atscode_separator()

(*
//
// HX: atspre_fileref_flush
//
*)
implement
fileref_flush (filr) = $STDIO.fflush0_exn (filr)

#atscode_separator()

(*
//
// HX: atspre_fileref_getc
//
*)
implement
fileref_getc (filr) = $STDIO.fgetc0_err (filr)

#atscode_separator()

(*
//
// HX: atspre_fileref_putc_int
// HX: atspre_fileref_putc_char
//
implement
fileref_putc_int (filr, c) = let
  val _(*ignored*) = $STDIO.fputc0_err (c, filr) in (*nothing*)
end // end of [fileref_putc_int]
implement
fileref_putc_char (filr, c) = fileref_putc_int (filr, (c2i)c)
*)

#atscode_separator()

(*
//
// HX: atspre_fileref_puts
//
implement
fileref_puts (filr, s) = let
  val _(*ignored*) = $STDIO.fputs0_err (s, filr) in (*nothing*)
end // end of [fileref_puts]
*)

#atscode_separator()

(*
//
// HX: atspre_fileref_is_eof
//
implement
fileref_is_eof (filr) =
  if $STDIO.feof0 (filr) != 0 true else false
// end of [fileref_is_eof]
*)

#atscode_separator()

implement fileref_load<int> = fileref_load_int
implement fileref_load<char> = fileref_load_char
implement fileref_load<double> = fileref_load_double
implement fileref_load<string> = fileref_load_string

#atscode_separator()

implement{a}
fileref_get_optval (r) = let
  var x: a?
  val yn = fileref_load<a> (r, x)
in
  option_vt_make_opt<a> (yn, x)
end // end of [fileref_get_optval]

(* ****** ****** *)

implement{a}
fileref_get_exnmsg
  (r, msg) = let
  var x: a?
  val yn = fileref_load<a> (r, x)
in
  if yn then let
    prval () = opt_unsome (x) in x
  end else let
    prval () = opt_unnone (x) in exit_errmsg {a} (1, msg)
  end (* end of [if] *)
end // end of [fileref_get_exnmsg]

#atscode_separator()

implement
fileref_get_line_charlst
  (filr) = let
//
val EOF = '\\\n'
//
fun loop (
  filr: FILEref, res: &ptr? >> charlst_vt
) : void = let
  val i = fileref_getc (filr)
in
  if i >= 0 then let
    val c = $UN.cast{char} (i)
  in
    if (c != EOF) then let
      val () = res := list_vt_cons{char}{0} (c, _)
      val+ list_vt_cons (_, res1) = res
      val () = loop (filr, res1)
    in
      fold@ (res)
    end else (res := list_vt_nil)
  end else (res := list_vt_nil)
end // end of [loop]
//
var res: ptr
val () = loop (filr, res)
//
in
  res
end // end of [fileref_get_line_charlst]

#atscode_separator()

implement
fileref_get_lines_charlstlst
  (filr) = let
//
vtypedef res = List0_vt (charlst_vt)
//
fun loop (
  filr: FILEref, res: &res? >> res
) : void = let
  val iseof = fileref_is_eof (filr)
in
//
if iseof then let
  val () = (res := list_vt_nil ())
in
  // nothing
end else let
  val line = fileref_get_line_charlst (filr)
  val () = res := list_vt_cons{..}{0}(line, _)
  val list_vt_cons (_, res1) = res
  val () = loop (filr, res1)
  prval () = fold@ (res)
in
  // nothing
end // end of [if]
//
end // end of [loop]
//
var res: res
val () = loop (filr, res)
//
in
  res
end // end of [fileref_get_lines_charlstlst]

#atscode_separator()

implement
fileref_get_line_string
  (filr) = let
  var n: size_t // uninitialized
  var ending: int // uninitialized
  val str = fileref_get_line_string_main (filr, n, ending)
  prval () = lemma_strnptr_param (str)
in
  strptr_of_strnptr (str)
end // end of [fileref_get_line_string]

implement
fileref_get_lines_stringlst
  (filr) = let
//
vtypedef res = List0_vt (Strptr1)
//
fun loop (
  filr: FILEref, res: &res? >> res
) : void = let
  val iseof = fileref_is_eof (filr)
in
//
if iseof then let
  val () = (res := list_vt_nil ())
in
  // nothing
end else let
  val line = fileref_get_line_string (filr)
  val () = res := list_vt_cons{..}{0}(line, _)
  val list_vt_cons (_, res1) = res
  val () = loop (filr, res1)
  prval () = fold@ (res)
in
  // nothing
end // end of [if]
//
end // end of [loop]
//
var res: res
val () = loop (filr, res)
//
in
  res
end // end of [fileref_get_lines_stringlst]

#atscode_separator()

local

fun loop (
  filr: FILEref
, n: int, res: &ptr? >> charlst_vt
) : int = let
in
//
if n != 0 then let
  val i = fileref_getc (filr)
in
  if i >= 0 then let
    val c = $UN.cast{char} (i)
    val () = res := list_vt_cons{char}{0} (c, _)
    val+ list_vt_cons (_, res1) = res
    val n = loop (filr, pred(n), res1)
    prval () = fold@ (res)
  in
    n
  end else let
    val () = res := list_vt_nil () in n
  end // end of [if]
end else let
  val () = res := list_vt_nil () in n(*=0*)
end // end of [if]
//
end // end of [loop]

in // in of [local]

implement
fileref_get_file_charlst
  (filr) = res where {
  var res: ptr; val _ = loop (filr, ~1, res)
} // end of [fileref_get_file_charlst]

implement
fileref_nget_file_charlst
  (filr, n) = res where {
  var res: ptr; val _(*nleft*) = loop (filr, n, res)
} // end of [fileref_nget_file_charlst]

end // end of [local]

#atscode_separator()

implement
fileref_put_charlst
  (out, cs) = let
//
implement(env)
list_foreach$fwork<char><env> (c, env) = fileref_putc (out, c)
//
in
  list_foreach<char> (cs)
end // end of [fileref_put_charlst]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "filebas_atxt.txt")
%}\
