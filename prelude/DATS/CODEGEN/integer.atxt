%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"integer.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/integer.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("May, 2012")
\
%{
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun g0int_implist (
  kname: string, tname: string
) : atext = let
//
fun f (opr: string):<cloref1> atext = let
//
val x = sprintf (
"implement g0int_%s<%s> = g0int_%s_%s\n", @(opr, kname, opr, tname)
) (* end of [val] *)
//
in
  atext_strptr (x)
end // end of [f]
//
var res: atextlst = list_nil
//
val () = res := list_cons (f "neg", res)
val () = res := list_cons (f "succ", res)
val () = res := list_cons (f "pred", res)
val () = res := list_cons (atext_newline, res)
val () = res := list_cons (f "add", res)
val () = res := list_cons (f "sub", res)
val () = res := list_cons (f "mul", res)
val () = res := list_cons (f "div", res)
val () = res := list_cons (f "mod", res)
val () = res := list_cons (atext_newline, res)
val () = res := list_cons (f "lt", res)
val () = res := list_cons (f "lte", res)
val () = res := list_cons (f "gt", res)
val () = res := list_cons (f "gte", res)
val () = res := list_cons (f "eq", res)
val () = res := list_cons (f "neq", res)
val () = res := list_cons (f "compare", res)
val () = res := list_cons (atext_newline, res)
val () = res := list_cons (f "max", res)
val () = res := list_cons (f "min", res)
val res = list_reverse (res)
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0int_implist]
%}
\
#atscode_separator()

#g0int_implist("int_kind", "int")
implement print_int (x) = fprint_int (stdout_ref, x)
implement prerr_int (x) = fprint_int (stderr_ref, x)
implement fprint_elt<int> (out, x) = fprint_int (out, x)

#atscode_separator()

#g0int_implist("lint_kind", "lint")
implement print_lint (x) = fprint_lint (stdout_ref, x)
implement prerr_lint (x) = fprint_lint (stderr_ref, x)
implement fprint_elt<lint> (out, x) = fprint_lint (out, x)

#atscode_separator()

#g0int_implist("llint_kind", "llint")
implement print_llint (x) = fprint_llint (stdout_ref, x)
implement prerr_llint (x) = fprint_llint (stderr_ref, x)
implement fprint_elt<llint> (out, x) = fprint_llint (out, x)

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "integer_atxt.txt")
%}\
