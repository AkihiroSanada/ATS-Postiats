%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list_vt.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/list_vt.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

implement{a}
list_vt_uncons (xs) = let
  val+ ~list_vt_cons (x, xs1) = xs in xs := xs1; x
end // end of [list_vt_uncons]

#atscode_separator()

implement{a}
fprint_list_vt_sep
  (out, xs, sep) = let
//
implement(env)
list_vt_iforeach__fwork<a><env>
  (i, x, env) = let
  val () = if i > 0 then fprint_string (out, sep)
in
  fprint_ref<a> (out, x)
end // end of [list_iforeach__fwork]
//
val _(*n*) = list_vt_iforeach (xs)
//
in
  // nothing
end // end of [fprint_list_vt_sep]

#atscode_separator()

implement{}
list_vt_is_nil (xs) =
  case+ xs of list_vt_nil () => true | _ =>> false
implement{}
list_vt_is_cons (xs) =
  case+ xs of list_vt_cons _ => true | _ =>> false
implement{}
list_vt_is_sing (xs) =
  case+ xs of list_vt_sing (x) => true | _ =>> false
implement{}
list_vt_is_pair (xs) =
  case+ xs of list_vt_pair (x1, x2) => true | _ =>> false
// end of [list_vt_is_pair]

#atscode_separator()

implement{a}
list_vt_length (xs) = let
  prval () = lemma_list_vt_param (xs)
  fun loop
    {i,j:nat} .<i>. (
    xs: !list_vt (a, i), j: int j
  ) :<> int (i+j) =
    case+ xs of
    | list_vt_cons (_, xs) => loop (xs, j + 1)
    | list_vt_nil () => j
  // end of [loop]
in
  loop (xs, 0)
end // end of [list_vt_length]

#atscode_separator()

implement{a}
list_vt_getref_at
  (xs, i) = (
  if i > 0 then let
    val+ @list_vt_cons (_, xs1) = xs
    val p = list_vt_getref_at (xs1, pred(i))
    prval () = fold@ (xs)
  in
    p
  end else $UN.cast2Ptr1 (addr@(xs))
) // end of [list_vt_getref_at]

implement{a}
list_vt_get_at
  {n} (xs, i) = x where {
//
  var xs = __ref (xs) where {
    extern castfn
      __ref (xs: !list_vt (a, n)):<> list_vt (a, n)
  } // end of [val]
//
  val pi = list_vt_getref_at (xs, i)
  val+ list_cons (x, _) = $UN.ptr_get<List1(a)> (pi)
//
  prval () = __unref (xs) where {
    extern praxi __unref (xs: list_vt (a, n)): void
  } // end of [val]
//
} // end of [list_vt_get_at]

implement{a}
list_vt_set_at
  {n} (xs, i, x) = () where {
//
  var xs = __ref (xs) where {
    extern castfn
      __ref (xs: !list_vt (a, n)):<> list_vt (a, n)
  } // end of [val]
//
  val pi = list_vt_getref_at (xs, i)
  prval (pf, fpf) = $UN.ptr_vtake {List1_vt(a)} (pi)
  val+ @list_vt_cons (x1, xs1) = !pi
  val () = x1 := x
  prval () = fold@ (!pi)
  prval () = fpf (pf)
//
  prval () = __unref (xs) where {
    extern praxi __unref (xs: list_vt (a, n)): void
  } // end of [val]
//
} // end of [list_vt_set_at]

#atscode_separator()

implement{a}
list_vt_exch_at
  {n} (xs, i, x) = () where {
//
  var xs = __ref (xs) where {
    extern castfn
      __ref (xs: !list_vt (a, n)):<> list_vt (a, n)
  } // end of [val]
//
  val pi = list_vt_getref_at (xs, i)
  prval (pfat, fpf) = $UN.ptr_vtake {List1_vt(a)} (pi)
  val+ @list_vt_cons (x1, xs1) = !pi
//
  val t = x1
  val () = x1 := x
  val () = x := t
//
  prval () = fold@ (!pi); prval () = fpf (pfat)
//
  prval () = __unref (xs) where {
    extern praxi __unref (xs: list_vt (a, n)): void
  } // end of [val]
//
} // end of [list_vt_exch_at]

#atscode_separator()

implement{a}
list_vt_insert_at
  {n} (xs, i, x) = let
  val pi = list_vt_getref_at (xs, i)
  val xs_i = $UN.ptr_get<List0_vt(a)> (pi)
  val () = $UN.ptr_set<List1_vt(a)> (pi, list_vt_cons (x, xs_i))
  prval () = __assert (xs) where {
    extern praxi __assert (xs: &list_vt (a, n) >> list_vt (a, n+1)): void
  } // end of [prval]
in
  // nothing
end // end of [list_vt_insert_at]

implement{a}
list_vt_remove_at
  {n} (xs, i) = x1 where {
  val pi = list_vt_getref_at (xs, i)
  val xs_i = $UN.ptr_get<List1_vt(a)> (pi)
  val+ ~list_vt_cons (x1, xs1_i) = xs_i
  val () = $UN.ptr_set<List0_vt(a)> (pi, xs1_i)
  prval () = __assert (xs) where {
    extern praxi __assert (xs: &list_vt (a, n) >> list_vt (a, n-1)): void
  } // end of [prval]
} // end of [list_vt_remove_at]

#atscode_separator()

implement{a}
list_vt_freelin__fwork (x) = gfree_ref (x)

implement{a}
list_vt_freelin (xs) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  xs: list_vt (a, n)
) :<!wrt> void =
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val () =
        list_vt_freelin__fwork<a> (x)
      val xs1 = xs1
      val () = free@ {a}{0} (xs)
    in
      loop (xs1)
    end // end of [list_vt_cons]
  | ~list_vt_nil () => ()
// end of [loop]
//
in
  loop (xs)
end // end of [list_vt_freelin]

implement{a}
list_vt_free (xs) = let
//
implement
list_vt_freelin__fwork<a>
  (x) = let
  prval () = topize (x) in (*void*)
end // end of [list_vt_freelin__fwork]
//
in
  list_vt_freelin (xs)
end // end of [list_vt_free]

#atscode_separator()

implement{a}
list_vt_clear__fwork (x) = gfree_ref (x)

implement{a}
list_vt_clear
  {n} (xs) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  xs: !list_vt (a, n) >> list_vt (a?, n)
) :<!wrt> void =
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val () =
        list_vt_clear__fwork (x)
      val () = loop (xs1)
      prval () = fold@ {a?} (xs)
    in
      // nothing
    end // end of [list_vt_cons]
  | @list_vt_nil () => fold@ {a?} (xs)
// end of [loop]
//
in
  loop (xs)
end // end of [list_vt_clear]

#atscode_separator()

implement{a}
list_vt_append
  {m,n} (xs, ys) = let
//
prval () = lemma_list_vt_param (xs)
prval () = lemma_list_vt_param (ys)
//
fun loop {m:nat} .<m>. (
  xs: &list_vt (a, m) >> list_vt (a, m+n), ys: list_vt (a, n)
) :<!wrt> void = (
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val () = loop (xs1, ys); prval () = fold@ (xs) in (*none*)
    end // end of [list_vt_cons]
  | ~list_vt_nil () => (xs := ys)
) (* end of [loop] *)
//
var res = xs
val () = loop (res, ys)
//
in
  res
end // end of [list_vt_append]

implement{a}
list_vt_extend
  (xs, y) = list_vt_append<a> (xs, list_vt_sing (y))
// end of [list_vt_extend]

#atscode_separator()

implement{a}
list_vt_reverse (xs) =
  list_vt_reverse_append<a> (xs, list_vt_nil)
// end of [list_vt_reverse]

#atscode_separator()

implement{a}
list_vt_reverse_append
  (xs, ys) = let
//
prval () = lemma_list_vt_param (xs)
prval () = lemma_list_vt_param (ys)
//
fun loop
  {m,n:nat} .<m>. (
  xs: list_vt (a, m), ys: list_vt (a, n)
) :<!wrt> list_vt (a, m+n) =
  case xs of
  | @list_vt_cons
      (_, xs1) => let
      val xs1_ = xs1
      val () = xs1 := ys; prval () = fold@ (xs)
    in
      loop (xs1_, xs)
    end
  | ~list_vt_nil () => ys
(* end of [loop] *)
//
in
  loop (xs, ys)
end // end of [list_vt_reverse_append]

#atscode_separator()

implement{a}
list_vt_concat
  (xss) = let
//
viewtypedef VT = List_vt (a)
viewtypedef VT0 = List0_vt (a)
//
fun loop {n:nat} .<n>. (
  res: VT, xss: list_vt (VT, n)
) :<!wrt> VT0 =
  case+ xss of
  | ~list_vt_cons
      (xs, xss) => let
      val res = list_vt_append<a> (xs, res)
    in
      loop (res, xss)
    end // end of [list_vt_cons]
  | ~list_vt_nil () => let
      prval () = lemma_list_vt_param (res) in res
    end // end of [list_vt_nil]
// end of [loop]
val xss = list_vt_reverse (xss)
//
prval () = lemma_list_vt_param (xss)
//
in
//
case+ xss of
| ~list_vt_cons
    (xs, xss) => loop (xs, xss)
| ~list_vt_nil () => list_vt_nil ()
//
end // end of [list_vt_concat]

#atscode_separator()

implement{a}
list_vt_split (xs) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  xs: list_vt (a, n)
, res1: &ptr? >> list_vt (a, n1)
, res2: &ptr? >> list_vt (a, n2)
) : #[n1,n2:nat | n1+n2==n] void = let
in
//
case+ xs of
| @list_vt_cons
    (x, xs_tl) => let
    val xs_tl_v = xs_tl
    val test = list_vt_split__pred (x)
  in
    if test then let
      val () = res1 := xs
      val () = loop (xs_tl_v, xs_tl, res2)
    in
      fold@ (res1)
    end else let
      val () = res2 := xs
      val () = loop (xs_tl_v, res1, xs_tl)
    in
      fold@ (res2)
    end // end of [if]
  end // end of [list_vt_cons]
| ~list_vt_nil () => (
    res1 := list_vt_nil; res2 := list_vt_nil
  )
//
end // end of [loop]
//
var res1: ptr
var res2: ptr
val () = loop (xs, res1, res2)
val () = xs := res1
//
in
  res2
end // end of [list_vt_split]

#atscode_separator()

implement
{x}{env}
list_vt_foreach_env
  (xs, env) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  xs: !list_vt (x, n), env: &env
) : void = let
in
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val () = list_vt_foreach__fwork<x><env> (x, env)
      val () = loop (xs1, env)
    in
      fold@ (xs)
    end // end of [list_vt_cons]
  | list_vt_nil () => ()
end // end of [loop]
//
in
  loop (xs, env)
end // end of [list_vt_foreach_env]

#atscode_separator()

implement{a}
list_vt_foreach_fun
  {fe} (xs, f) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  xs: !list_vt (a, n), f: (&a) -<fe> void
) :<fe> void =
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val () = f (x)
      val () = loop (xs1, f)
    in
      fold@ (xs)
    end // end of [list_vt_cons]
  | list_vt_nil () => ()
// end of [loop]
in
  loop (xs, f)
end // end of [list_vt_foreach_fun]

implement{a}
list_vt_foreach_funenv
  {v}{vt}{fe}
  (pf | xs, f, env) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  pf: !v
| xs: !list_vt (a, n)
, f: (!v | &a, !vt) -<fe> void
, env: !vt
) :<fe> void =
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val () = f (pf | x, env)
      val () = loop (pf | xs1, f, env)
    in
      fold@ (xs)
    end // end of [list_vt_cons]
  | list_vt_nil () => ()
// end of [loop]
//
in
  loop (pf | xs, f, env)
end // end of [list_vt_foreach_funenv]

#atscode_separator()

implement
{x}{env}
list_vt_iforeach_env
  (xs, env) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  i: int, xs: !list_vt (x, n), env: &env
) : void = let
in
  case+ xs of
  | @list_vt_cons (x, xs1) => let
      val () = list_vt_iforeach__fwork<x><env> (i, x, env)
      val () = loop (succ(i), xs1, env)
    in
      fold@ (xs)
    end // end of [list_vt_cons]
  | list_vt_nil () => ()
end // end of [loop]
//
in
  loop (0, xs, env)
end // end of [list_vt_iforeach_env]

#atscode_separator()

implement{a}
list_vt_filter (xs) = let
//
implement
list_vt_freelin__fwork<a>
  (x) = let
  prval () = topize (x) in (*void*)
end // end of [list_vt_freelin__fwork]
//
in
  list_vt_filterlin<a> (xs)
end // end of [list_vt_filter]

implement{a}
list_vt_filterlin (xs) = let
//
prval () = lemma_list_vt_param (xs)
//
fun loop
  {n:nat} .<n>. (
  xs: &list_vt (a, n) >> listLte_vt (a, n)
) :<!wrt> void = let
in
  case+ xs of
  | @list_vt_cons (x, xs1) => let
      val test = list_vt_filter__pred<a> (x)
    in
      if test then let
        val () = loop (xs1)
      in
        fold@ (xs)
      end else let
        val xs1 = xs1
        val () = list_vt_freelin__fwork<a> (x)
        val () = free@ {..}{0} (xs)
        val () = xs := xs1
      in
        loop (xs)
      end // end of [if]
    end // end of [list_vt_cons]
  | @list_vt_nil () => fold@ (xs)
end // end of [loop]
//
var xs = xs
val () = loop (xs)
//
in
  xs
end // end of [list_vt_filter]

#atscode_separator()

implement{a}
list_vt_mergesort__cmp (x1, x2) = gcompare_val<a> (x1, x2)

implement{a}
list_vt_mergesort
  {n} (xs) = let
//
fun split
  {n,n1:nat | n >= n1} .<n1>. (
  xs: &list_vt (a, n) >> list_vt (a, n1)
, n1: int n1, res: &List_vt a? >> list_vt (a, n-n1)
) :<!wrt> void =
  if n1 > 0 then let
    val+ @list_vt_cons (_, xs1) = xs
    val () = split (xs1, n1-1, res)
  in
    fold@ (xs)
  end else let
    val () = res := xs
    val () = xs := list_vt_nil ()
  in
    // nothing
  end // end of [if]
// end of [split]
fun merge {n1,n2:nat} .<n1+n2>. (
    xs1: list_vt (a, n1)
  , xs2: list_vt (a, n2)
  , res: &List_vt a? >> list_vt (a, n1+n2)
  ) :<!wrt> void =
  case+ xs1 of
  | @list_vt_cons (x1, xs11) => (
    case+ xs2 of
    | @list_vt_cons (x2, xs21) => let
        val sgn =
          list_vt_mergesort__cmp (x1, x2)
        // end of [val]
      in
        if sgn <= 0 then let
          prval () = fold@ {a} (xs2)
          val () = merge (xs11, xs2, xs11)
          prval () = fold@ {a} (xs1)
        in
          res := xs1
        end else let
          prval () = fold@ {a} (xs1)
          val () = merge (xs1, xs21, xs21)
          prval () = fold@ {a} (xs2)
        in
          res := xs2
        end // end of [if]
      end // end of [list_vt_cons]
    | ~list_vt_nil () => (fold@ (xs1); res := xs1)
    ) // end of [list_vt_cons]
  | ~list_vt_nil () => (res := xs2)
// end of [merge]
//
val n = list_vt_length<a> (xs)
//
in
//
if n >= 2 then let
  val+ @list_vt_cons (_, xs1) = xs
  var res: List_vt a? // uninitialized
  val () = split (xs1, (n-1)/2, res)
  prval () = fold@ (xs)
  val xs1 = list_vt_mergesort<a> (xs)
  val xs2 = list_vt_mergesort<a> (res)
  val () = merge (xs1, xs2, res)
in
  res
end else xs // end of [if]
//
end // end of [list_vt_mergesort]

#atscode_separator()

implement{a}
list_vt_quicksort__cmp (x1, x2) = gcompare_val<a> (x1, x2)

(*
** HX-2012-05:
** copy a list into an array, perform quicksort on the
** array and then copy it back into the list
*)
implement{a}
list_vt_quicksort
  {n} (xs) = let
//
abst@ype a2 = a?
//
implement
array_quicksort__cmp<a2>
  (x1, x2) = let
  extern praxi __to {l:addr} (pf: !a2 @ l >> a @ l): void
  extern praxi __fr {l:addr} (pf: !a @ l >> a2 @ l): void
  prval () = __to (view@(x1))
  prval () = __to (view@(x2))
  val ans = list_vt_quicksort__cmp<a> (x1, x2)
  prval () = __fr (view@(x1))
  prval () = __fr (view@(x2))
in
  ans
end // end of [array_quicksort__cmp]
//
prval () = lemma_list_vt_param (xs)
//
val n =
  list_vt_length (xs)
val nsz = g1int2uint(n)
//
val (
  pf, pfgc | p
) = array_ptr_alloc<a2> (nsz)
val () = let
  val xs1 = $UN.castvwtp1 {list(a2,n)} (xs)
in
  array_copy_from_list (!p, xs1)
end // end of [val]
//
val () = array_quicksort<a2> (!p, nsz)
//
val () = let
  fun loop
    {l:addr}{n:nat} .<n>. (
    pf: !array_v (a2, l, n) | xs: !list_vt (a, n), p: ptr l
  ) :<!wrt> void =
    case+ xs of
    | @list_vt_cons (x, xs1) => let
        prval (
          pf1, pf2
        ) = array_v_uncons (pf)
        val p_x = $UN.cast2Ptr1 (addr@(x))
        val () = $UN.ptr_set<a2> (p_x, !p)
        val () = loop (pf2 | xs1, ptr1_succ<a2> (p))
        prval () = pf := array_v_cons (pf1, pf2)
        prval () = fold@ (xs)
      in
        // nothing
      end // end of [list_vt]
    | list_vt_nil () => ()
  // end of [loop]
in
  loop (pf | xs, p)
end // end of [val]
//
val () = array_ptr_free {a2} (pf, pfgc | p)
//
in
  xs
end // end of [list_vt_quicksort]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_vt_atxt.txt")
%}\
