%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"float.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/float.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()
%{
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun g0float_implist (
  kname: string, tname: string
) : atext = let
//
fun f (opr: string):<cloref1> atext = let
//
val x = sprintf (
"implement g0float_%s<%s> = g0float_%s_%s\n", @(opr, kname, opr, tname)
) (* end of [val] *)
//
in
  atext_strptr (x)
end // end of [f]
//
var res: atextlst = list_nil
//
val () = res := list_cons (f "add", res)
val () = res := list_cons (f "sub", res)
val () = res := list_cons (f "mul", res)
val () = res := list_cons (f "div", res)
val () = res := list_cons (f "mod", res)
val () = res := list_cons (atext_newline(), res)
val () = res := list_cons (f "lt", res)
val () = res := list_cons (f "lte", res)
val () = res := list_cons (f "gt", res)
val () = res := list_cons (f "gte", res)
val () = res := list_cons (f "eq", res)
val () = res := list_cons (f "neq", res)
val () = res := list_cons (f "compare", res)
val () = res := list_cons (atext_newline(), res)
val () = res := list_cons (f "max", res)
val () = res := list_cons (f "min", res)
val res = list_reverse (res)
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0float_implist]
%}\

#g0float_implist("fltknd", "float")

#atscode_separator()

#g0float_implist("dblknd", "double")

#atscode_separator()

#g0float_implist("ldblknd", "ldouble")

#atscode_separator()
//
implement
print_float (x) = fprint_float (stdout_ref, x)
implement
prerr_float (x) = fprint_float (stderr_ref, x)
//
implement
print_double (x) = fprint_double (stdout_ref, x)
implement
prerr_double (x) = fprint_double (stderr_ref, x)
//
implement
print_ldouble (x) = fprint_ldouble (stdout_ref, x)
implement
prerr_ldouble (x) = fprint_ldouble (stderr_ref, x)
//
#atscode_separator()
//
implement
fprint_val<float> (out, x) = fprint_float (out, x)
implement
fprint_val<double> (out, x) = fprint_double (out, x)
implement
fprint_val<ldouble> (out, x) = fprint_ldouble (out, x)
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "float_atxt.txt")
%}\
