%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"arrayref.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/arrayref.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("May, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

implement{a}
arrayref_get_at_size (A, i) = let
  val (vbox pf | p) = arrayref_get_viewptr (A)
in
  array_get_at_size (!p, i)
end // end of [arrayref_get_at_size]

implement{a}{tk}
arrayref_get_at_gint (A, i) =
  arrayref_get_at_size (A, g1int2uint (i))
// end of [arrayref_get_at_gint]

implement{a}{tk}
arrayref_get_at_guint (A, i) =
  arrayref_get_at_size (A, g1uint2uint (i))
// end of [arrayref_get_at_guint]

#atscode_separator()

implement{a}
arrayref_set_at_size (A, i, x) = let
  val (vbox pf | p) =
    arrayref_get_viewptr (A) in array_set_at_size (!p, i, x)
  // end of [val]
end // end of [arrayref_set_at_size]

implement{a}{tk}
arrayref_set_at_gint (A, i, x) =
  arrayref_set_at_size (A, g1int2uint (i), x)
// end of [arrayref_set_at_gint]

implement{a}{tk}
arrayref_set_at_guint (A, i, x) =
  arrayref_set_at_size (A, g1uint2uint (i), x)
// end of [arrayref_set_at_guint]

#atscode_separator()

implement{a}
arrayref_exch_at_size (A, i, x) = let
  val (vbox pf | p) =
    arrayref_get_viewptr (A) in array_exch_at_size (!p, i, x)
  // end of [val]
end // end of [arrayref_exch_at_size]

implement{a}{tk}
arrayref_exch_at_gint (A, i, x) =
  arrayref_exch_at_size (A, g1int2uint (i), x)
// end of [arrayref_exch_at_gint]

implement{a}{tk}
arrayref_exch_at_guint (A, i, x) =
  arrayref_exch_at_size (A, g1uint2uint (i), x)
// end of [arrayref_exch_at_guint]

#atscode_separator()

implement{a}
arrayref_make_elt (asz, x) = let
  val A = arrayptr_make_elt<a> (asz, x) in arrayptr_refize (A)
end // end of [arrayref_make_elt]

#atscode_separator()

implement{a}
fprint_arrayref
  (out, A, n) = let
  val (
    vbox pf | p
  ) = arrayref_get_viewptr (A)
in
  $effmask_ref (fprint_array (out, !p, n))
end // end of [fprint_arrayref]

#atscode_separator()

implement{a}
fprint_arrayref_sep
  (out, A, n, sep) = let
  val (
    vbox pf | p
  ) = arrayref_get_viewptr (A)
in
  $effmask_ref (fprint_array_sep (out, !p, n, sep))
end // end of [fprint_arrayref_sep]

#atscode_separator()

implement{a}
arrayref_foreach
  (A, asz) = let
  val (vbox pf | p) =
    arrayref_get_viewptr (A) in
  $effmask_ref (array_foreach<a> (!p, asz))
end // end of [arrayref_foreach]

implement
{a}{env}
arrayref_foreach_env
  (A, asz, env) = let
  val (vbox pf | p) = arrayref_get_viewptr (A)
in
  $effmask_ref (array_foreach_env<a><env> (!p, asz, env))
end // end of [arrayref_foreach_env]

#atscode_separator()

local

datatype
arrszref (
  a:viewt@ype
) =
  {n:int}
  ARRSZREF of (arrayref (a, n), size_t (n))
// end of [arrszref]

assume arrszref_vt0ype_type = arrszref

in (* in of [local] *)

implement
arrszref_make_arrayref
  (A, asz) = ARRSZREF (A, asz)

implement
arrszref_get_size
  (ASZ) = let
  val+ARRSZREF (_(*A*), asz) = ASZ in asz
end // end of [arrszref_get_size]

implement
arrszref_get_refsize
  (ASZ, aszr) = let
//
val+ARRSZREF (A, asz) = ASZ
prval () = lemma_arrayref_param (A)
//
in
  aszr := asz; A
end // end of [arrszref_get_refsize]

end // end of [local]

#atscode_separator()

implement{a}
arrszref_make_elt
  (asz, x) = let
  val asz = g1ofg0_uint (asz)
  val A = arrayref_make_elt<a> (asz, x)
in
  arrszref_make_arrayref (A, asz)
end // end of [arrszref_make_elt]

#atscode_separator()

implement{a}
arrszref_make_list
  (xs) = let
//
prval () = lemma_list_param (xs)
//
val n = list_length<a> (xs)
val A = arrayref_make_listlen (xs, n)
//
in
  arrszref_make_arrayref (A, (i2sz)n)
end // end of [arrszref_make_list]

#atscode_separator()

implement{a}
arrszref_get_at_size
  (A0, i) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (A0, n)
val i = g1ofg0_uint (i)
//
in
//
if n > i then arrayref_get_at_size (A, i) else $raise ArraySubscriptExn()
//
end // end of [arrszref_get_at_size]

implement{a}
arrszref_set_at_size
  (A0, i, x) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (A0, n)
val i = g1ofg0_uint (i)
//
in
//
if n > i then arrayref_set_at_size (A, i, x) else $raise ArraySubscriptExn()
//
end // end of [arrszref_set_at_size]

implement{a}
arrszref_exch_at_size
  (A0, i, x) = $effmask_wrt let
//
var n: size_t
val A = arrszref_get_refsize (A0, n)
val i = g1ofg0_uint (i)
//
in
//
if n > i then arrayref_exch_at_size (A, i, x) else $raise ArraySubscriptExn()
//
end // end of [arrszref_exch_at_size]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "arrayref_atxt.txt")
%}\
