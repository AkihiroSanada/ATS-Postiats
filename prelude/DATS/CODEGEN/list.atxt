%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/list.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()

implement{}
list_is_nil (xs) =
  case+ xs of list_nil () => true | _ =>> false
// end of [list_is_nil]
implement{}
list_is_cons (xs) =
  case+ xs of list_cons _ => true | _ =>> false
// end of [list_is_cons]

#atscode_separator()

implement{x}
list_copy (xs) = let
  viewtypedef res = List_vt (x)
  prval () = lemma_list_param (xs)
  fun loop
    {n:nat} .<n>. (
    xs: list (x, n)
  , res: &res? >> list_vt (x, n)
  ) :<> void = case+ xs of
    | list_cons (x, xs) => let
        val () = res :=
          list_vt_cons {x}{0} (x, _(*top*))
        val+ list_vt_cons (_, res1) = res // res1 = res.1
        val () = loop (xs, res1)
        prval () = fold@ (res)
      in
        // nothing
      end // end of [cons]
    | list_nil () => res := list_vt_nil ()
  // end of [loop]
  var res: res? // uninitialized
  val () = loop (xs, res)
in
  res (*linear list*)
end // end of [list_copy]

implement(x)
listize<List(x)><x> (xs) = list_copy (xs)

#atscode_separator()

implement{x}
list_reverse (xs) =
  list_reverse_append2_vt<x> (xs, list_vt_nil)
// end of [list_reverse]

implement(x)
rlistize<List(x)><x> (xs) = list_reverse<x> (xs)

#atscode_separator()

implement{a}
list_append
  {m,n} (xs, ys) = let
  val ys = __cast (ys) where {
    extern castfn __cast (ys: list (a, n)):<> list_vt (a, n)
  } // end of [val]
in
  list_of_list_vt (list_append2_vt (xs, ys))
end // end of [list_append]

implement{a}
list_append1_vt
  {m,n} (xs, ys) = let
  val ys = __cast (ys) where {
    extern castfn __cast (ys: list (a, n)):<> list_vt (a, n)
  } // end of [val]
in
  list_of_list_vt (list_vt_append (xs, ys))
end // end of [list_append1_vt]

implement{a}
list_append2_vt
  {m,n} (xs, ys) = let
//
prval () = lemma_list_param (xs)
prval () = lemma_list_vt_param (ys)
//
fun loop
  {m:nat} .<m>. (
  xs: list (a, m)
, ys: list_vt (a, n)
, res: &ptr? >> list_vt (a, m+n)
) :<> void =
  case+ xs of
  | list_cons
      (x, xs) => let
      val () = res :=
        list_vt_cons {a}{0} (x, _)
      val+ list_vt_cons (_, res1) = res
      val () = loop (xs, ys, res1)
      prval () = fold@ (res)
    in
      // nothing
    end // end of [list_cons]
  | list_nil () => res := ys
// end of [loop]
var res: ptr // uninitialized
val () = loop (xs, ys, res)
//
in
  res
end // end of [list_append2_vt]

#atscode_separator()

implement{a}
list_reverse_append
  {m,n} (xs, ys) = let
  val ys = __cast (ys) where {
    extern castfn __cast (ys: list (a, n)):<> list_vt (a, n)
  } // end of [val]
in
  list_of_list_vt (list_reverse_append2_vt (xs, ys))
end // end of [list_reverse_append]

implement{a}
list_reverse_append1_vt<a>
  (xs, ys) = let
//
prval () =
  lemma_list_vt_param (xs)
prval () = lemma_list_param (ys)
//
fun loop {m,n:nat} .<m>. (
  xs: list_vt (a, m), ys: list (a, n)
) :<> list (a, m+n) =
  case+ xs of
  | @list_vt_cons (x, xs1) => let
      val xs1_ = xs1
      val ys = __cast (ys) where {
        extern castfn __cast (ys: list (a, n)):<> list_vt (a, n)
      } // end of [val]
      val () = xs1 := ys
      prval () = fold@ (xs)
    in
      loop (xs1_, list_of_list_vt (xs))
    end // end of [list_vt_cons]
  | ~list_vt_nil () => ys
// end of [loop]
in
  loop (xs, ys)
end // end of [list_reverse_append1_vt]

#atscode_separator()

implement{a}
list_reverse_append2_vt<a>
  (xs, ys) = let
//
prval () = lemma_list_param (xs)
prval () = lemma_list_vt_param (ys)
//
fun loop
  {m,n:nat} .<m>. (
  xs: list (a, m), ys: list_vt (a, n)
) :<> list_vt (a, m+n) =
  case+ xs of
  | list_cons (x, xs) => loop (xs, list_vt_cons (x, ys))
  | list_nil () => ys
// end of [loop]
in
  loop (xs, ys)
end // end of [list_reverse_append2_vt]

#atscode_separator()

implement{x}
list_foreach_funenv
  {v}{vt}{fe}
  (pfv | xs, f, env) = let
//
fun loop {n:nat} .<n>. (
  pfv: !v
| xs: list (x, n)
, f: (!v | x, !vt) -<fun,fe> void
, env: !vt
) :<fe> void =
  case+ xs of
  | list_cons (x, xs) => let
      val () = f (pfv | x, env) in loop (pfv | xs, f, env)
    end // end of [list_cons]
  | list_nil () => ()
// end of [loop]
in
  loop (pfv | xs, f, env)
end // end of [list_foreach_funenv]

implement(x)
foreach_funenv<List(x)><x>
  (pfv | xs, f, env) = list_foreach_funenv (pfv | xs, f, env)
// end of [foreach_funenv]

#atscode_separator()

implement{x}
list_iforeach_funenv
  {v}{vt}{n}{fe}
  (pfv | xs, f, env) = let
//
fun loop
  {i:nat | i <= n} .<n-i>. (
  pfv: !v
| xs: list (x, n-i)
, f: (!v | natLt(n), x, !vt) -<fun,fe> void
, env: !vt, i: int i
) :<fe> int n =
  case+ xs of
  | list_cons (x, xs) => let
      val () = f (pfv | i, x, env) in loop (pfv | xs, f, env, i+1)
    end // end of [list_cons]
  | list_nil () => i // = size(xs)
// end of [loop]
in
  loop (pfv | xs, f, env, 0)
end // end of [list_iforeach_funenv]

implement(x)
iforeach_funenv<List(x)><x>
  (pfv | xs, f, env) = let
  val n = list_iforeach_funenv (pfv | xs, f, env) in g1int2uint (n)
end // end of [iforeach_funenv]

#atscode_separator()

implement{x}{y}
list_map_funenv
  {v}{vt}{n}{fe}
  (pfv | xs, f, env) = let
  viewtypedef ys = List_vt (y)
  prval () =
    lemma_list_param (xs) // prove [n >= 0]
  // end of [prval]
  fun loop {n:nat} .<n>. (
    pfv: !v
  | xs: list (x, n)
  , f: (!v | x, !vt) -<fun,fe> y
  , env: !vt
  , res: &ys? >> list_vt (y, n)
  ) :<fe> void =
    case+ xs of
    | list_cons
        (x, xs) => let
        val y = f (pfv | x, env)
        val () = res :=
          list_vt_cons {y}{0} (y, _(*top*))
        val+ list_vt_cons (_, res1) = res // res1 = res.1
        val () = loop (pfv | xs, f, env, res1)
        prval () = fold@ (res)
      in
        (*nothing*)
      end // end of [list_vt_cons]
    | list_nil () => res := list_vt_nil
  // end of [loop]
  var res: ys // uninitialized
  val () = loop (pfv | xs, f, env, res)
in
  res(*list_vt(y,n)*)
end // end of [list_map_funenv]

implement(x,y)
listize_funenv<List(x)><x><y>
  (pfv | xs, f, env) = list_map_funenv (pfv | xs, f, env)
// end of [listize_funenv]

#atscode_separator()

implement{a}
list_mergesort
  (xs, cmp) = let
  val xs = list_copy (xs) in
  list_vt_mergesort<a> (xs, lam (x1, x2) => cmp (x1, x2))
end // end of [list_mergesort]

implement{a}
list_quicksort
  (xs, cmp) = let
  val xs = list_copy (xs) in
  list_vt_quicksort<a> (xs, lam (x1, x2) => cmp (x1, x2))
end // end of [list_quicksort]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_atxt.txt")
%}\
