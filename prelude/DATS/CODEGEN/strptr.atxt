%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"strptr.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/strptr.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

implement{}
strptr_is_null (str) = (strptr2ptr (str) = null)
implement{}
strptr_isnot_null (str) = (strptr2ptr (str) > null)

#atscode_separator()

%{
fun
fun_strptr_cmp_decl
  (opr: string): atext = let
//
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
implement
%s_strptr_strptr (x1, x2) = (compare_strptr_strptr (x1, x2) %s 0)\
", @(
 opr, fopr_d
)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [fun_char_cmp0_decl]
%}\
\
#fun_strptr_cmp_decl("lt")
#fun_strptr_cmp_decl("lte")
#fun_strptr_cmp_decl("gt")
#fun_strptr_cmp_decl("gte")
#fun_strptr_cmp_decl("eq")
#fun_strptr_cmp_decl("neq")

#atscode_separator()

implement
strptrlst_concat (xs) = let
//
fun loop {n0:nat} .<n0>. (
  xs: &list_vt(strptr0, n0)>>list_vt(strptr1, n1)
) :<!wrt> #[n1:nat | n1 <= n0] void = let
in
  case+ xs of
  | @list_vt_cons
      (x, xs1) => let
      val notnull = strptr_isnot_null (x)
    in
      if notnull then let
        val () = loop (xs1)
      in
        fold@ (xs)
      end else let
        val () = strptr_free_null (x)
        val xs1 = xs1
        val () = free@ {..}{0} (xs)
        val () = xs := xs1
      in
        loop (xs)
      end // end of [if]
    end // end of [list_vt_cons]
  | @list_vt_nil () => fold@ (xs)
end // end of [loop]
//
var xs = xs
val () = loop (xs)
//
in
//
case+ xs of
| ~list_vt_nil () => strptr_null ()
| ~list_vt_cons (x, ~list_vt_nil ()) => x
| _ => let
    val res =
      stringlst_concat ($UN.castvwtp1{List(string)}(xs))
    val () = loop (xs) where {
      fun loop {n:nat} .<n>.
        (xs: list_vt (strptr1, n)):<!wrt> void =
        case+ xs of
        | ~list_vt_cons (x, xs) => (strptr_free (x); loop (xs))
        | ~list_vt_nil () => ()
      // end of [loop]
    } // end of [where] // end of [val]
  in
    res
  end // end of [_]
//
end // end of [strptrlst_concat]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "strptr_atxt.txt")
%}\
