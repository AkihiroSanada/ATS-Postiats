%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"arrnull.dats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/arrnull.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

implement{a}
arrnull_is_empty
  {l}{n} (pf | p) = let
  val x = $UN.ptr_get<ptr> (p)
  val [lx:addr] x = ptr1_of_ptr0 (x)
  extern praxi __assert (): [(lx > null && n > 0) || (lx <= null && n == 0)] void
in
  x = null
end // end of [arrnull_is_empty]

implement{a}
arrnull_isnot_empty
  {l}{n} (pf | p) = let
  val x = $UN.ptr_get<ptr> (p)
  val [lx:addr] x = ptr1_of_ptr0 (x)
  extern praxi __assert (): [(lx > null && n > 0) || (lx <= null && n == 0)] void
in
  x > null
end // end of [arrnull_isnot_empty]

#atscode_separator()

implement{a}
arrnull_size (pf | p) = let
  prval () = lemma_arrnull_v_params (pf)
  fun loop
    {i,j:nat} .<i>. (
    pf: !arrnull_v (a, l, i) | p: ptr l, j: size_t j
  ) :<> size_t (i+j) = let
    val isnemp = arrnull_isnot_empty<a> (pf | p)
  in
    if isnemp then let
      prval arrnull_v_cons (pf1, pf2) = pf
      val n = loop (pf2 | p+sizeof<a>, j+1)
      prval () = pf := arrnull_v_cons (pf1, pf2)
    in
      n
    end else j
  end (* end of [loop] *)
in
  loop (pf | p, 0)
end // end of [arrnull_size]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "arrnull_atxt.txt")
%}\
