%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"arrayptr.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/arrayptr.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

absviewtype
arrayptr_3 (
  a:viewt@ype+, l: addr, n: int
) = ptr // end of [arrayptr]
viewtypedef
arrayptr_2 (
  a:viewt@ype, n:int
) = [l:addr] arrayptr_3 (a, l, n)
//
stadef arrayptr = arrayptr_3
stadef arrayptr = arrayptr_2
//
#atscode_separator()

absviewtype
arrayptrout (a:t@ype, l: addr, n: int) = ptr

#atscode_separator()

castfn
arrayptr2ptr
  {a:vt0p}
  {l:addr}{n:int} (A: !arrayptr (INV(a), l, n)):<> ptr l
overload ptrcast with arrayptr2ptr
castfn
arrayptrout2ptr
  {a:t0p}{l:addr}{n:int} (A: !arrayptrout (a, l, n)):<> ptr l
overload ptrcast with arrayptrout2ptr

#atscode_separator()

praxi
arrayptr_takeout
  {a:vt0p}{l:addr}{n:int} (
  A: !arrayptr (INV(a), l, n) >> arrayptrout (a?, l, n)
) : array_v (a, l, n) // end of [arrayptr_takeout]

praxi
arrayptr_addback
  {a:vt0p}{l:addr}{n:int} (
  pf: array_v (INV(a), l, n)
| A: !arrayptrout (a?, l, n) >> arrayptr (a, l, n)
) : void // end of [arrayptr_addback]

#atscode_separator()
//
fun{a:t0p}
arrayptr_get_at
  {n:int} (
  A: !arrayptr (INV(a), n), i: sizeLt (n)
) :<> a // end of [arrayptr_get_at]
fun{a:t0p}
arrayptr_set_at
  {n:int} (
  A: !arrayptr (INV(a), n), i: sizeLt (n), x: a
) :<!wrt> void // end of [arrayptr_set_at]
//
overload [] with arrayptr_get_at
overload [] with arrayptr_set_at
//
#atscode_separator()

fun{a:vt0p}
arrayptr_exch_at
  {n:int} (
  A: !arrayptr (INV(a), n), i: sizeLt (n), x: &a
) :<!wrt> void // end of [arrayptr_exch_at]

#atscode_separator()

fun arrayptr_free
  {a:t0p}{l:addr}{n:int} (A: arrayptr (a, l, n)):<> void
// end of [arrayptr_free]

#atscode_separator()

fun{a:vt0p}
arrayptr_make_uninitized
  {n:int} (asz: size_t n):<> arrayptr (a?, n)
// end of [arrayptr_make_uninitized]

#atscode_separator()

fun{a:t0p}
arrayptr_make_elt
  {n:int}
  (asz: size_t n, x: INV(a)):<> arrayptr (a, n)
// end of [arrayptr_make_elt]

#atscode_separator()

fun{a:vt0p}
arrayptr_foreach__fwork (x: &a >> a): void
fun{a:vt0p}
arrayptr_foreach {n:nat}
  (A: !arrayptr (INV(a), n), asz: size_t (n)): void

fun{a:vt0p}
arrayptr_foreach_funenv
  {v:view}
  {vt:viewtype}
  {n:int}
  {fe:eff} (
  pfv: !v
| A: !arrayptr (INV(a), n)
, asz: size_t n
, f: (!v | &a, !vt) -<fun,fe> void
, env: !vt
) :<fe> void
// end of [arrayptr_foreach_funenv]

fun{a:vt0p}
arrayptr_foreach_fun
  {n:int}{fe:eff} (
  A: !arrayptr (INV(a), n), asz: size_t n, f: (&a) -<fun,fe> void
) :<fe> void // end of [arrayptr_foreach_fun]

#atscode_separator()

fun{a:vt0p}
arrayptr_iforeach__fwork
  (i: size_t, x: &a >> a): void
fun{a:vt0p}
arrayptr_iforeach {n:int}
  (A: !arrayptr (INV(a), n), asz: size_t (n)): void

fun{a:vt0p}
arrayptr_iforeach_funenv
  {v:view}
  {vt:viewtype}
  {n:int}
  {fe:eff} (
  pfv: !v
| A: !arrayptr (INV(a), n)
, asz: size_t n
, f: (!v | sizeLt n, &a, !vt) -<fun,fe> void
, env: !vt
) :<fe> void
// end of [arrayptr_iforeach_funenv]

fun{a:vt0p}
arrayptr_iforeach_fun
  {n:int}{fe:eff} (
  A: !arrayptr (INV(a), n), asz: size_t n, f: (sizeLt n, &a) -<fun,fe> void
) :<fe> void // end of [arrayptr_iforeach_fun]

#atscode_separator()

(*
fun{a:vt0p}
array_initize__fwork (i: size_t, x: &a >> a?): void
*)
fun{a:vt0p}
arrayptr_initize
  {l:addr}{n:int} (
  A: !arrayptr (a?, l, n) >> arrayptr (a, l, n), asz: size_t n
) : void // end of [arrayptr_initize]
macdef arrayptr_initialize = arrayptr_initize

#atscode_separator()

(*
fun{a:vt0p}
array_uninitize__fwork (i: size_t, x: &a >> a?): void
*)
fun{a:vt0p}
arrayptr_uninitize
  {l:addr}{n:int} (
  A: !arrayptr (a, l, n) >> arrayptr (a?, l, n), asz: size_t n
) : void // end of [arrayptr_uninitize]
macdef arrayptr_uninitialize = arrayptr_uninitize

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "arrayptr_atxt.txt")
%}\
