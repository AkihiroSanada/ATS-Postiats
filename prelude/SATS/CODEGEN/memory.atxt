%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"memory.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/memory.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

typedef bytes (n:int) = @[byte][n]
typedef b0ytes (n:int) = @[byte?][n]

#atscode_separator()

viewdef bytes_v (l:addr, n:int) = bytes (n) @ l
viewdef b0ytes_v (l:addr, n:int) = b0ytes (n) @ l

#atscode_separator()

praxi
b0ytes2bytes_v
  {l:addr}{n:int} (pf: b0ytes_v (l, n)): bytes_v (l, n)
// end of [b0ytes2bytes_v]

#atscode_separator()

fun malloc_gc
  {n:int}
(
  n: size_t (n)
) :<!wrt>
  [l:agz]
(
  b0ytes n @ l, mfree_gc_v (l) | ptr l
) = "mac\#%" // endfun

#atscode_separator()

fun mfree_gc
  {l:addr}{n:int}
(
  pfat: b0ytes n @ l, pfgc: mfree_gc_v (l) | ptr l
) :<!wrt> void = "mac\#%" // endfun

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "memory_atxt.txt")
%}\
