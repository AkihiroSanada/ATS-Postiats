%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"parrnull.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/parrnull.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

#atscode_decl_strcst("sortdef vtp = viewtype")

#atscode_separator()

(*
** HX: for null-pointer terminated arrays
*)

#atscode_decl_strcst("\
dataview
parrnull_v (
  a:viewt@ype+, addr(*l*), int(*n*)
) = // for arrays with a sentinel at the end
  | {l:addr}{n:int}
    parrnull_v_cons (a, l, n+1) of (a @ l, parrnull_v (a, l+sizeof(a), n))
  | {l:addr} parrnull_v_nil (a, l, 0) of (ptr null @ l)
// end of [parrnull_v]
")\

#atscode_separator()

#atscode_decl_strcst("\
prfun
lemma_parrnull_v_params{a:vtp}
  {l:addr}{n:int} (pf: !parrnull_v (INV(a), l, n)): [l > null;n >= 0] void
// end of [lemma_parrnull_v_params]
")\

#atscode_separator()

#atscode_decl_strcst("\
fun{
a:vtp
} parrnull_is_empty
  {l:addr}{n:int} (
  pf: !parrnull_v (INV(a), l, n) | p: ptr l
) :<> bool (n == 0) // end of [parrnull_is_empty]
")\

#atscode_decl_strcst("\
fun{
a:vtp
} parrnull_isnot_empty
  {l:addr}{n:int}
  (pf: !parrnull_v (INV(a), l, n) | p: ptr l):<> bool (n > 0)
// end of [parrnull_isnot_empty]
")\

#atscode_separator()

#atscode_decl_strcst("\
fun{
a:vtp
} parrnull_size
  {l:addr}{n:int}
  (pf: !parrnull_v (INV(a), l, n) | p: ptr l):<> size_t (n)
// end of [parrnull_size]
")\

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "parrnull_atxt.txt")
%}\
