%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"unsafe.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/unsafe.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()
//
castfn cast {to:t0p}{from:t0p} (x: from):<> to
castfn castvwtp_trans {to:vt0p}{from:vt0p} (x: from):<> to
//
// HX:
// [castvwtp1] is mostly used in a situation
// where a linear value is passed as a read-only value;
// for instance, casting [strptr] to [string] is often
// done for treating a linear string as a nonlinear one
// temporarily.
//
castfn castvwtp1 {to:t0p}{from:vt0p} (x: !INV(from)>>from):<> to
//
#atscode_separator()
//
castfn cast2ptr {a:type} (x: a):<> ptr
castfn cast2Ptr0 {a:type} (x: a):<> Ptr0
castfn cast2Ptr1 {a:type} (x: a):<> Ptr1
//
castfn cast2int {a:t0p} (x: a):<> int
castfn cast2uint {a:t0p} (x: a):<> uint
//
castfn cast2lint {a:t0p} (x: a):<> lint
castfn cast2ulint {a:t0p} (x: a):<> ulint
//
castfn cast2llint {a:t0p} (x: a):<> llint
castfn cast2ullint {a:t0p} (x: a):<> ullint
//
castfn cast2size {a:t0p} (x: a):<> size_t
castfn cast2ssize {a:t0p} (x: a):<> ssize_t
//
castfn cast2sint {a:t0p} (x: a):<> sint
castfn cast2usint {a:t0p} (x: a):<> usint
//
castfn cast2ssint {a:t0p} (x: a):<> ssint
castfn cast2ussint {a:t0p} (x: a):<> ussint
//
#atscode_separator()
//
// HX: this is a very popular one:
//
castfn
listcast {a:t0p}{n:int} (xs: !list_vt (INV(a), n)):<> list (a, n)
// end of [listcast]

#atscode_separator()
//
// HX: only if you know what you are doing ...
//
praxi ptr_vget
  {a:vt0p}{l:addr} (p: ptr l): vtakeout (void, a@l)
// end of [ptr_vget]

#atscode_separator()

praxi
vtakeout_void {v:view} (pf: !v): vtakeout (void, v)
castfn
vttakeout_void {vt:vt0p} (x: !vt):<> vttakeout (void, vt)

#atscode_separator()
//
// HX: only if you know what you are doing ...
//
fun{a:vt0p} ptr_get (p: Ptr1):<> a
fun{a:vt0p} ptr_set (p: Ptr1, x: INV(a)):<!wrt> void
fun{a:vt0p} ptr_exch (p: Ptr1, x: &INV(a) >> a):<!wrt> void
//
fun{a:vt0p} ptr0_get (p: ptr):<> a
fun{a:vt0p} ptr0_set (p: ptr, x: INV(a)):<!wrt> void
fun{a:vt0p} ptr0_exch (p: ptr, x: &INV(a) >> a):<!wrt> void
//
#atscode_separator()
//
// HX: only if you know what you are doing ...
//
castfn
ptr2cptr {a:vt0p}{l:addr} (p: ptr l):<> cptr (a, l)
//
fun{a:vt0p} cptr_get (p: cptr1 (INV(a))):<> a
fun{a:vt0p} cptr_set (p: cptr1 (INV(a)), x: a):<!wrt> void
fun{a:vt0p} cptr_exch (p: cptr1 (INV(a)), x: &a >> a):<!wrt> void
//
#atscode_separator()
//
// HX-2012-06:
// generic ops on numbers: +=, -=, *=, /=, %=
//
fun{a:t0p} ptr_addby (p: Ptr1, x: a):<!wrt> void
fun{a:t0p} ptr_subby (p: Ptr1, x: a):<!wrt> void
fun{a:t0p} ptr_mulby (p: Ptr1, x: a):<!wrt> void
fun{a:t0p} ptr_divby (p: Ptr1, x: a):<!wrt> void
fun{a:t0p} ptr_modby (p: Ptr1, x: a):<!wrt> void
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "unsafe_atxt.txt")
%}\
