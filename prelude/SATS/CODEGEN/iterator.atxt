%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"iterator.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/iterator.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype
sortdef vtp = viewtype
sortdef vt0p = viewt@ype

#atscode_separator()

absviewtype
iterator ( // HX: boxed
  knd: t@ype, x: viewt@ype+, f: int, r: int
) // end of [absviewtype]

prfun lemma_iterator_param
  {knd:t0p}{x:vt0p}{f,r:int}
  (itr: !iterator (knd, x, f, r)): [f>=0;r>=0] void
// end of [lemma_iterator_param]

#atscode_separator()

abst@ype
iter_flist_kind // for functional list itrs

fun{x:t0p}
iter_make_list
  (xs: List (x))
  : [r:nat] iterator (iter_flist_kind, x, 0, r)
// end of [iter_make_list]

fun iter_free_list
  {x:t0p}{f,r:int}
  (itr: iterator (iter_flist_kind, x, f, r)):<> void
// end of [iter_free_list]

#atscode_separator()

fun{
knd:t0p}{x:vt0p
} iter_is_atend {f,r:int}
  (itr: !iterator (knd, x, f, r)):<> bool (r==0)
// end of [iter_is_atend]

fun{
knd:t0p}{x:vt0p
} iter_isnot_atend {f,r:int}
  (itr: !iterator (knd, x, f, r)):<> bool (r > 0)
// end of [iter_isnot_atend]

#atscode_separator()

fun{
knd:t0p}{x:t0p
} iter_get
  {f,r:int | r > 0} (itr: !iterator (knd, x, f, r)):<> x
// end of [iter_get]
fun{
knd:t0p}{x:vt0p
} iter_getref
  {f,r:int | r > 0} (itr: !iterator (knd, x, f, r)):<> Ptr1
// end of [iter_getref]

#atscode_separator()

fun{
knd:t0p}{x:t0p
} iter_get_inc
  {f,r:int | r > 0} (
  itr: !iterator (knd, x, f, r) >> iterator (knd, x, f+1, r-1)
) :<> x // end of [iter_get_inc]

fun{
knd:t0p}{x:vt0p
} iter_getref_inc
  {f,r:int | r > 0} (
  itr: !iterator (knd, x, f, r) >> iterator (knd, x, f+1, r-1)
) :<> Ptr1 // end of [iter_getref_inc]

#atscode_separator()

fun{
knd:t0p}{x:t0p
} iter_get_dec
  {f,r:int | f > 0; r > 0} (
  itr: !iterator (knd, x, f, r) >> iterator (knd, x, f-1, r+1)
) :<> x // end of [iter_get_dec]

fun{
knd:t0p}{x:vt0p
} iter_getref_dec
  {f,r:int | f > 0; r > 0} (
  itr: !iterator (knd, x, f, r) >> iterator (knd, x, f-1, r+1)
) :<> Ptr1 // end of [iter_getref_dec]

#atscode_separator()

fun{
knd:t0p}{x:vt0p
} iter_inc {f,r:int | r > 0} (
  itr: !iterator (knd, x, f, r) >> iterator (knd, x, f+1, r-1)
) :<> void // end of [iter_inc]

fun{
knd:t0p}{x:vt0p
} iter_dec {f,r:int | f > 0} (
  itr: !iterator (knd, x, f, r) >> iterator (knd, x, f-1, r+1)
) :<> void // end of [iter_dec]

#atscode_separator()

fun{
knd:t0p}{x:vt0p
} iter_foreach_funenv
  {v:view}{vt:vtp}{f,r:int}{fe:eff} (
  pfv: !v
| itr: !iterator (knd, x, f, r) >> iterator (knd, x, f+r, 0)
, f: (!v | &x, !vt) -<fe> void, env: !vt
) :<fe> void // end of [fiter_foreach_funenv]

#atscode_separator()

fun{
knd:t0p}{x:vt0p
} iter_exists_funenv
  {v:view}{vt:vtp}{f,r:int}{fe:eff} (
  pfv: !v
| itr: !iterator (knd, x, f, r) >> iterator (knd, x, f1, r1)
, pred: (!v | &x, !vt) -<fe> bool, env: !vt
) :<fe> #[
  f1,r1:int | f1>=f; f+r==f1+r1
] bool (r1 > 0) // end of [fiter_exists_funenv]

#atscode_separator()

fun{
knd:t0p}{x:vt0p
} iter_fjmp // forward-jmp
  {f,r:int}
  {i:int | 0 <= i; i <= r} (
//
// HX: O(log(n))-time complexity is expected
//
  itr: !iterator (knd, x, f, r)
         >> iterator (knd, x, f+i, r-i), i: size_t (i)
) :<> void // end of [iter_fjmp]

fun{
knd:t0p}{x:vt0p
} iter_fgetref_at // forward-get
  {f,r:int}
  {i:int | 0 <= i; i < r} (
//
// HX: O(log(n))-time complexity is expected
//
  itr: !iterator (knd, x, f, r), i: size_t (i)
) :<> Ptr1 // end of [iter_fgetref_at]

#atscode_separator()

fun{
knd:t0p}{x:vt0p
} iter_fbjmp // forward/backward-jmp
  {f,r:int}
  {i:int | ~f <= i; i <= r} (
//
// HX: O(log(n))-time complexity is expected
//
  itr: !iterator (knd, x, f, r)
         >> iterator (knd, x, f+i, r-i), i: ssize_t (i)
) :<> void // end of [iter_fbjmp]

fun{
knd:t0p}{x:vt0p
} iter_fbgetref_at // forward/backward-get
  {f,r:int}
  {i:int | ~f <= i; i < r} (
//
// HX: O(log(n))-time complexity is expected
//
  itr: !iterator (knd, x, f, r), i: ssize_t (i)
) :<> Ptr1 // end of [iter_fbget_at]

#atscode_separator()

(*
** HX-2012-05:
** Note that [iter] should support at least log-time
** fjmp and fget in order to make binary search meaningful.
**
** pord (x) = cmp (x0, x), where [x0] is the key being searched
**
** The after-interator points to the left-most location
** where the value [x0] can be inserted without violating
** orderedness.
*)
fun{
knd:t0p}{x:vt0p
} iter_bsearch_funenv
  {env:vtp}
  {f,r:int}
  {ra:int | ra <= r} (
  itr: !iterator (knd, x, f, r)
          >> iterator (knd, x, f1, r1)
, pord: (&x, !env) -<fun> int, env: !env
, ra: size_t (ra) // range being searched
) :<> #[
  f1,r1:int | f1>=f;f+ra>=f1;f1+r1==f+r
] void // end of [iter_bsearch_funenv]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "iterator_atxt.txt")
%}\
