%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt_txt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()
\
#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/list.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

#atscode_decl_strcst("sortdef t0p = t@ype")

#atscode_separator()

#atscode_decl_strcst('\
typedef cmp
  (a: t@ype) = (a, a) -<fun> int
typedef cmp
  (a: t@ype, vt: viewtype) = (a, a, !vt) -<fun> int
// end of [typedef]
')\

#atscode_separator()

#atscode_decl_strcst('\
fun{
x:t0p // type for elements
} list_copy {n:int} (xs: list (x, n)):<> list_vt (x, n)
')\

#atscode_separator()

#atscode_decl_strcst('\
fun{x:t0p}
list_reverse {n:int} (xs: list (x, n)): list_vt (x, n)
')\

#atscode_decl_strcst('\
fun{
a:t0p // type for elements
} list_append1_vt {i,j:int}
  (xs: list_vt (a, i), ys: list (a, j)):<> list (a, i+j)
// end of [list_append1_vt]
')\

#atscode_decl_strcst('\
fun{
a:t0p // type for elements
} list_append2_vt {i,j:int}
  (xs: list (a, i), ys: list_vt (a, j)):<> list_vt (a, i+j)
// end of [list_append2_vt]
')\

#atscode_separator()

#atscode_decl_strcst('\
fun{
x:t0p // type for elements
} list_foreach_funenv
  {v:view}{env:viewtype}{fe:eff} (
  pfv: !v | xs: List (x), f: (!v | x, !env) -<fun,fe> void, env: !env
) :<fe> void // end of [list_foreach_funenv]
')\

#atscode_decl_strcst('\
fun{
x:t0p // type for elements
} list_iforeach_funenv
  {v:view}{env:viewtype}{n:nat}{fe:eff} (
  pfv: !v | xs: list (x, n), f: (!v | natLt(n), x, !env) -<fun,fe> void, env: !env
) :<fe> void // end of [list_iforeach_funenv]
')\

#atscode_separator()

#atscode_decl_strcst('\
fun{
x:t0p}{y:t0p
} list_map_funenv
  {v:view}{vt:viewtype}{n:int}{fe:eff} (
  pfv: !v | xs: list (x, n), f: (!v | x, !vt) -<fun,fe> y, env: !vt
) : list_vt (y, n) // end of [list_map_funenv]
')\

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_atxt.txt")
%}\
