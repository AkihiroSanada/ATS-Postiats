%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"tuple.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/tuple.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("December, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

fun fprint_tup$beg (out: FILEref): void
fun fprint_tup$end (out: FILEref): void
fun fprint_tup$sep (out: FILEref): void

#atscode_separator()

fun{
a1,a2:t@ype
} fprint_tup2 (out: FILEref, x: (a1, a2)): void
fun{
a1,a2:t@ype
} fprint_tup3 (out: FILEref, x: (a1, a2, a3)): void
fun{
a1,a2:t@ype
} fprint_tup4 (out: FILEref, x: (a1, a2, a3, a4)): void

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "tuple_atxt.txt")
%}\
