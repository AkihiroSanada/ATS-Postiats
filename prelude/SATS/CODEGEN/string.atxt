%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt_txt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"string.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()
\
#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/string.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()

#atscode_decl_strcst('\
fun lt_string_string (x1: string, x2: string): bool
fun lte_string_string (x1: string, x2: string): bool
overload < with lt_string_string
overload <= with lte_string_string
')\

#atscode_decl_strcst('\
fun gt_string_string (x1: string, x2: string): bool
and gte_string_string (x1: string, x2: string): bool
overload > with gt_string_string
overload >= with gte_string_string
')\

#atscode_decl_strcst('\
fun eq_string_string (x1: string, x2: string): bool
and neq_string_string (x1: string, x2: string): bool
overload = with eq_string_string
overload != with neq_string_string
')\

#atscode_decl_strcst('\
fun compare_string_string (x1: string, x2: string): Sgn
overload compare with compare_string_string
')\

#atscode_separator()

#atscode_decl_strcst('\
symintr string_length
fun string0_length (x: string): size_t
overload string_length with string0_length
fun string1_length {n:nat} (x: string n): size_t (n)
overload string_length with string1_length
')\

#atscode_separator()

(*
** HX: [stropt_none] is just the null pointer
*)

#atscode_decl_strcst('\
fun stropt_length
  {n:int} (x: stropt (n)): ssize_t (n)
// end of [stropt_length]
')\

#atscode_decl_strcst('\
fun stropt_is_none {n:int} (x: stropt n): bool (n < 0)
fun stropt_is_some {n:int} (x: stropt n): bool (n >= 0)
')\

#atscode_decl_strcst('\
fun stropt_none (): stropt (~1)
')\

#atscode_decl_strcst('\
castfn stropt_some {n:int} (x: SHARED(string n)): stropt (n)
castfn stropt_unsome {n:nat} (x: SHARED(stropt n)): string (n)
')\

#atscode_separator()

#atscode_decl_strcst('\
fun string0_append
  (x1: string, x2: string):<> strptr1
// end of [string0_append]
')\

#atscode_decl_strcst('\
fun string1_append
  {n1,n2:int} (x1: string n1, x2: string n2):<> strnptr (n1+n2)
// end of [string1_append]
')\

#atscode_separator()

#atscode_decl_strcst('\
fun string_concat (xs: List(string)): strptr1
')\

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "string_atxt.txt")
%}\
