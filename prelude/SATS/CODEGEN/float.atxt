%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"float.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
//
#include "prelude_SATS_atext.hats"
//
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/float.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()

fun{tk1,tk2:tk}
g0int2float (x: g0int (tk1)): g0float (tk2)

#atscode_separator()

fun{tk:tk}
g0float_neg (x: g0float (tk)): g0float (tk)
overload ~ with g0float_neg of 0

fun{tk:tk}
g0float_succ
  (x: g0float (tk)):<> g0float (tk)
overload succ with g0float_succ of 0
fun{tk:tk}
g0float_pred
  (x: g0float (tk)):<> g0float (tk)
overload pred with g0float_pred of 0

#atscode_separator()

typedef
g0float_aop_type (tk:tk) =
  (g0float (tk), g0float (tk)) -<fun0> g0float (tk)
// end of [g0float_aop_type]

#fun_g0float_aop_decl("add")
#fun_g0float_aop_decl("sub")
#fun_g0float_aop_decl("mul")
#fun_g0float_aop_decl("div")
#fun_g0float_aop_decl("mod")

#atscode_separator()

fun{tk:tk}
g0float_isltz (x: g0float (tk)):<> bool
overload isltz with g0float_isltz of 0
fun{tk:tk}
g0float_isltez (x: g0float (tk)):<> bool
overload isltez with g0float_isltez of 0
fun{tk:tk}
g0float_isgtz (x: g0float (tk)):<> bool
overload isgtz with g0float_isgtz of 0
fun{tk:tk}
g0float_isgtez (x: g0float (tk)):<> bool
overload isgtez with g0float_isgtez of 0
fun{tk:tk}
g0float_iseqz (x: g0float (tk)):<> bool
overload iseqz with g0float_iseqz of 0
fun{tk:tk}
g0float_isneqz (x: g0float (tk)):<> bool
overload isneqz with g0float_isneqz of 0

#atscode_separator()

typedef
g0float_cmp_type (tk:tk) =
  (g0float (tk), g0float (tk)) -<fun0> bool
// end of [g0float_cmp_type]

#fun_g0float_cmp_decl("lt")
#fun_g0float_cmp_decl("lte")
#fun_g0float_cmp_decl("gt")
#fun_g0float_cmp_decl("gte")
#fun_g0float_cmp_decl("eq")
#fun_g0float_cmp_decl("neq")
overload <> with g0float_neq of 0

typedef
g0float_compare_type
  (tk:tk) = (g0float (tk), g0float (tk)) -<> int
// end of [typedef]

fun{tk:tk}
g0float_compare : g0float_compare_type (tk)
overload compare with g0float_compare

#atscode_separator()

fun{tk:tk}
g0float_max : g0float_aop_type (tk)
overload max with g0float_max
fun{tk:tk}
g0float_min : g0float_aop_type (tk)
overload min with g0float_min

#atscode_separator()
//
stadef fltknd = float_kind
stadef dblknd = double_kind
stadef ldblknd = ldouble_kind
//
#atscode_separator()

#g0float_declist("fltknd", "float")

#atscode_separator()

#g0float_declist("dblknd", "double")

#atscode_separator()

#g0float_declist("ldblknd", "ldouble")

#atscode_separator()
//
#fprint_print_prerr_decl("float", "float")
//
#fprint_print_prerr_decl("double", "double")
//
#fprint_print_prerr_decl("ldouble", "ldouble")
//
#atscode_separator()

fun{tk:tk}
mul_g0float_int (x: g0float (tk), y: int): g0float (tk)
overload * with mul_g0float_int of 0
fun{tk:tk}
mul_int_g0float (x: int, y: g0float (tk)): g0float (tk)
overload * with mul_int_g0float of 0

fun{tk:tk}
div_g0float_int (x: g0float (tk), y: int): g0float (tk)
overload / with div_g0float_int of 0
fun{tk:tk}
div_int_g0float (x: int, y: g0float (tk)): g0float (tk)
overload / with div_int_g0float of 0

#atscode_separator()

fun g0float_add_float
  : g0float_aop_type (fltknd) = "mac\#%"
fun g0float_sub_float
  : g0float_aop_type (fltknd) = "mac\#%"
fun g0float_mul_float
  : g0float_aop_type (fltknd) = "mac\#%"
fun g0float_div_float
  : g0float_aop_type (fltknd) = "mac\#%"

fun g0float_add_double
  : g0float_aop_type (dblknd) = "mac\#%"
fun g0float_sub_double
  : g0float_aop_type (dblknd) = "mac\#%"
fun g0float_mul_double
  : g0float_aop_type (dblknd) = "mac\#%"
fun g0float_div_double
  : g0float_aop_type (dblknd) = "mac\#%"

fun g0float_add_ldouble
  : g0float_aop_type (ldblknd) = "mac\#%"
fun g0float_sub_ldouble
  : g0float_aop_type (ldblknd) = "mac\#%"
fun g0float_mul_ldouble
  : g0float_aop_type (ldblknd) = "mac\#%"
fun g0float_div_ldouble
  : g0float_aop_type (ldblknd) = "mac\#%"

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "float_atxt.txt")
%}\
