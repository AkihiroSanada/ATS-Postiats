%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"float.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/float.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()

%{
fun
fun_g0float_aop_decl (
  opr: string
) : atext = let
//
val fopr_d = (
  case+ opr of
  | "add" => "+" | "sub" => "-"
  | "mul" => "*" | "div" => "/" | "mod" => "mod"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
fun{
a:t@ype
} g0float_%s
  (x: g0float (a), y: g0float (a)):<> g0float (a)
overload %s with g0float_%s of 0\
", @(
 opr, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_gfloat_cmp0_decl]
%}\
#fun_g0float_aop_decl("add")
#fun_g0float_aop_decl("sub")
#fun_g0float_aop_decl("mul")
#fun_g0float_aop_decl("div")
#fun_g0float_aop_decl("mod")

#atscode_separator()

%{
fun
fun_g0float_cmp_decl (
  opr: string
) : atext = let
//
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
fun{
a:t@ype
} g0float_%s
  (x: g0float (a), y: g0float (a)):<> bool
overload %s with g0float_%s of 0\
", @(
 opr, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0float_cmp_decl]
%}\
\
#fun_g0float_cmp_decl("lt")
#fun_g0float_cmp_decl("lte")

#fun_g0float_cmp_decl("gt")
#fun_g0float_cmp_decl("gte")

#fun_g0float_cmp_decl("eq")
#fun_g0float_cmp_decl("neq")
overload <> with g0float_neq of 0

#atscode_decl_strcst('\
fun{a:t@ype}
g0float_compare
  (x: g0float (a), y: g0float (a)):<> int
overload compare with g0float_compare
')\

#atscode_separator()

#atscode_decl_strcst('\
fun{a:t@ype}
g0float_max
  (x: g0float (a), y: g0float (a)):<> g0float (a)
overload max with g0float_max
')\

#atscode_decl_strcst('\
fun{a:t@ype}
g0float_min
  (x: g0float (a), y: g0float (a)):<> g0float (a)
overload min with g0float_min
')\

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "float_atxt.txt")
%}\
