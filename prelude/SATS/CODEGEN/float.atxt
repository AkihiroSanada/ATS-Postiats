%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"float.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/float.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()

typedef
g0float_aop_type
  (tk:tk) = (g0float (tk), g0float (tk)) -<> g0float (tk)
// end of [typedef]

%{
fun
fun_g0float_aop_decl (
  opr: string
) : atext = let
//
val fopr_d = (
  case+ opr of
  | "add" => "+" | "sub" => "-"
  | "mul" => "*" | "div" => "/" | "mod" => "mod"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
fun{tk:tk}
g0float_%s : g0float_aop_type (tk)
overload %s with g0float_%s of 0\
", @(
 opr, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_gfloat_cmp0_decl]
%}\
#fun_g0float_aop_decl("add")
#fun_g0float_aop_decl("sub")
#fun_g0float_aop_decl("mul")
#fun_g0float_aop_decl("div")
#fun_g0float_aop_decl("mod")

#atscode_separator()

typedef
g0float_cmp_type
  (tk:tk) = (g0float (tk), g0float (tk)) -<> bool
// end of [typedef]

%{
fun
fun_g0float_cmp_decl (
  opr: string
) : atext = let
//
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
fun{tk:tk}
g0float_%s : g0float_cmp_type (tk)
overload %s with g0float_%s of 0\
", @(
 opr, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0float_cmp_decl]
%}\
\
#fun_g0float_cmp_decl("lt")
#fun_g0float_cmp_decl("lte")

#fun_g0float_cmp_decl("gt")
#fun_g0float_cmp_decl("gte")

#fun_g0float_cmp_decl("eq")
#fun_g0float_cmp_decl("neq")
overload <> with g0float_neq of 0

typedef
g0float_compare_type
  (tk:tk) = (g0float (tk), g0float (tk)) -<> int
// end of [typedef]

fun{tk:tk}
g0float_compare : g0float_compare_type (tk)
overload compare with g0float_compare

#atscode_separator()

fun{tk:tk}
g0float_max : g0float_aop_type (tk)
overload max with g0float_max
fun{tk:tk}
g0float_min : g0float_aop_type (tk)
overload min with g0float_min

#atscode_separator()
//
stadef fltknd = float_kind
stadef dblknd = double_kind
stadef ldblknd = ldouble_kind
//
#atscode_separator()

%{
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun g0float_declist (
  kname: string, tname: string
) : atext = let
//
fun f (
  opknd: string, opnam: string
) :<cloref1> atext = let
//
val x = sprintf (
"fun g0float_%s_%s: g0float_%s_type(%s)\n", @(opnam, tname, opknd, kname)
) (* end of [val] *)
//
in
  atext_strptr (x)
end // end of [f]
//
var res: atextlst = list_nil
//
val () = res := list_cons (f ("aop", "add"), res)
val () = res := list_cons (f ("aop", "sub"), res)
val () = res := list_cons (f ("aop", "mul"), res)
val () = res := list_cons (f ("aop", "div"), res)
val () = res := list_cons (f ("aop", "mod"), res)
val () = res := list_cons (atext_newline, res)
val () = res := list_cons (f ("cmp", "lt"), res)
val () = res := list_cons (f ("cmp", "lte"), res)
val () = res := list_cons (f ("cmp", "gt"), res)
val () = res := list_cons (f ("cmp", "gte"), res)
val () = res := list_cons (f ("cmp", "eq"), res)
val () = res := list_cons (f ("cmp", "neq"), res)
val () = res := list_cons (f ("compare", "compare"), res)
val () = res := list_cons (atext_newline, res)
val () = res := list_cons (f ("aop", "max"), res)
val () = res := list_cons (f ("aop", "min"), res)
val res = list_reverse (res)
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0float_declist]
%}

#g0float_declist("fltknd", "float")
fun fprint_float (out: FILEref, x: float): void

#atscode_separator()

#g0float_declist("dblknd", "double")
fun fprint_double (out: FILEref, x: double): void

#atscode_separator()

#g0float_declist("ldblknd", "ldouble")
fun fprint_ldouble (out: FILEref, x: ldouble): void

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "float_atxt.txt")
%}\
