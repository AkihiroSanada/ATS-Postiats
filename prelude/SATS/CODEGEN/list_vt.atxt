%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list_vt.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/list_vt.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

prfun
lemma_list_vt_param
  {x:vt0p}{n:int} (xs: !list_vt (INV(x), n)): [n >= 0] void
// end of [lemma_list_vt_param]

#atscode_separator()

\#define list_vt_sing(x)
  list_vt_cons(x, list_vt_nil())
\#define list_vt_pair(x1, x2)
  list_vt_cons(x1, list_vt_cons (x2, list_vt_nil()))

#atscode_separator()

fun{x:vt0p}
list_vt_uncons {n:pos}
  (xs: &list_vt (INV(x), n) >> list_vt (x, n-1)):<!wrt> x
// end of [list_vt_uncons]

#atscode_separator()

fun{}
fprint_list_vt$sep (out: FILEref): void
fun{x:vt0p}
fprint_list_vt
  (out: FILEref, xs: !List_vt (INV(x))): void
// end of [fprint_list_vt]

fun{x:vt0p}
fprint_list_vt_sep (
  out: FILEref, xs: !List_vt (INV(x)), sep: NSH(string)
) : void // end of [fprint_list_vt_sep]

#atscode_separator()

fun{x:vt0p}
list_vt_is_nil
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n==0)
// end of [list_vt_is_nil]

fun{x:vt0p}
list_vt_is_cons
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n > 0)
// end of [list_vt_is_cons]

fun{x:vt0p}
list_vt_is_sing
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n==1)
// end of [list_vt_is_sing]

fun{x:vt0p}
list_vt_is_pair
  {n:int} (xs: !list_vt (INV(x), n)):<> bool (n==2)
// end of [list_vt_is_pair]

#atscode_separator()

fun{x:vt0p}
list_vt_length {n:int} (xs: !list_vt (INV(x), n)):<> int n
// end of [list_vt_length]

#atscode_separator()

fun{x:t0p}
list_vt_copy {n:int} (xs: !list_vt (INV(x), n)):<!wrt> list_vt (x, n)

fun{x:vt0p}
list_vt_copylin$copy (x: &x): x
fun{x:vt0p}
list_vt_copylin {n:int} (xs: !list_vt (INV(x), n)): list_vt (x, n)

#atscode_separator()

fun{x:vt0p}
list_vt_getref_at
  {n:int}{i:nat | i <= n}
  (xs: &list_vt (INV(x), n), i: int i):<> cPtr1 (list_vt (x, n-i))
// end of [list_vt_getref_at]

#atscode_separator()

fun{x:t0p}
list_vt_get_at {n:int}
  (xs: !list_vt (INV(x), n), i: natLt n):<> x
// end of [list_vt_get_at]

fun{x:t0p}
list_vt_set_at {n:int}
  (xs: !list_vt (INV(x), n), i: natLt n, x: x):<!wrt> void
// end of [list_vt_set_at]

fun{x:vt0p}
list_vt_exch_at {n:int}
  (xs: !list_vt (INV(x), n), i: natLt n, x: &x>>x):<!wrt> void
// end of [list_vt_exch_at]

#atscode_separator()

fun{x:vt0p}
list_vt_insert_at {n:int} (
  xs: &list_vt (INV(x), n) >> list_vt (x, n+1), i: natLte n, x: x
) :<!wrt> void // end of [list_vt_insert_at]

fun{x:vt0p}
list_vt_remove_at {n:int}
  (xs: &list_vt (INV(x), n) >> list_vt (x, n-1), i: natLt n):<!wrt> x
// end of [list_vt_remove_at]

#atscode_separator()

fun{x:t0p}
list_vt_free (xs: List_vt (INV(x))):<!wrt> void

fun{x:vt0p}
list_vt_freelin$clear
  (x: &x >> x?):<!wrt> void
fun{x:t0p}
list_vt_freelin (xs: List_vt (INV(x))):<!wrt> void

#atscode_separator()

fun{x:vt0p}
list_vt_uninitize$clear (x: &x>>x?):<!wrt> void
fun{
x:vt0p
} list_vt_uninitize {n:int} (
  xs: !list_vt (INV(x), n) >> list_vt (x?, n)
) :<!wrt> void // end of [list_vt_uninitize]
fun{
x:vt0p
} list_vt_uninitize_fun {n:int}{fe:eff} (
  xs: !list_vt (INV(x), n) >> list_vt (x?, n), f: (&x>>x?) -<fe> void
) :<fe> void // end of [list_vt_uninitize_fun]

#atscode_separator()

fun{
a:vt0p
} list_vt_append
  {n1,n2:int} (
  xs1: list_vt (INV(a), n1), xs2: list_vt (a, n2)
) :<!wrt> list_vt (a, n1+n2) // endfun

#atscode_separator()

fun{
x:vt0p
} list_vt_extend
  {n:int} (xs1: list_vt (INV(x), n), x2: x):<!wrt> list_vt (x, n+1)
// end of [list_vt_extend]

macdef list_vt_snoc = list_vt_extend

#atscode_separator()

fun{
x:vt0p
} list_vt_reverse
  {n:int} (
  xs: list_vt (INV(x), n)
) :<!wrt> list_vt (x, n) // endfun

fun{a:vt0p}
list_vt_reverse_append
  {m,n:int} (
  xs: list_vt (INV(a), m), ys: list_vt (a, n)
) :<!wrt> list_vt (a, m+n) // endfun

#atscode_separator()

fun{x:vt0p}
list_vt_concat
  (xss: List_vt (List_vt (INV(x)))):<!wrt> List0_vt (x)
// end of [list_vt_concat]

#atscode_separator()

fun{x:vt0p}
list_vt_split$pred (x: &x): bool
fun{x:vt0p}
list_vt_split {n:int} (
  xs: &list_vt (INV(x), n) >> list_vt (x, n1)
) : \#[n1:nat|n1 <= n] list_vt (x, n-n1)

#atscode_separator()

fun{
x:vt0p}{env:vt0p
} list_vt_foreach$cont (x: &x, env: &env): bool
fun{
x:vt0p}{env:vt0p
} list_vt_foreach$fwork (x: &x, env: &(env) >> _): void
fun{
x:vt0p
} list_vt_foreach (xs: !List_vt (INV(x))): void
fun{
x:vt0p}{env:vt0p
} list_vt_foreach_env (xs: !List_vt (INV(x)), env: &(env) >> _): void

fun{
x:vt0p
} list_vt_foreach_fun
  {fe:eff} (
  xs: !List_vt (INV(x)), f: (&x) -<fe> void
) :<fe> void // end of [list_vt_foreach_fun]

fun{
x:vt0p
} list_vt_foreach_funenv
  {v:view}{vt:viewtype}{fe:eff} (
  pfv: !v
| xs: !List_vt (INV(x)), f: (!v | &x, !vt) -<fe> void, env: !vt
) :<fe> void // end of [list_vt_foreach_funenv]

#atscode_separator()

fun{
x:vt0p}{env:vt0p
} list_vt_iforeach$cont
  (i: int, x: &x, env: &env): bool
fun{
x:vt0p}{env:vt0p
} list_vt_iforeach$fwork
  (i: int, x: &x, env: &(env) >> _): void
fun{
x:vt0p
} list_vt_iforeach
  {n:int} (xs: !list_vt (INV(x), n)): natLte(n)
fun{
x:vt0p}{env:vt0p
} list_vt_iforeach_env
  {n:int} (xs: !list_vt (INV(x), n), env: &(env) >> _): natLte(n)
// end of [list_vt_iforeach_env]

#atscode_separator()

fun{x:t0p}
list_vt_filter$pred (x: &x):<> bool
fun{x:t0p}
list_vt_filter
  {n:int} (x: list_vt (INV(x), n)):<!wrt> listLte_vt (x, n)
// end of [list_vt_filter]

fun{x:vt0p}
list_vt_filterlin$pred (x: &x):<> bool
fun{x:vt0p}
list_vt_filterlin$clear (x: &x>>x?):<!wrt> void
fun{x:vt0p}
list_vt_filterlin
  {n:int} (x: list_vt (INV(x), n)):<!wrt> listLte_vt (x, n)
// end of [list_vt_filterlin]

#atscode_separator()

fun{
x:vt0p
} list_vt_app$fwork (x: &x): void
fun{x:vt0p} list_vt_app (xs: !List_vt (INV(x))): void

fun{
x:vt0p
} list_vt_appfree$fwork (x: &x >> x?): void
fun{x:vt0p} list_vt_appfree (xs: List_vt (INV(x))): void

#atscode_separator()

fun{
x:vt0p}{y:vt0p
} list_vt_map$fwork (x: &x): y
fun{
x:vt0p}{y:vt0p
} list_vt_map {n:int} (xs: !list_vt (INV(x), n)): list_vt (y, n)

fun{
x:vt0p}{y:vt0p
} list_vt_mapfree$fwork (x: &x >> x?): y
fun{
x:vt0p}{y:vt0p
} list_vt_mapfree {n:int} (xs: list_vt (INV(x), n)): list_vt (y, n)

#atscode_separator()

fun{
a:vt0p
} list_vt_mergesort$cmp (x1: &a, x2: &a):<> int

fun{
a:vt0p
} list_vt_mergesort
  {n:int} (xs: list_vt (INV(a), n)):<!wrt> list_vt (a, n)
// end of [list_vt_mergesort]

fun{
a:vt0p
} list_vt_mergesort_fun
  {n:int} (
  xs: list_vt (INV(a), n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_mergesort_fun]

#atscode_separator()

fun{
a:vt0p
} list_vt_quicksort$cmp (x1: &a, x2: &a):<> int

fun{
a:vt0p
} list_vt_quicksort
  {n:int} (xs: list_vt (INV(a), n)):<!wrt> list_vt (a, n)
// end of [list_vt_quicksort]

fun{
a:vt0p
} list_vt_quicksort_fun
  {n:int} (
  xs: list_vt (INV(a), n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_quicksort_fun]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_vt_atxt.txt")
%}\
