%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list_vt.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/list_vt.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

prfun
lemma_list_vt_param
  {x:t0p}{n:int} (xs: !list_vt (x, n)): [n >= 0] void
// end of [lemma_list_vt_param]

#atscode_separator()

fun{} list_vt_is_nil
  {a:vt0p} {n:int} (xs: !list_vt (a, n)):<> bool (n==0)
fun{} list_vt_is_cons
  {a:vt0p} {n:int} (xs: !list_vt (a, n)):<> bool (n > 0)

#atscode_separator()

fun{
a:vt0p
} list_vt_length
  {n:int} (xs: !list_vt (a, n)):<> int n
// end of [list_vt_length]

#atscode_separator()

fun{
a:vt0p
} list_vt_append
  {n1,n2:int} (
  xs1: list_vt (a, n1), xs2: list_vt (a, n2)
) :<!wrt> list_vt (a, n1+n2) // endfun

#atscode_separator()

fun{
x:vt0p
} list_vt_reverse
  {n:int} (
  xs: list_vt (x, n)
) :<!wrt> list_vt (x, n) // endfun

fun{a:vt0p}
list_vt_reverse_append
  {m,n:int} (
  xs: list_vt (a, m), ys: list_vt (a, n)
) :<!wrt> list_vt (a, m+n) // endfun

#atscode_separator()

fun{
a:vt0p
} list_vt_foreach_funenv
  {v:view}{vt:viewtype}{n:int}{fe:eff} (
  pfv: !v
| xs: !list_vt (a, n), f: (!v | &a, !vt) -<fe> void, env: !vt
) :<fe> void // end of [list_vt_foreach_funenv]

#atscode_separator()

fun{a:vt0p}
list_vt_make_array {n:int} (
  A: &(@[a][n]) >> @[a?!][n], n: size_t n
) :<!wrt> list_vt (a, n) // endfun

#atscode_separator()

fun{
a:vt0p
} list_vt_mergesort {n:int} (
  xs: list_vt (a, n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_mergesort]
fun{
a:vt0p
} list_vt_mergesort_env
  {vt:viewtype}{n:int} (
  xs: list_vt (a, n), cmp: cmpref (a, vt), env: !vt
) :<!wrt> list_vt (a, n) // end of [list_vt_mergesort_env]

fun{
a:vt0p
} list_vt_quicksort {n:int} (
  xs: list_vt (a, n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_quicksort]
fun{
a:vt0p
} list_vt_quicksort_env // HX: via array-based quicksort
  {vt:viewtype}{n:int} (
  xs: list_vt (a, n), cmp: cmpref (a, vt), env: !vt
) :<!wrt> list_vt (a, n) // end of [list_vt_quicksort_env]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_vt_atxt.txt")
%}\
