%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"list_vt.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/list_vt.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

prfun
lemma_list_vt_param
  {x:t0p}{n:int} (xs: !list_vt (x, n)): [n >= 0] void
// end of [lemma_list_vt_param]

#atscode_separator()

\#define list_vt_sing(x)
  list_vt_cons(x, list_vt_nil())
\#define list_vt_pair(x1, x2)
  list_vt_cons(x1, list_vt_cons (x2, list_vt_nil()))

#atscode_separator()

fun{} list_vt_is_nil
  {a:vt0p} {n:int} (xs: !list_vt (a, n)):<> bool (n==0)
fun{} list_vt_is_cons
  {a:vt0p} {n:int} (xs: !list_vt (a, n)):<> bool (n > 0)
fun{} list_vt_is_sing
  {a:vt0p} {n:int} (xs: !list_vt (a, n)):<> bool (n==1)
fun{} list_vt_is_pair
  {a:vt0p} {n:int} (xs: !list_vt (a, n)):<> bool (n==2)

#atscode_separator()

fun{a:vt0p}
list_vt_length {n:int} (xs: !list_vt (INV(a), n)):<> int n
// end of [list_vt_length]

#atscode_separator()

fun{a:vt0p}
list_vt_make_array
  {n:int} (
  A: &(@[INV(a)][n]) >> @[a?!][n], n: size_t n
) :<!wrt> list_vt (a, n) // endfun

#atscode_separator()

fun{a:t0p}
list_vt_free (xs: List_vt (a)):<!wrt> void

fun{
a:vt0p
} list_vt_free_fun {fe:eff} (
  xs: List_vt (INV(a)), f: (&a>>a?) -<fe> void
) :<!wrt,fe> void // end of [list_vt_free_fun]

#atscode_separator()

fun{a:vt0p}
list_vt_clear__fwork (x: &a>>a?): void
fun{
a:vt0p
} list_vt_clear {n:int} (
  xs: !list_vt (INV(a), n) >> list_vt (a?, n)
) : void // end of [list_vt_clear]
fun{
a:vt0p
} list_vt_cfree (xs: List_vt (a)): void // clear+free

fun{
a:vt0p
} list_vt_clear_fun {n:int}{fe:eff} (
  xs: !list_vt (INV(a), n) >> list_vt (a?, n), f: (&a>>a?) -<fe> void
) :<fe> void // end of [list_vt_clear_fun]

#atscode_separator()

fun{
a:vt0p
} list_vt_append
  {n1,n2:int} (
  xs1: list_vt (INV(a), n1), xs2: list_vt (a, n2)
) :<!wrt> list_vt (a, n1+n2) // endfun

#atscode_separator()

fun{
a:vt0p
} list_vt_extend
  {n:int} (xs1: list_vt (INV(a), n), x2: a):<!wrt> list_vt (a, n+1)
// end of [list_vt_extend]

#atscode_separator()

fun{
a:vt0p
} list_vt_reverse
  {n:int} (
  xs: list_vt (INV(a), n)
) :<!wrt> list_vt (a, n) // endfun

fun{a:vt0p}
list_vt_reverse_append
  {m,n:int} (
  xs: list_vt (INV(a), m), ys: list_vt (a, n)
) :<!wrt> list_vt (a, m+n) // endfun

#atscode_separator()

fun{a:vt0p}
list_vt_concat
  (xss: List_vt (List_vt (INV(a)))):<!wrt> List_vt (a)
// end of [list_vt_concat]

#atscode_separator()

fun{a:vt0p}
list_vt_split__pred (x: &a): bool
fun{a:vt0p}
list_vt_split {n:int} (
  xs: &list_vt (a, n) >> list_vt (a, n1)
) : \#[n1:nat|n1 <= n] list_vt (a, n-n1)

#atscode_separator()

fun{a:vt0p}
list_vt_foreach__fwork (x: &a): void
fun{a:vt0p}
list_vt_foreach {n:int} (xs: !list_vt (a, n)): void

fun{
a:vt0p
} list_vt_foreach_funenv
  {v:view}{vt:viewtype}{n:int}{fe:eff} (
  pfv: !v
| xs: !list_vt (INV(a), n), f: (!v | &a, !vt) -<fe> void, env: !vt
) :<fe> void // end of [list_vt_foreach_funenv]

#atscode_separator()

fun{a:vt0p}
list_vt_iforeach__fwork (i: int, x: &a): void
fun{a:vt0p}
list_vt_iforeach {n:int} (xs: !list_vt (a, n)): void

#atscode_separator()

fun{a:vt0p}
list_vt_filter__pred
  (x: &a >> opt(a, b)): #[b:bool] bool(b)
fun{a:vt0p}
list_vt_filter {n:int} (x: list_vt (a, n)): listLte_vt (a, n)

#atscode_separator()

fun{
a:vt0p}{b:vt0p
} list_vt_map__fwork (x: &a): b
fun{
a:vt0p}{b:vt0p
} list_vt_map {n:int} (xs: !list_vt (a, n)): list_vt (b, n)

fun{
a:vt0p}{b:vt0p
} list_vt_mapfree__fwork (x: &a >> a?): b
fun{
a:vt0p}{b:vt0p
} list_vt_mapfree {n:int} (xs: list_vt (a, n)): list_vt (b, n)

#atscode_separator()

fun{
a:vt0p
} list_vt_mergesort__cmp (x1: &a, x2: &a):<> int

fun{
a:vt0p
} list_vt_mergesort
  {n:int} (xs: list_vt (INV(a), n)):<!wrt> list_vt (a, n)
// end of [list_vt_mergesort]

fun{
a:vt0p
} list_vt_mergesort_fun
  {n:int} (
  xs: list_vt (INV(a), n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_mergesort_fun]

#atscode_separator()

fun{
a:vt0p
} list_vt_quicksort__cmp (x1: &a, x2: &a):<> int

fun{
a:vt0p
} list_vt_quicksort
  {n:int} (xs: list_vt (INV(a), n)):<!wrt> list_vt (a, n)
// end of [list_vt_quicksort]

fun{
a:vt0p
} list_vt_quicksort_fun
  {n:int} (
  xs: list_vt (INV(a), n), cmp: cmpref (a)
) :<!wrt> list_vt (a, n) // end of [list_vt_quicksort_fun]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "list_vt_atxt.txt")
%}\
