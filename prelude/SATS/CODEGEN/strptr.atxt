%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"strptr.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/strptr.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

(*
** HX-2012:
** a Strptr0 is either the null-pointer or Strptr1
** a Strptr1 is a null-terminated arrayptr of characters
*)

#atscode_separator()

praxi
lemma_strptr_param
  {l:addr} (x: !strptr l): [l>=null] void
// end of [lemma_strptr_param]

praxi
lemma_strnptr_param
  {l:addr}{n:int}
  (x: !strnptr (l, n)): [(l>null&&n>=0) || (l==null&&n==(~1))] void
// end of [lemma_strnptr_param]

#atscode_separator()

castfn strptr2ptr {l:addr} (x: !strptr l):<> ptr l
castfn strnptr2ptr {l:addr}{n:int} (x: !strnptr (l, n)):<> ptr l

#atscode_separator()

castfn
strptr_of_strnptr
  {l:addr}{n:int} (x: strnptr (l, n)):<> strptr l
// end of [strptr_of_strnptr]

castfn
strnptr_of_strptr
  {l:addr} (x: strptr l):<> [n:int] strnptr (l, n)
// end of [strnptr_of_strptr]

castfn
stropt_of_strptr (x: Strptr0):<> Stropt
castfn
stropt_of_strnptr
  {l:addr}{n:int} (x: strnptr (l, n)):<> stropt (n)
// end of [stropt_of_strnptr]

castfn
string_of_strptr (x: Strptr1):<> String
castfn
string_of_strnptr
  {l:addr}{n:nat} (x: strnptr (l, n)):<> string (n)
// end of [string_of_strnptr]

#atscode_separator()

fun{}
strptr_null ():<> strptr (null)
fun{}
strptr_free_null
   {l:addr | l <= null} (x: strptr (l)):<> void
// end of [strptr_free_null]

fun{}
strptr_is_null {l:addr} (x: !strptr l):<> bool (l==null)
fun{}
strptr_isnot_null {l:addr} (x: !strptr l):<> bool (l > null)

#atscode_separator()

fun{}
strnptr_get_at {n:int}
  (str: !strnptr (n), i: sizeLt n):<> charNZ
overload [] with strnptr_get_at

fun{}
strnptr_set_at {n:int}
  (str: !strnptr (n), i: sizeLt n, c: charNZ):<> void
overload [] with strnptr_set_at

#atscode_separator()

%{
fun
fun_strptr_cmp_decl (
  opr: string
) : atext = let
//
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
fun %s_strptr_strptr
  (x1: !Strptr0, x2: !Strptr0):<> bool = \"mac#atspre_%s_strptr_strptr\"
overload %s with %s_strptr_strptr\
", @(
 opr, opr, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_strptr_cmp_decl]
%}\
\
#fun_strptr_cmp_decl("lt")
#fun_strptr_cmp_decl("lte")

#fun_strptr_cmp_decl("gt")
#fun_strptr_cmp_decl("gte")

#fun_strptr_cmp_decl("eq")
#fun_strptr_cmp_decl("neq")
overload <> with neq_strptr_strptr

fun compare_strptr_strptr
  (x1: !Strptr0, x2: !Strptr0):<> Sgn = "mac\#atspre_compare_strptr_strptr"
overload compare with compare_strptr_strptr

#atscode_separator()

fun fprint_strptr (out: FILEref, x: !Strptr0): void

#atscode_separator()

fun strptr_free (x: Strptr0):<!wrt> void

#atscode_separator()

fun strptr_length (x: !Strptr0): ssize_t
fun strnptr_length {n:int} (x: !strnptr n): ssize_t (n)

#atscode_separator()

fun strptr_append (
  x1: !Strptr0, x2: !Strptr0
) :<> Strptr0 = "atspre_strptr_append"

fun strnptr_append
  {n1,n2:nat} (
  x1: !strnptr n1, x2: !strnptr n2
) :<> strnptr (n1+n2) = "atspre_strnptr_append"

#atscode_separator()

fun strptrlst_concat (xs: List_vt (Strptr0)):<!wrt> Strptr0

#atscode_separator()

fun{env:vt0p}
strnptr_foreach__cont (c: &charNZ, env: &env): bool
fun{env:vt0p}
strnptr_foreach__fwork (c: &charNZ>>charNZ, env: &env): void
fun{}
strnptr_foreach {n:nat} (str: !strnptr n): sizeLte(n)
fun{env:vt0p}
strnptr_foreach_env {n:nat}
  (str: !strnptr n, env: &INV(env) >> env): sizeLte(n)
// end of [strnptr_foreach_env]

#atscode_separator()

fun{env:vt0p}
strnptr_rforeach__cont (c: &charNZ, env: &env): bool
fun{env:vt0p}
strnptr_rforeach__fwork (c: &charNZ>>charNZ, env: &env): void
fun{}
strnptr_rforeach {n:nat} (str: !strnptr n): sizeLte(n)
fun{env:vt0p}
strnptr_rforeach_env {n:nat}
  (str: !strnptr n, env: &INV(env) >> env): sizeLte(n)
// end of [strnptr_rforeach_env]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "strptr_atxt.txt")
%}\
