%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"extern.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/extern.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("March, 2012")

#atscode_separator()

#atscode_decl_strcst('\
sortdef vt0p = viewt@ype
')\

#atscode_separator()

abstype
cptr_viewt0ype_addr_type
  (a:viewt@ype+, addr) // HX: simulating C pointers
stadef cptr = cptr_viewt0ype_addr_type
stadef cptr0 (a:viewt@ype) = [l:addr] cptr (a, l)
stadef cptr1 (a:viewt@ype) = [l:addr | l > null] cptr (a, l)

castfn
cptr2ptr {a:vt0p}{l:addr} (p: cptr (a, l)):<> ptr l
// end of [castfn]

typedef voidptr (l:addr) = cptr (void, l)
typedef voidptr0 = [l:addr] voidptr (l)
typedef voidptr1 = [l:addr | l > null] voidptr (l)
typedef charptr (l:addr) = cptr (char, l)
typedef charptr0 = [l:addr] charptr (l)
typedef charptr1 = [l:addr | l > null] charptr (l)
typedef constcharptr (l:addr) = charptr (l)
typedef constcharptr0 = charptr0 and constcharptr1 = charptr1

#atscode_separator()
#atscode_decl_strcst('\
//
// HX: note that (vt1 \minus v2) roughly means that a ticket of
// [v2] is taken from [vt1]; the ticket must be returned before
// [vt1] is consumed. However, the ticket should not be issued
// repeatedly for otherwise safety may be potentially compromised.
//
absview
minus_viewt0ype_view
  (vt1: vt0p, v2: view) = vt1
stadef minus = minus_viewt0ype_view
praxi minus_addback
  {vt1:vt0p}{v2:view} (pf1: minus (vt1, v2), pf2: v2 | x: !vt1): void
// end of [minus_addback]
')\

viewtypedef
vtget0 (vt1:vt0p, vt2: vt0p) = (minus (vt1, vt2) | vt2)

#atscode_separator()

#atscode_decl_strcst('\
castfn
argv_takeout_strarr
  {n:int} (
  argv: !argv (n)
) :<> [l:addr] (
  array_v (string, l, n), minus (argv n, array_v (string, l, n)) | ptr l
) // end of [argv_takeout_strarr]
')\

#atscode_decl_strcst('\
castfn
argv_takeout_parrnull
  {n:int} (
  argv: !argv (n)
) :<> [l:addr] (
  parrnull_v (string, l, n), minus (argv n, parrnull_v (string, l, n)) | ptr l
) // end of [argv_takeout_parrnull]
')\

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "extern_atxt.txt")
%}\
