%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"array.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/array.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()

#atscode_decl_strcst("\
sortdef t0p = t@ype and vt0p = viewt@ype
")\

#atscode_separator()

(*
//
// HX: [array_v] can also be defined as follows:
//
dataview
array_v (
  a:viewt@ype+, addr, int
) =
  | {l:addr}{n:int}
    array_v_cons (a, l, n+1) of (a @ l, array_v (a, l+sizeof a, n))
  | {l:addr} array_v_nil (a, l, 0)
// end of [array_v]
*)

#atscode_separator()

#atscode_decl_strcst("\
prfun
lemma_array_v_param{a:vt0p}
  {l:addr}{n:int} (pf: !array_v (INV(a), l, n)): [n >= 0] void
// end of [lemma_array_v_param]
")\

#atscode_separator()

#atscode_decl_strcst("\
praxi array_v_nil :
  {a:vt0p}{l:addr} () -<prf> array_v (a, l, 0)
praxi array_v_unnil :
  {a:vt0p}{l:addr} array_v (a, l, 0) -<prf> void
")\

#atscode_decl_strcst("\
praxi array_v_cons :
  {a:vt0p}{l:addr}{n:int}
  (a @ l, array_v (INV(a), l+sizeof(a), n)) -<prf> array_v (a, l, n+1)
praxi array_v_uncons :
  {a:vt0p}{l:addr}{n:int | n > 0}
  array_v (INV(a), l, n) -<prf> (a @ l, array_v (a, l+sizeof(a), n-1))
")\

#atscode_separator()

#atscode_decl_strcst("\
prfun array_v_sing
  {a:vt0p}{l:addr} (pf: INV(a) @ l): array_v (a, l, 1)
prfun array_v_unsing
  {a:vt0p}{l:addr} (pf: array_v (INV(a), l, 1)): a @ l
")\

#atscode_separator()

#atscode_decl_strcst("\
dataview
arrayopt_v (
  a:viewt@ype+, addr, int, bool
) = // HX: for optional array view
  | {l:addr}{n:int}
    arrayopt_v_some (a, l, n, true) of array_v (a, l, n)
  | {l:addr}{n:int}
    arrayopt_v_none (a, l, n, false) of array_v (a?, l, n)
// end of [arrayopt_v]
")\

#atscode_separator()

#atscode_decl_strcst("\
fun{a:t0p}
array_get_at {n:int} (A: &(@[INV(a)][n]), i: sizeLt n):<> a
fun{a:t0p}
array_set_at {n:int} (A: &(@[INV(a)][n]), i: sizeLt n, x: a): void
overload [] with array_get_at
overload [] with array_set_at
")\

#atscode_separator()

#atscode_decl_strcst("\
fun{a:vt0p}
array_exch_at
  {n:int} (A: &(@[a][n]), i: sizeLt n, x: &a >> a): void
// end of [array_exch_at]
")\

#atscode_separator()

fun
array_foreach_funenv_tsz
  {a:vt0p}
  {v:view}
  {vt:viewtype}
  {n:int}
  {fe:eff} (
  pfv: !v
| A: &(@[a][n])
, f: (!v | &a, !vt) -<fun,fe> void
, env: !vt
, asz: size_t n
, tsz: sizeof_t a
) :<fe> void
  = "atspre_array_foreach_funenv_tsz"
// end of [array_foreach_funenv_tsz]

fun{a:vt0p}
array_foreach_funenv
  {v:view}
  {vt:viewtype}
  {n:int}
  {fe:eff} (
  pfv: !v
| A: &(@[a][n])
, f: (!v | &a, !vt) -<fun,fe> void
, env: !vt
, asz: size_t n
) :<fe> void
// end of [array_foreach_funenv]

fun{a:vt0p}
array_foreach_fun
  {n:int}{fe:eff} (
  A: &(@[a][n]), f: (&a) -<fun,fe> void, asz: size_t n
) :<fe> void // end of [array_foreach_fun]

fun{a:vt0p}
array_foreach_clo
  {n:int}{fe:eff} (
  A: &(@[a][n]), f: &(&a) -<clo,fe> void, asz: size_t n
) :<fe> void // end of [array_foreach_clo]
fun{a:vt0p}
array_foreach_vclo
  {v:view}{n:int}{fe:eff} (
  pfv: !v
| base: &(@[a][n])
, f: &(!v | &a) -<clo,fe> void, asz: size_t n
) :<fe> void // end of [array_foreach_vclo]

fun{a:vt0p}
array_foreach_cloptr
  {n:int}{fe:eff} (
  A: &(@[a][n]), f: (&a) -<cloptr,fe> void, asz: size_t n
) :<fe> void // end of [array_foreach_cloptr]
fun{a:vt0p}
array_foreach_vcloptr
  {v:view}{n:int}{fe:eff} (
  pfv: !v
| base: &(@[a][n])
, f: (!v | &a) -<cloptr,fe> void, asz: size_t n
) :<fe> void // end of [array_foreach_vcloptr]

fun{a:vt0p}
array_foreach_clopref
  {n:int}{fe:eff} (
  A: &(@[a][n]), f: (&a) -<cloref,fe> void, asz: size_t n
) :<fe> void // end of [array_foreach_cloref]

#atscode_separator()

fun{a:vt0p}
array_bsearch_funenv
  {env:vtp}{n:int} (
  A: &(@[a][n])
, n: size_t (n)
, pord: (&a, !env) -<fun> int, env: !env
) :<> sizeLte (n) // end of [array_bsearch_funenv]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "array_atxt.txt")
%}\
