%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"filebas.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/filebas.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

val stdin_ref : FILEref = "mac\#atspre_FILE_stdin"
val stdout_ref : FILEref = "mac\#atspre_FILE_stdout"
val stderr_ref : FILEref = "mac\#atspre_FILE_stderr"

#atscode_separator()

val file_mode_r : file_mode (r()) // = "r"
val file_mode_rr : file_mode (rw()) // = "r+"
val file_mode_w : file_mode (w()) // = "w"
val file_mode_ww : file_mode (rw()) // = "w+"
val file_mode_a : file_mode (rw()) // = "a"
val file_mode_aa : file_mode (rw()) // = "a+"

#atscode_separator()

(*
** HX: [stat] is called
*)
fun test_file_exists
  (path: NSH(string)): bool = "atspre_test_file_exists"
// end of [test_file_exists]

#atscode_separator()
//
// HX-2011-02-16:
// [stat] is called to obtain the mode of a given file
// for [f] to be applied to it.
//
fun test_file_mode (path: NSH(string), f: uint -> bool): int
//
// HX: [stat] is called // ~1/0/1: error/false/true
//
fun test_file_isblk (path: NSH(string)): int = "atspre_test_file_isblk"
fun test_file_ischr (path: NSH(string)): int = "atspre_test_file_ischr"
fun test_file_isdir (path: NSH(string)): int = "atspre_test_file_isdir"
fun test_file_isfifo (path: NSH(string)): int = "atspre_test_file_isfifo"
fun test_file_isreg (path: NSH(string)): int = "atspre_test_file_isreg"
//
// HX: [lstat] is called // ~1/0/1: error/false/true
//
fun test_file_islnk (path: NSH(string)): int = "atspre_test_file_islnk"

#atscode_separator()

fun fileref_open_exn
  (path: NSH(string), fm: file_mode): FILEref
// end of [fileref_open_exn]

fun fileref_open_opt
  (path: NSH(string), fm: file_mode): Option_vt (FILEref)
// end of [fileref_open_opt]

#atscode_separator()

fun fileref_close (r: FILEref): void

#atscode_separator()

fun fileref_flush (r: FILEref): void

#atscode_separator()

fun fileref_getc (r: FILEref): int // HX: error indication: EOF

#atscode_separator()

fun{a:t0p}
fileref_putc (r: FILEref, c: a): void // HX: no error reporting

fun fileref_putc_int (r: FILEref, c: int): void // HX: no error reporting
fun fileref_putc_char (r: FILEref, c: char): void // HX: no error reporting

#atscode_separator()

fun fileref_puts (r: FILEref, s: NSH(string)): void // HX: no error reporting

#atscode_separator()

fun fileref_is_eof (r: FILEref): bool

macdef fileref_isnot_eof (r) = ~fileref_is_eof (,(r))

#atscode_separator()

typedef
fileref_load_type (a:t@ype) =
  (FILEref, &a? >> opt (a, b)) -<fun1> #[b:bool] bool (b)
// end of [fileref_load_type]

fun{a:t0p}
fileref_load : fileref_load_type (a)

fun fileref_load_int : fileref_load_type (int)
fun fileref_load_char : fileref_load_type (char)
fun fileref_load_double : fileref_load_type (double)
fun fileref_load_string : fileref_load_type (NSH(string))

#atscode_separator()

fun{a:t0p}
fileref_get_optval
  (r: FILEref): Option_vt (a)
// end of [fileref_get_optval]

fun{
a:t0p
} fileref_get_exnmsg
  (r: FILEref, msg: NSH(string)): a
// end of [fileref_get_exnmsg]

macdef
fileref_get_exnloc
  (r) = fileref_get_exnmsg (,(r), $mylocation)
// end of [fileref_get_exnloc]

#atscode_separator()

typedef charlst = List0 (char)
vtypedef charlst_vt = List0_vt (char)

#atscode_separator()

fun fileref_get_line_charlst (r: FILEref): charlst_vt

(*
** HX: only for files of "tiny" size
*)
fun fileref_get_lines_charlstlst (r: FILEref): List0_vt (charlst_vt)

#atscode_separator()

fun fileref_get_line_string (r: FILEref): Strptr1

fun fileref_get_line_string_main (
  r: FILEref, n: &size_t? >> size_t n, ending: &int? >> int
) : #[n:nat] strnptr (n) // endfun

(*
** HX: only for files of "tiny" size
*)
fun fileref_get_lines_stringlst (r: FILEref): List0_vt (Strptr1)

#atscode_separator()

fun fileref_put_charlst (r: FILEref, cs: NSH(List(char))): void

#atscode_separator()

(*
** HX: for handling files of "tiny" size
*)
fun fileref_get_file_charlst (r: FILEref): List0_vt (char)
fun fileref_nget_file_charlst {n:nat} (r: FILEref, n: int n): List0_vt (char)

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "filebas_atxt.txt")
%}\
