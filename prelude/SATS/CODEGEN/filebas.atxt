%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"filebas.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/filebas.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

\#define NSH (x) x // for commenting: no sharing
\#define SHR (x) x // for commenting: it is shared

#atscode_separator()

val stdin_ref : FILEref = "mac\#%FILE_stdin"
val stdout_ref : FILEref = "mac\#%FILE_stdout"
val stderr_ref : FILEref = "mac\#%FILE_stderr"

#atscode_separator()
//
val file_mode_r
  : file_mode (r()) = "mac\#%" // = "r"
val file_mode_rr
  : file_mode (rw()) = "mac\#%" // = "r+"
//
val file_mode_w
  : file_mode (w()) = "mac\#%" // = "w"
val file_mode_ww
  : file_mode (rw()) = "mac\#%" // = "w+"
//
val file_mode_a
  : file_mode (rw()) = "mac\#%" // = "a"
val file_mode_aa
  : file_mode (rw()) = "mac\#%" // = "a+"
//
#atscode_separator()

(*
** HX: [stat] is called
*)
fun test_file_exists (path: NSH(string)): bool = "mac\#%"

#atscode_separator()
//
// HX-2011-02-16:
// [stat] is called to obtain the mode of a given file
// for [f] to be applied to it.
//
fun test_file_mode (path: NSH(string), f: uint -> bool): int
//
// HX: [stat] is called // ~1/0/1: error/false/true
//
fun test_file_isblk (path: NSH(string)): int = "mac\#%"
fun test_file_ischr (path: NSH(string)): int = "mac\#%"
fun test_file_isdir (path: NSH(string)): int = "mac\#%"
fun test_file_isfifo (path: NSH(string)): int = "mac\#%"
fun test_file_isreg (path: NSH(string)): int = "mac\#%"
//
// HX: [lstat] is called // ~1/0/1: error/false/true
//
fun test_file_islnk (path: NSH(string)): int = "mac\#%"
//
#atscode_separator()

fun fileref_open_exn
  (path: NSH(string), fm: file_mode): FILEref = "mac\#%"
// end of [fileref_open_exn]

fun fileref_open_opt
  (path: NSH(string), fm: file_mode): Option_vt (FILEref)
// end of [fileref_open_opt]

#atscode_separator()

fun fileref_close (r: FILEref): void = "mac\#%"

#atscode_separator()

fun fileref_flush (r: FILEref): void = "mac\#%"

#atscode_separator()
//
// HX: error indication: EOF
//
fun fileref_getc (r: FILEref): int = "mac\#%"
//
#atscode_separator()
//
// HX: no error reporting
//
symintr fileref_putc
//
fun fileref_putc_int
  (r: FILEref, c: int): void = "mac\#%"
overload fileref_putc with fileref_putc_int
fun fileref_putc_char
  (r: FILEref, c: char): void = "mac\#%"
overload fileref_putc with fileref_putc_char
//
#atscode_separator()
//
// HX: no error reporting
//
fun fileref_puts
  (r: FILEref, s: NSH(string)): void = "mac\#%"
//
#atscode_separator()

fun fileref_is_eof (r: FILEref): bool = "mac\#%"

macdef fileref_isnot_eof (r) = ~fileref_is_eof (,(r))

#atscode_separator()

typedef
fileref_load_type (a:t@ype) =
  (FILEref, &a? >> opt (a, b)) -<fun1> #[b:bool] bool (b)
// end of [fileref_load_type]

fun{a:t0p}
fileref_load : fileref_load_type (a)

fun fileref_load_int : fileref_load_type (int) = "mac\#%"
fun fileref_load_lint : fileref_load_type (lint) = "mac\#%"
fun fileref_load_uint : fileref_load_type (uint) = "mac\#%"
fun fileref_load_ulint : fileref_load_type (ulint) = "mac\#%"

fun fileref_load_float : fileref_load_type (float) = "mac\#%"
fun fileref_load_double : fileref_load_type (double) = "mac\#%"

#atscode_separator()

fun{a:t0p}
fileref_get_optval
  (r: FILEref): Option_vt (a)
// end of [fileref_get_optval]

fun{
a:t0p
} fileref_get_exnmsg
  (r: FILEref, msg: NSH(string)): a
// end of [fileref_get_exnmsg]

macdef
fileref_get_exnloc
  (r) = fileref_get_exnmsg (,(r), $mylocation)
// end of [fileref_get_exnloc]

#atscode_separator()

typedef charlst = List0 (char)
vtypedef charlst_vt = List0_vt (char)

#atscode_separator()

fun fileref_get_line_charlst (r: FILEref): charlst_vt

(*
** HX: only for files of "tiny" size
*)
fun fileref_get_lines_charlstlst (r: FILEref): List0_vt (charlst_vt)

#atscode_separator()

fun fileref_get_line_string (r: FILEref): Strptr1

fun fileref_get_line_string_main (
  r: FILEref, n: &size_t? >> size_t n, ending: &int? >> int
) : #[n:nat] strnptr (n) // endfun

(*
** HX: only for files of "tiny" size
*)
fun fileref_get_lines_stringlst (r: FILEref): List0_vt (Strptr1)

#atscode_separator()

fun fileref_put_charlst (r: FILEref, cs: NSH(List(char))): void

#atscode_separator()

(*
** HX: for handling files of "tiny" size
*)
fun fileref_get_file_charlst (r: FILEref): List0_vt (char)
fun fileref_nget_file_charlst {n:nat} (r: FILEref, n: int n): List0_vt (char)

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "filebas_atxt.txt")
%}\
