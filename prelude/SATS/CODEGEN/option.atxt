%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT=="txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"option.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/option.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

#atscode_decl_strcst("sortdef t0p = t@ype")

#atscode_separator()

(*
exception NotSomeExn of ()
*)
fun NotSomeExn ():<> exn = "mac\#NotSomeExn_make"
fun isNotSomeExn (x: !exn):<> bool = "mac\#isNotSomeExn"

#atscode_separator()

fun{a:t0p}
option_some (x: a):<> option (a, true)
fun{a:t0p}
option_none ((*void*)):<> option (a, false)

#atscode_separator()

#atscode_decl_strcst('\
fun{}
option_is_some{a:t0p}
  {b:bool} (opt: option (a, b)):<> bool (b)
// end of [option_is_some]
')\

#atscode_decl_strcst('\
fun{}
option_is_none{a:t0p}
  {b:bool} (opt: option (a, b)):<> bool (~b)
// end of [option_is_none]
')\

#atscode_separator()

fun{a:t0p}
option_unsome (opt: option (a, true)):<> a

fun{a:t0p}
option_unsome_exn (opt: Option (a)):<!exn> a

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "option_atxt.txt")
%}\
