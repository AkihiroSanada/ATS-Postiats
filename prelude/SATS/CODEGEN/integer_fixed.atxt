%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"integer_fixed.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
//
fun
fprint_print_prerr_decl
  (tnm1: string, tnm2: string): atext = let
//
val ent = sprintf ("\
fun fprint_%s
  : fprint_type (%s) = \"mac#atspre_fprint_%s\"
overload fprint with fprint_%s
fun print_%s (x: %s): void = \"mac#atspre_print_%s\"
fun prerr_%s (x: %s): void = \"mac#atspre_prerr_%s\"
overload print with print_%s
overload prerr with prerr_%s
", @(
 tnm1, tnm2, tnm1, tnm1, tnm1, tnm2, tnm1, tnm1, tnm2, tnm1, tnm1, tnm1
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fprint_print_prerr_decl]
//
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/integer_fixed.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("January, 2013")

#atscode_separator()
//
// HX: for unindexed integer types
//
#atscode_separator()

sortdef tk = tkind

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()
//
stadef intptrknd = intptr_kind
stadef uintptrknd = uintptr_kind
//
#atscode_separator()
//
fun g0int2int_int_intptr
  (x: int):<> intptr = "mac\#atspre_g0int2int_int_intptr"
fun g1int2int_int_intptr
  {i:int} (x: int i):<> intptr (i) = "mac\#atspre_g1int2int_int_intptr"
//
#atscode_separator()
//
fun g0int2uint_int_uintptr
  (x: int):<> uintptr = "mac\#atspre_g0int2uint_int_uintptr"
fun g1int2uint_int_uintptr
  {i:nat} (x: int i):<> uintptr (i) = "mac\#atspre_g1int2uint_int_uintptr"
//
#atscode_separator()
//
fun g0uint2uint_uint_uintptr
  (x: uint):<> uintptr = "mac\#atspre_g0uint2uint_uint_uintptr"
fun g1uint2uint_uint_uintptr
  {u:int} (x: uint u):<> uintptr (u) = "mac\#atspre_g1uint2uint_uint_uintptr"
//
#atscode_separator()

%{
local
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
(*
fun f_intofstr (
  tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0int_of_string_%s (str: NSH(string)):<> %s = \"mac#g0int_of_string_%s\"\n\
", @(tnm1, tnm2, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_intofstr]
*)
fun f_int_int (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0int_%s_%s (x: %s):<> %s = \"mac#atspre_g0int_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_int_int]
//
fun f_int_bool (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0int_%s_%s (x: %s):<> bool = \"mac#atspre_g0int_%s_%s\"\n\
", @(fnm, tnm1, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_int_bool]
//
fun f_int2_int (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0int_%s_%s (x: %s, y: %s):<> %s = \"mac#atspre_g0int_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_int2_int]
//
fun f_int2_bool (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0int_%s_%s (x: %s, y: %s):<> bool = \"mac#atspre_g0int_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_int2_bool]
//
fun f_compare (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0int_%s_%s (x: %s, y: %s):<> int = \"mac#atspre_g0int_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [f_compare]
//
in
//
fun
fun_g0int_type_aop_cmp_decl (
  tnm1: string, tnm2: string
) : atext = let
var res: atextlst = list_nil
(*
val () = res := list_cons (f_intofstr (tnm1, tnm2), res)
*)
val () = res := list_cons (f_int_int ("neg", tnm1, tnm2), res)
//
val () = res := list_cons (f_int_int ("succ", tnm1, tnm2), res)
val () = res := list_cons (f_int_int ("pred", tnm1, tnm2), res)
//
val () = res := list_cons (f_int_int ("half", tnm1, tnm2), res)
//
val () = res := list_cons (f_int2_int ("add", tnm1, tnm2), res)
val () = res := list_cons (f_int2_int ("sub", tnm1, tnm2), res)
val () = res := list_cons (f_int2_int ("mul", tnm1, tnm2), res)
val () = res := list_cons (f_int2_int ("div", tnm1, tnm2), res)
val () = res := list_cons (f_int2_int ("mod", tnm1, tnm2), res)
//
val () = res := list_cons (f_int_bool ("isltz", tnm1, tnm2), res)
val () = res := list_cons (f_int_bool ("isltez", tnm1, tnm2), res)
val () = res := list_cons (f_int_bool ("isgtz", tnm1, tnm2), res)
val () = res := list_cons (f_int_bool ("isgtez", tnm1, tnm2), res)
val () = res := list_cons (f_int_bool ("iseqz", tnm1, tnm2), res)
val () = res := list_cons (f_int_bool ("isneqz", tnm1, tnm2), res)
//
val () = res := list_cons (f_int2_bool ("lt", tnm1, tnm2), res)
val () = res := list_cons (f_int2_bool ("lte", tnm1, tnm2), res)
val () = res := list_cons (f_int2_bool ("gt", tnm1, tnm2), res)
val () = res := list_cons (f_int2_bool ("gte", tnm1, tnm2), res)
val () = res := list_cons (f_int2_bool ("eq", tnm1, tnm2), res)
val () = res := list_cons (f_int2_bool ("neq", tnm1, tnm2), res)
//
val () = res := list_cons (f_compare ("compare", tnm1, tnm2), res)
//
val () = res := list_cons (f_int2_int ("max", tnm1, tnm2), res)
val () = res := list_cons (f_int2_int ("min", tnm1, tnm2), res)
val res = list_reverse (res)
in
  atext_concatxt (list_of_list_vt (res))
end // end of [fun_g0int_type_aop_cmp_decl]
//
end // end of [local]
%}\
#fun_g0int_type_aop_cmp_decl("intptr", "intptr")\
//
#atscode_separator()
//
//
#fprint_print_prerr_decl("intptr", "intptr")\
//
#atscode_separator()
//
%{
local
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
(*
fun f_uintofstr (
  tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0uint_of_string_%s
  (str: NSH(string)):<> %s = \"mac#atspre_g0uint_of_string_%s\"\n\
// end of [g0uint_of_string_%s]
", @(tnm1, tnm2, tnm1, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_uintofstr]
*)
fun f_uint_uint (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0uint_%s_%s (x: %s):<> %s = \"mac#atspre_g0uint_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_uint_uint]
//
fun f_uint_bool (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0uint_%s_%s (x: %s):<> bool = \"mac#atspre_g0uint_%s_%s\"\n\
" , @(fnm, tnm1, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [f_uint_bool]
//
fun f_uint2_uint (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0uint_%s_%s (x: %s, y: %s):<> %s = \"mac#atspre_g0uint_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_uint2_uint]
//
fun f_uint2_bool (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0uint_%s_%s (x: %s, y: %s):<> bool = \"mac#atspre_g0uint_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_uint2_bool]
//
fun f_compare (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g0uint_%s_%s (x: %s, y: %s):<> int = \"mac#atspre_g0uint_%s_%s\"\n\
", @(fnm, tnm1, tnm2, tnm2, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f_compare]
//
in
//
fun
fun_g0uint_type_aop_cmp_decl (
  tnm1: string, tnm2: string
) : atext = let
var res: atextlst = list_nil
(*
val () = res := list_cons (f_uintofstr (tnm1, tnm2), res)
*)
val () = res := list_cons (f_uint_uint ("succ", tnm1, tnm2), res)
val () = res := list_cons (f_uint_uint ("pred", tnm1, tnm2), res)
//
val () = res := list_cons (f_uint_uint ("half", tnm1, tnm2), res)
//
val () = res := list_cons (f_uint2_uint ("add", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_uint ("sub", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_uint ("mul", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_uint ("div", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_uint ("mod", tnm1, tnm2), res)
//
val () = res := list_cons (f_uint_bool ("isgtz", tnm1, tnm2), res)
val () = res := list_cons (f_uint_bool ("isgtez", tnm1, tnm2), res)
val () = res := list_cons (f_uint_bool ("iseqz", tnm1, tnm2), res)
val () = res := list_cons (f_uint_bool ("isneqz", tnm1, tnm2), res)
//
val () = res := list_cons (f_uint2_bool ("lt", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_bool ("lte", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_bool ("gt", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_bool ("gte", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_bool ("eq", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_bool ("neq", tnm1, tnm2), res)
//
val () = res := list_cons (f_compare ("compare", tnm1, tnm2), res)
//
val () = res := list_cons (f_uint2_uint ("max", tnm1, tnm2), res)
val () = res := list_cons (f_uint2_uint ("min", tnm1, tnm2), res)
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [fun_g0uint_type_aop_cmp_decl]
//
end // end of [local]
%}\
#fun_g0uint_type_aop_cmp_decl("uintptr", "uintptr")\
//
#atscode_separator()
//
#fprint_print_prerr_decl("uintptr", "uintptr")\
//
#atscode_separator()
//
%{
fun
fun_g1int_type_aop_cmp_decl
  (tnm1: string, tnm2: string): atext = let
//
fun f (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g1int_%s_%s : g1int_%s_type (%sknd) = \"mac#atspre_g1int_%s_%s\"\n\
", @(fnm, tnm1, fnm, tnm1, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f]
//
var res: atextlst = list_nil
//
val () = res := list_cons (f ("neg", tnm1, tnm2), res)
//
val () = res := list_cons (f ("succ", tnm1, tnm2), res)
val () = res := list_cons (f ("pred", tnm1, tnm2), res)
//
val () = res := list_cons (f ("half", tnm1, tnm2), res)
//
val () = res := list_cons (f ("add", tnm1, tnm2), res)
val () = res := list_cons (f ("sub", tnm1, tnm2), res)
val () = res := list_cons (f ("mul", tnm1, tnm2), res)
val () = res := list_cons (f ("div", tnm1, tnm2), res)
//
val () = res := list_cons (f ("isltz", tnm1, tnm2), res)
val () = res := list_cons (f ("isltez", tnm1, tnm2), res)
val () = res := list_cons (f ("isgtz", tnm1, tnm2), res)
val () = res := list_cons (f ("isgtez", tnm1, tnm2), res)
val () = res := list_cons (f ("iseqz", tnm1, tnm2), res)
val () = res := list_cons (f ("isneqz", tnm1, tnm2), res)
//
val () = res := list_cons (f ("lt", tnm1, tnm2), res)
val () = res := list_cons (f ("lte", tnm1, tnm2), res)
val () = res := list_cons (f ("gt", tnm1, tnm2), res)
val () = res := list_cons (f ("gte", tnm1, tnm2), res)
val () = res := list_cons (f ("eq", tnm1, tnm2), res)
val () = res := list_cons (f ("neq", tnm1, tnm2), res)
//
val () = res := list_cons (f ("compare", tnm1, tnm2), res)
//
val () = res := list_cons (f ("max", tnm1, tnm2), res)
val () = res := list_cons (f ("min", tnm1, tnm2), res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [fun_g1int_type_aop_cmp_decl]
%}\
\
#fun_g1int_type_aop_cmp_decl("intptr", "intptr")\
//
#atscode_separator()
//
%{
fun
fun_g1uint_type_aop_cmp_decl
  (tnm1: string, tnm2: string): atext = let
//
fun f (
  fnm: string, tnm1: string, tnm2: string
) : atext = let
val ent = sprintf ("\
fun g1uint_%s_%s : g1uint_%s_type (%sknd) = \"mac#atspre_g1uint_%s_%s\"\n\
", @(fnm, tnm1, fnm, tnm1, fnm, tnm1)
) // end of [sprintf] // end of [val]
in
  atext_strptr (ent)
end // end of [f]
//
var res: atextlst = list_nil
//
val () = res := list_cons (f ("succ", tnm1, tnm2), res)
val () = res := list_cons (f ("pred", tnm1, tnm2), res)
//
val () = res := list_cons (f ("half", tnm1, tnm2), res)
//
val () = res := list_cons (f ("add", tnm1, tnm2), res)
val () = res := list_cons (f ("sub", tnm1, tnm2), res)
val () = res := list_cons (f ("mul", tnm1, tnm2), res)
val () = res := list_cons (f ("div", tnm1, tnm2), res)
//
val () = res := list_cons (f ("isgtz", tnm1, tnm2), res)
val () = res := list_cons (f ("isgtez", tnm1, tnm2), res)
val () = res := list_cons (f ("iseqz", tnm1, tnm2), res)
val () = res := list_cons (f ("isneqz", tnm1, tnm2), res)
//
val () = res := list_cons (f ("lt", tnm1, tnm2), res)
val () = res := list_cons (f ("lte", tnm1, tnm2), res)
val () = res := list_cons (f ("gt", tnm1, tnm2), res)
val () = res := list_cons (f ("gte", tnm1, tnm2), res)
val () = res := list_cons (f ("eq", tnm1, tnm2), res)
val () = res := list_cons (f ("neq", tnm1, tnm2), res)
//
val () = res := list_cons (f ("compare", tnm1, tnm2), res)
//
val () = res := list_cons (f ("max", tnm1, tnm2), res)
val () = res := list_cons (f ("min", tnm1, tnm2), res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [fun_g1uint_type_aop_cmp_decl]
%}\
\
#fun_g1uint_type_aop_cmp_decl("uintptr", "uintptr")\
//
#atscode_separator()
//
macdef i2ptr (x) = g1int2int_int_intptr (,(x))
//
macdef u2ptr (x) = g1uint2uint_uint_uintptr (,(x))
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "integer_fixed_atxt.txt")
%}\
