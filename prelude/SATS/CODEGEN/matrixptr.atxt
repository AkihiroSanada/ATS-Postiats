%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"matrixptr.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/matrixptr.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

absvtype
matrixptr_vt0ype_addr_int_int_vtype
  (a:vt@ype+, l: addr, m: int, n: int) = ptr
//
stadef
matrixptr = matrixptr_vt0ype_addr_int_int_vtype
vtypedef
matrixptr
  (a:vt@ype, m: int, n: int) = [l:addr] matrixptr (a, l, m, n)
//
#atscode_separator()

absvtype
matrixptrout_vt0ype_addr_int_int_vtype
  (a:vt@ype, l: addr, m: int, n: int) = ptr
//
stadef
matrixptrout = matrixptrout_vt0ype_addr_int_int_vtype
//
#atscode_separator()

praxi
lemma_matrixptr_param{a:vt0p}
  {l:addr}{m,n:int} (A: !matrixptr (a, l, m, n)): [m >= 0; n >= 0] void
// end of [lemma_matrixptr_param]

#atscode_separator()

castfn
matrixptr2ptr
  {a:vt0p}
  {l:addr}{m,n:int}
  (A: !matrixptr (INV(a), l, m, n)):<> ptr (l)
overload ptrcast with matrixptr2ptr

castfn
matrixptrout2ptr
  {a:t0p}
  {l:addr}{m,n:int}
  (A: !matrixptrout (INV(a), l, m, n)):<> ptr (l)
overload ptrcast with matrixptrout2ptr

#atscode_separator()

praxi
matrixptr_takeout
  {a:vt0p}{l:addr}{m,n:int}
(
  !matrixptr (INV(a), l, m, n) >> matrixptrout (a?, l, m, n)
) : matrix_v (a, l, m, n) // endfun
praxi
matrixptr_addback
  {a:vt0p}{l:addr}{m,n:int}
(
  pf: matrix_v (INV(a), l, m, n)
| mat: !matrixptrout (a?, l, m, n) >> matrixptr (a, l, m, n)
) : void // end of [matrixptr_addback]

#atscode_separator()

symintr arrayptr2matrixptr

fun{
} arrayptr2matrixptr_int
  {a:vt0p}{l:addr}{m,n:nat}
  (A: arrayptr (INV(a), l, m*n), m: int m, n: int n):<> matrixptr (a, l, m, n)
overload arrayptr2matrixptr with arrayptr2matrixptr_int

fun{
} arrayptr2matrixptr_size
  {a:vt0p}{l:addr}{m,n:int}
  (A: arrayptr (INV(a), l, m*n), m: size_t m, n: size_t n):<> matrixptr (a, l, m, n)
overload arrayptr2matrixptr with arrayptr2matrixptr_size

#atscode_separator()
//
fun{
a:t0p
} matrixptr_make_elt_int
  {m,n:nat} (m: int m, n: int n, x: a):<!wrt> matrixptr (a, m, n)
fun{
a:t0p
} matrixptr_make_elt_size
  {m,n:int} (m: size_t m, n: size_t n, x: a):<!wrt> matrixptr (a, m, n)
//
symintr matrixptr_make_elt
overload matrixptr_make_elt with matrixptr_make_elt_int
overload matrixptr_make_elt with matrixptr_make_elt_size
//
#atscode_separator()

fun{a:t0p}
matrixptr_get_at_int
  {m,n:int}
(
  A: !matrixptr (INV(a), m, n), i: natLt (m), n: int n, j: natLt (n)
) :<> (a) // end of [matrixptr_get_at_int]
overload [] with matrixptr_get_at_int

fun{a:t0p}
matrixptr_get_at_size
  {m,n:int}
(
  A: !matrixptr (INV(a), m, n), i: sizeLt (m), n: size_t n, j: sizeLt (n)
) :<> (a) // end of [matrixptr_get_at_size]
overload [] with matrixptr_get_at_size

symintr matrixptr_get_at
overload matrixptr_get_at with matrixptr_get_at_int of 0
overload matrixptr_get_at with matrixptr_get_at_size of 0

#atscode_separator()

fun{a:t0p}
matrixptr_set_at_int
  {m,n:int}
(
  A: !matrixptr (INV(a), m, n), i: natLt (m), n: int n, j: natLt (n), x: a
) :<!wrt> void // end of [matrixptr_set_at_int]
overload [] with matrixptr_set_at_int

fun{a:t0p}
matrixptr_set_at_size
  {m,n:int}
(
  A: !matrixptr (INV(a), m, n), i: sizeLt (m), n: size_t n, j: sizeLt (n), x: a
) :<!wrt> void // end of [matrixptr_set_at_size]
overload [] with matrixptr_set_at_size

symintr matrixptr_set_at
overload matrixptr_set_at with matrixptr_set_at_int of 0
overload matrixptr_set_at with matrixptr_set_at_size of 0

#atscode_separator()

fun{a:vt0p}
matrixptr_exch_at_int
  {m,n:int}
(
  A: !matrixptr (INV(a), m, n)
, i: natLt (m), n: int n, j: natLt (n), x: &a>>a
) :<!wrt> void // end of [matrixptr_exch_at_int]

fun{a:vt0p}
matrixptr_exch_at_size
  {m,n:int}
(
  A: !matrixptr (INV(a), m, n)
, i: sizeLt (m), n: size_t n, j: sizeLt (n), x: &a>>a
) :<!wrt> void // end of [matrixptr_exch_at_size]

symintr matrixptr_exch_at
overload matrixptr_exch_at with matrixptr_exch_at_int
overload matrixptr_exch_at with matrixptr_exch_at_size

#atscode_separator()

(*
fprint_matrix$sep1 // col separation
fprint_matrix$sep2 // row separation
*)
fun{a:vt0p}
fprint_matrixptr{m,n:int}
(
  out: FILEref
, M: !matrixptr (INV(a), m, n), m: size_t m, n: size_t n
) : void // end of [fprint_matrixptr]

fun{a:vt0p}
fprint_matrixptr_sep{m,n:int}
(
  out: FILEref
, M: !matrixptr (INV(a), m, n), m: size_t (m), n: size_t (n)
, sep1: NSH(string), sep2: NSH(string)
) : void // end of [fprint_matrixptr_sep]

#atscode_separator()

fun matrixptr_free
  {a:t0p}{l:addr}{m,n:int}
  (A: matrixptr (INV(a), l, m, n)):<!wrt> void = "mac\#%"
// end of [matrixptr_free]

(*
fun{a:vt0p}
matrix_uninitize$clear
  (i: size_t, j: size_t, x: &a >> a?): void
*)
fun{
a:vt0p
} matrixptr_freelin
  {l:addr}{m,n:int}
  (A: matrixptr (INV(a), l, m, n)):<!wrt> void = "mac\#%"
// end of [matrixptr_freelin]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "matrixptr_atxt.txt")
%}\
