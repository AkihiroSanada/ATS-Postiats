%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"dlist_vt.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_LGPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/dlist_vt.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")

#atscode_separator()
//
// HX-2012-12: ported to ATS/Postiats from ATS/Anairiats
//
#atscode_separator()

typedef SHR(a:type) = a // for commenting purpose
typedef NSH(a:type) = a // for commenting purpose

#atscode_separator()

sortdef t0p = t@ype and vt0p = viewt@ype

#atscode_separator()

(*
**
** HX-2012-02-29:
** dlist_vt (a, f, r) means that there are f elements in
** front of the current one while r-1 elements after it. So the
** total number of elements is f+r. If f=r=0, then the list is
** empty.
**
*)
absviewtype // f: front; r: rear
dlist_viewtype (a: viewt@ype+, f: int, r: int)
stadef dlist_vt = dlist_viewtype

#atscode_separator()

praxi
lemma1_dlist_vt_param {a:vt0p}
  {f,r:int} (xs: !dlist_vt (INV(a), f, r)): [f >= 0;r >= 0] void
// end of [lemma_dlist_vt_param]

praxi
lemma2_dlist_vt_param
  {a:vt0p} {f,r:int | f > 0} (xs: !dlist_vt (INV(a), f, r)): [r > 0] void
// end of [lemma2_dlist_vt_param]

praxi
lemma3_dlist_vt_param
  {a:vt0p} {f:int} (xs: !dlist_vt (INV(a), f, 0)): [f == 0] void
// end of [lemma3_dlist_vt_param]

#atscode_separator()

fun{}
dlist_vt_nil
  {a:vt0p} ():<> dlist_vt (a, 0, 0)
// end of [dlist_vt_nil]

fun{a:vt0p}
dlist_vt_sing (x: a):<> dlist_vt (a, 0, 1)

fun{a:vt0p}
dlist_vt_cons {r:int}
  (x: a, xs: dlist_vt (INV(a), 0, r)):<> dlist_vt (a, 0, r+1)
// end of [dlist_vt_cons]

fun{a:vt0p}
dlist_vt_snoc {f:int}
  (xs: dlist_vt (INV(a), f, 1), x: a):<> dlist_vt (a, f+1, 1)
// end of [dlist_vt_snoc]

#atscode_separator()

fun{a:vt0p}
dlist_vt_is_atbeg
  {f,r:int | r > 0}
  (xs: !dlist_vt (INV(a), f, r)):<> bool (f==0)
// end of [dlist_vt_is_atbeg]
fun{a:vt0p}
dlist_vt_is_atend
  {f,r:int | r > 0}
  (xs: !dlist_vt (INV(a), f, r)):<> bool (r==1)
// end of [dlist_vt_is_atend]

fun{a:vt0p}
rdlist_vt_is_atbeg
  {f,r:int | r > 0}
  (xs: !dlist_vt (INV(a), f, r)):<> bool (r==1)
// end of [rdlist_vt_is_atend]
fun{a:vt0p}
rdlist_vt_is_atend
  {f,r:int | r > 0}
  (xs: !dlist_vt (INV(a), f, r)):<> bool (f==0)
// end of [rdlist_vt_is_atend]

#atscode_separator()

fun{a:vt0p}
dlist_vt_getref_elt
  {f,r:int | r > 0} (xs: !dlist_vt (INV(a), f, r)):<> Ptr1
// end of [dlist_vt_getref_elt]

fun{a:vt0p}
dlist_vt_getref_next
  {f,r:int | r > 0} (xs: !dlist_vt (INV(a), f, r)):<> Ptr1
// end of [dlist_vt_getref_next]

#atscode_separator()

fun{a:t0p}
dlist_vt_get
  {f,r:int | r > 0} (xs: !dlist_vt (INV(a), f, r)): a
// end of [dlist_vt_get]

fun{a:t0p}
dlist_vt_set
  {f,r:int | r > 0} (xs: !dlist_vt (INV(a), f, r), x0: a): void
// end of [dlist_vt_set]

#atscode_separator()

fun{a:vt0p}
dlist_vt_length
  {f,r:int} (xs: !dlist_vt (INV(a), f, r)):<> int (r)
fun{a:vt0p}
rdlist_vt_length
  {f,r:int} (xs: !dlist_vt (INV(a), f, r)):<> int (f)

#atscode_separator()

fun{a:vt0p}
dlist_vt_move
  {f,r:int | r > 1}
  (xs: dlist_vt (INV(a), f, r)):<> dlist_vt (a, f+1, r-1)
fun{a:vt0p}
dlist_vt_move_all
  {f,r:int | r > 0}
  (xs: dlist_vt (INV(a), f, r)):<> dlist_vt (a, f+r-1, 1)
// end of [dlist_vt_move_all]

#atscode_separator()

fun{a:vt0p}
rdlist_vt_move
  {f,r:int | f > 0}
  (xs: dlist_vt (INV(a), f, r)):<> dlist_vt (a, f-1, r+1)
fun{a:vt0p}
rdlist_vt_move_all
  {f,r:int | r > 0}
  (xs: dlist_vt (INV(a), f, r)):<> dlist_vt (a, 0, f+r)
// end of [rdlist_vt_move_all]

#atscode_separator()

fun{a:vt0p}
dlist_vt_insert
  {f,r:int | r > 0}
  (xs: dlist_vt (INV(a), f, r), x0: a):<!wrt> dlist_vt (a, f, r+1)
// end of [dlist_vt_insert]

#atscode_separator()

fun{a:vt0p}
dlist_vt_remove
  {f,r:int | f > 0}
  (xs: dlist_vt (INV(a), f, r), x0: &a? >> a):<!wrt> dlist_vt (a, f-1, r)
// end of [dlist_vt_remove]

#atscode_separator()

fun{a:vt0p}
dlist_vt_append
  {f1,r1:int}{f2,r2:int} (
  xs1: dlist_vt (INV(a), f1, r1), xs2: dlist_vt (a, f2, r2)
) :<!wrt> dlist_vt (a, f1, r1+f2+r2) // end of [dlist_vt_append]

fun{a:vt0p}
rdlist_vt_append
  {f1,r1:int}{f2,r2:int | r2 > 0} (
  xs1: dlist_vt (INV(a), f1, r1), xs2: dlist_vt (a, f2, r2)
) :<!wrt> dlist_vt (a, f1+r1+f2, r2) // end of [rdlist_vt_append]

#atscode_separator()

fun{a:t@ype}
dlist_vt_free {r:int} (xs: dlist_vt (INV(a), 0, r)):<!wrt> void

#atscode_separator()

fun{
a:vt0p}{env:vt0p
} dlist_vt_foreach$fwork (x: &a, env: &env): void

fun{a:vt0p}
dlist_vt_foreach
  {f,r:int} (xs: !dlist_vt (INV(a), f, r)): void
// end of [dlist_vt_foreach]

fun{
a:vt0p}{env:vt0p
} dlist_vt_foreach_env
  {f,r:int} (xs: !dlist_vt (INV(a), f, r), env: &env): void
// end of [dlist_vt_foreach_env]

#atscode_separator()

fun{
a:vt0p}{env:vt0p
} rdlist_vt_foreach$fwork (x: &a, env: &env): void

fun{a:vt0p}
rdlist_vt_foreach
  {f,r:int} (xs: !dlist_vt (INV(a), f, r)): void
// end of [rdlist_vt_foreach]

fun{
a:vt0p}{env:vt0p
} rdlist_vt_foreach_env
  {f,r:int} (xs: !dlist_vt (INV(a), f, r), env: &env): void
// end of [rdlist_vt_foreach_env]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "dlist_vt_atxt.txt")
%}\
