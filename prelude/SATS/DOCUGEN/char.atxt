#decltitle("\
ATSLIB/prelude/char\
")

(* ****** ****** *)

#declpreamble('\
#para("\
This package contains various function on chars, signed chars and unsigned
chars.
")
')#comment("declpreamble")

(* ****** ****** *)

#declname("+")
#declsynop2("\
#pats2xhtmls("\
overload + with add_char0_int0 of 0
")
")
#declnamesynop("add_char0_int0")

#declname("-")
#declsynop2("\
#pats2xhtmls("\
overload - with sub_char0_int0 of 0
overload - with sub_char0_char0 of 0
")
")
#declnamesynop("sub_char0_int0")
#declnamesynop("sub_char0_char0")

(* ****** ****** *)

#declname("<")
#declsynop2("\
#pats2xhtmls("\
overload < with lt_char0_char0 of 0
overload < with lt_char1_char1 of 20
")
")
#declnamesynop("lt_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is less than that of its second argument.
')
#declnamesynop("lt_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("lt_char0_char0") but it is
assigned a more informative type.
')

#declname("<=")
#declsynop2("\
#pats2xhtmls("\
overload <= with lte_char0_char0 of 0
overload <= with lte_char1_char1 of 20
")
")
#declnamesynop("lte_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is less than or equal to that of its second argument.
')
#declnamesynop("lte_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("lte_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declname(">")
#declsynop2("\
#pats2xhtmls("\
overload > with gt_char0_char0 of 0
overload > with gt_char1_char1 of 20
")
")
#declnamesynop("gt_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is greater than that of its second argument.
')
#declnamesynop("gt_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("gt_char0_char0") but it is
assigned a more informative type.
')

#declname(">=")
#declsynop2("\
#pats2xhtmls("\
overload >= with gte_char0_char0 of 0
overload >= with gte_char1_char1 of 20
")
")
#declnamesynop("gte_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is greater than or equal to that of its second argument.
')
#declnamesynop("gte_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("gte_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declname("=")
#declsynop2("\
#pats2xhtmls("\
overload = with eq_char0_char0 of 0
overload = with eq_char1_char1 of 20
")
")
#declnamesynop("eq_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is equal to that of its second argument.
')
#declnamesynop("eq_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("eq_char0_char0") but it is
assigned a more informative type.
')

#declname("!=")
#declsynop2("\
#pats2xhtmls("\
overload != with neq_char0_char0 of 0
overload != with neq_char1_char1 of 20
")
")
#declnamesynop("neq_char0_char0")
#decldescrpt('\
This function returns true if and only if the ascii code of its first
argument is unequal to that of its second argument.
')
#declnamesynop("neq_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("neq_char0_char0") but it is
assigned a more informative type.
')

(* ****** ****** *)

#declname("compare")
#declsynop2("\
#pats2xhtmls("\
overload compare with compare_char0_char0 of 0
overload compare with compare_char1_char1 of 20
")
")

#declnamesynop("compare_char0_char0")
#decldescrpt('\

This function returns ~1, 0, and 1 if if the ascii code of its first
argument is less than, equal to, and greater than that of its second
argument.

')
#declnamesynop("compare_char1_char1")
#decldescrpt('\
This function does the same as #dyncode("compare_char0_char0") but it is
assigned a more informative type.
')


(* ****** ****** *)

#declname("isalpha")
#declsynop2("\
#pats2xhtmls("\
symintr isalpha
overload isalpha with isalpha_int
overload isalpha with isalpha_char
")
")
#declnamesynop("isalpha_int")
#decldescrpt("
This function directly corresponds to the libc-function isalpha.
")
#declnamesynop("isalpha_char")
#decldescrpt("
This function is a slight variant of #dyncode("isalpha_int").
")

#declname("isalnum")
#declsynop2("\
#pats2xhtmls("\
symintr isalnum
overload isalnum with isalnum_int
overload isalnum with isalnum_char
")
")
#declnamesynop("isalnum_int")
#decldescrpt("
This function directly corresponds to the libc-function isalnum.
")
#declnamesynop("isalnum_char")
#decldescrpt("
This function is a slight variant of #dyncode("isalnum_int").
")

#declname("isascii")
#declsynop2("\
#pats2xhtmls("\
symintr isascii
overload isascii with isascii_int
overload isascii with isascii_char
")
")
#declnamesynop("isascii_int")
#decldescrpt("
This function directly corresponds to the libc-function isascii.
")
#declnamesynop("isascii_char")
#decldescrpt("
This function is a slight variant of #dyncode("isascii_int").
")

(* ****** ****** *)

#declname("isblank")
#declsynop2("\
#pats2xhtmls("\
symintr isblank
overload isblank with isblank_int
overload isblank with isblank_char
")
")
#declnamesynop("isblank_int")
#decldescrpt("
This function directly corresponds to the libc-function isblank.
")
#declnamesynop("isblank_char")
#decldescrpt("
This function is a slight variant of #dyncode("isblank_int").
")

#declname("isspace")
#declsynop2("\
#pats2xhtmls("\
symintr isspace
overload isspace with isspace_int
overload isspace with isspace_char
")
")
#declnamesynop("isspace_int")
#decldescrpt("
This function directly corresponds to the libc-function isspace.
")
#declnamesynop("isspace_char")
#decldescrpt("
This function is a slight variant of #dyncode("isspace_int").
")

(* ****** ****** *)

#declname("iscntrl")
#declsynop2("\
#pats2xhtmls("\
symintr iscntrl
overload iscntrl with iscntrl_int
overload iscntrl with iscntrl_char
")
")
#declnamesynop("iscntrl_int")
#decldescrpt("
This function directly corresponds to the libc-function iscntrl.
")
#declnamesynop("iscntrl_char")
#decldescrpt("
This function is a slight variant of #dyncode("iscntrl_int").
")

(* ****** ****** *)

#declname("isdigit")
#declsynop2("\
#pats2xhtmls("\
symintr isdigit
overload isdigit with isdigit_int
overload isdigit with isdigit_char
")
")
#declnamesynop("isdigit_int")
#decldescrpt("
This function directly corresponds to the libc-function isdigit.
")
#declnamesynop("isdigit_char")
#decldescrpt("
This function is a slight variant of #dyncode("isdigit_int").
")

#declname("isxdigit")
#declsynop2("\
#pats2xhtmls("\
symintr isxdigit
overload isxdigit with isxdigit_int
overload isxdigit with isxdigit_char
")
")
#declnamesynop("isxdigit_int")
#decldescrpt("
This function directly corresponds to the libc-function isxdigit.
")
#declnamesynop("isxdigit_char")
#decldescrpt("
This function is a slight variant of #dyncode("isxdigit_int").
")

(* ****** ****** *)

#declname("isgraph")
#declsynop2("\
#pats2xhtmls("\
symintr isgraph
overload isgraph with isgraph_int
overload isgraph with isgraph_char
")
")
#declnamesynop("isgraph_int")
#decldescrpt("
This function directly corresponds to the libc-function isgraph.
")
#declnamesynop("isgraph_char")
#decldescrpt("
This function is a slight variant of #dyncode("isgraph_int").
")

#declname("isprint")
#declsynop2("\
#pats2xhtmls("\
symintr isprint
overload isprint with isprint_int
overload isprint with isprint_char
")
")
#declnamesynop("isprint_int")
#decldescrpt("
This function directly corresponds to the libc-function isprint.
")
#declnamesynop("isprint_char")
#decldescrpt("
This function is a slight variant of #dyncode("isprint_int").
")

#declname("ispunct")
#declsynop2("\
#pats2xhtmls("\
symintr ispunct
overload ispunct with ispunct_int
overload ispunct with ispunct_char
")
")
#declnamesynop("ispunct_int")
#decldescrpt("
This function directly corresponds to the libc-function ispunct.
")
#declnamesynop("ispunct_char")
#decldescrpt("
This function is a slight variant of #dyncode("ispunct_int").
")

(* ****** ****** *)

#declname("islower")
#declsynop2("\
#pats2xhtmls("\
symintr islower
overload islower with islower_int
overload islower with islower_char
")
")
#declnamesynop("islower_int")
#decldescrpt("
This function directly corresponds to the libc-function islower.
")
#declnamesynop("islower_char")
#decldescrpt("
This function is a slight variant of #dyncode("islower_int").
")

#declname("isupper")
#declsynop2("\
#pats2xhtmls("\
symintr isupper
overload isupper with isupper_int
overload isupper with isupper_char
")
")
#declnamesynop("isupper_int")
#decldescrpt("
This function directly corresponds to the libc-function isupper.
")
#declnamesynop("isupper_char")
#decldescrpt("
This function is a slight variant of #dyncode("isupper_int").
")

(* ****** ****** *)

#declname("toascii")
#declsynop2("\
#pats2xhtmls("\
symintr toascii
overload toascii with toascii_int
overload toascii with toascii_char
")
")
#declnamesynop("toascii_int")
#decldescrpt("
This function directly corresponds to the libc-function toascii.
")
#declnamesynop("toascii_char")
#decldescrpt("
This function is a slight variant of #dyncode("toascii_int").
")

(* ****** ****** *)

#declname("tolower")
#declsynop2("\
#pats2xhtmls("\
symintr tolower
overload tolower with tolower_int
overload tolower with tolower_char
")
")
#declnamesynop("tolower_int")
#decldescrpt("
This function directly corresponds to the libc-function tolower.
")
#declnamesynop("tolower_char")
#decldescrpt("
This function is a slight variant of #dyncode("tolower_int").
")

(* ****** ****** *)

#declname("toupper")
#declsynop2("\
#pats2xhtmls("\
symintr toupper
overload toupper with toupper_int
overload toupper with toupper_char
")
")
#declnamesynop("toupper_int")
#decldescrpt("
This function directly corresponds to the libc-function toupper.
")
#declnamesynop("toupper_char")
#decldescrpt("
This function is a slight variant of #dyncode("toupper_int").
")

(* ****** ****** *)

(* end of [char.atxt] *)
