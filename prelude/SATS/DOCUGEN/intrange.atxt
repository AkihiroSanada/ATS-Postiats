(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/intrange")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/intrange\
")

(* ****** ****** *)

#declpreamble('\

#para("\
")

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("intrange_foreach__cont")
#decldescrpt('\

The default implementation of this function always returns true.  ')

#declnamesynop("intrange_foreach__fwork")

#declnamesynop("intrange_foreach")
#decldescrpt('\

Given two integers l and r, this function enumerates the integers between l
and r-1, inclusively, and then applies to each enumerated integer the
function implemented by #dyncode("intrange_foreach__fwork"). The enumeration
process stops if the function implemented by #dyncode("intrange_foreach__cont")
returns false, and the integer value returned by #dyncode("intrange_foreach")
indicates the point of the stoppage. ')

#declnamesynop("intrange_foreach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("intrange_foreach")
except for taking an additional argument that serves as an environment.  ')

#declexample('\

The following code implements a function for constructing a list
of randomly generated values:

#pats2xhtmld_tryit('\
//
staload R = "contrib/atshwxi/testing/SATS/randgen.sats"
//
fun{a:t@ype}
list_randgen
  (n: int): List0_vt (a) = let
viewtypedef env = List0_vt (a)
implement
intrange_foreach__fwork<env>
  (_, env) = env := list_vt_cons ($R.randgen<a> (), env)
// endof [intrange_foreach__fwork]
var res: env = list_vt_nil ()
val _(*n*) = intrange_foreach_env<env> (0, n, res)
in
  res
end // end of [list_randgen]
')
')

(* ****** ****** *)

#declnamesynop("intrange_rforeach__cont")
#decldescrpt('\

The default implementation of this function always returns true.  ')

#declnamesynop("intrange_rforeach__fwork")

#declnamesynop("intrange_rforeach")
#decldescrpt('\

Given two integers l and r, this function enumerates in the reverse order
the integers between l and r-1, inclusively, and then applies to each
enumerated integer the function implemented by
#dyncode("intrange_rforeach__fwork"). The enumeration process stops if the
function implemented by #dyncode("intrange_rforeach__cont") returns false,
and the return integer value of #dyncode("intrange_rforeach") indicates the
point of the stoppage. ')

#declnamesynop("intrange_rforeach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("intrange_rforeach")
except for taking an additional argument that serves as an environment.  ')

(* ****** ****** *)

(* end of [bool.atxt] *)
