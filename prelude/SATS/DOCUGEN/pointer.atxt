(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("HTML/TRYIT/pointer")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/pointer\
")

(* ****** ****** *)

#declpreamble('\

#para("\

This package contains various functions on pointers such as those
for supporting direct memory access and those for performing pointer
arithmetic.  ")

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("ptr_get_index")
#decldescrpt('\
The purpose of calling this proof function is to introduce a static
variable that binds to the index of the type assigned to the argument of
the function.
')
#declexample('\
Let p be a value of the type #stacode("ptr(L)") for some L. Then the
following line of code initiates a binding between l and L:
#pats2xhtmld('\
prval [l:addr] PTREQ () = ptr_get_index (p)\
')\
')

(* ****** ****** *)

#declnamesynop("ptr0_is_null")
#decldescrpt('\
This function returns true if and only if its argument is the null pointer.
')

#declnamesynop("ptr0_isnot_null")
#decldescrpt('\
This function returns true if and only if its argument is not the null pointer.
')

(* ****** ****** *)

#declnamesynop("ptr1_is_null")
#decldescrpt('\

This function does the same as #dyncode("ptr0_is_null") but is given a more
informative type.  ')

#declnamesynop("ptr1_isnot_null")
#decldescrpt('\

This function does the same as #dyncode("ptr0_isnot_null") but is given a more
informative type.  ')

(* ****** ****** *)

(* end of [pointer.atxt] *)
