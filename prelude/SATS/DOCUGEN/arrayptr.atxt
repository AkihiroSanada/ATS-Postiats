(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_arrayptr")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/arrayptr\
")

(* ****** ****** *)

#declpreamble('\

#para('\

This package contains some common functions for creating/freeing and
manipulating arrayptr-values.

')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("arrayptr_encode")

(* ****** ****** *)

#declnamesynop("arrayptr2ptr")
#declnamesynop("arrayptrout2ptr")

(* ****** ****** *)

#declnamesynop("arrayptr_takeout")
#declnamesynop("arrayptr_addback")

(* ****** ****** *)

#declnamesynop("arrayptr_make_elt")
#decldescrpt("\

This function creates an arrayptr-value of a given size
(first argument) and then initializes it with a given value
(second argument) of some nonlinear type.

")

(* ****** ****** *)

#declnamesynop("arrayptr_make_intrange")
#decldescrpt("\

This function creates an arrayptr-value of size r-l that contains the
integers from l until r-1, inclusive.

")

(* ****** ****** *)

#declnamesynop("arrayptr_make_arrpsz")
#decldescrpt("\

This function, which overloads the symbol #dyncode("arrayptr"), turns an
arrpsz-value (arrayptr-with-size) into an arrayptr-value. It can be
conveniently called to build an array of fixed size.

")
#declexample("\

The following code builds an array of digits, prints them out and then
frees the array:

#pats2xhtmld_tryit('\
implement
main () = 0 where {
  val out = stdout_ref
  val A = arrayptr$arrpsz{int} (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  val () = fprint_arrayptr_sep<int> (out, A, g1int2uint(10), ", ")
  val () = arrayptr_free (A)
  val () = fprint_newline (out)
} // end of [main]
')
")

(* ****** ****** *)

#declnamesynop("arrayptr_make_list")
#decldescrpt("\

This function creates an arrayptr-value of a given size n (first argument)
and then initializes it with a given list (second argument) of length n.

")

#declnamesynop("arrayptr_make_list_vt")
#decldescrpt("\

This function creates an arrayptr-value of a given size n (first argument)
and then initializes it with a given linear list (second argument) of
length n. Note that the linear list is consumed after the function returns.

")

(* ****** ****** *)

#declnamesynop("arrayptr_make_uninitized")
#decldescrpt("\

This function creates an uninitialized arrayptr-value of a given size.

")

(* ****** ****** *)

#declnamesynop("fprint_arrayptr_sep")
#decldescrpt("\

This function prints the elements in a given array to the output channel
provided as its first argument, interspersing the string #dyncode('sep')
between the printed array elements. Note that printing each array element is
handled by calling the function #dyncode("fprint_ref").

")

(* ****** ****** *)

#declname("arrayptr_get_at")
#decldescrpt('\
#pats2xhtmls("\
overload arrayptr_get_at with arrayptr_get_at_gint
overload arrayptr_get_at with arrayptr_get_at_guint
")\
')
#declnamesynop("arrayptr_get_at_gint")
#decldescrpt("\

This function reads out the nonlinear value stored at cell i of the array
associated with its first argument.  ")

#declnamesynop("arrayptr_get_at_guint")
#decldescrpt('\

This function, which overloads the symbol #dyncode("[]"), is like
#dyncode("arrayptr_get_at_gint") except that the index is unsigned.  ')

(* ****** ****** *)

#declname("arrayptr_set_at")
#decldescrpt('\
#pats2xhtmls("\
overload arrayptr_set_at with arrayptr_set_at_gint
overload arrayptr_set_at with arrayptr_set_at_guint
")\
')
#declnamesynop("arrayptr_set_at_gint")
#decldescrpt("\

This function writes a nonlinear value x to cell i of the array associated
with its first argument.  ")

#declnamesynop("arrayptr_set_at_guint")
#decldescrpt('\

This function, which overloads the symbol #dyncode("[]"), is like
#dyncode("arrayptr_set_at_gint") except that the index is unsigned.  ')

(* ****** ****** *)

#declname("arrayptr_exch_at")
#decldescrpt('\
#pats2xhtmls("\
overload arrayptr_exch_at with arrayptr_exch_at_gint
overload arrayptr_exch_at with arrayptr_exch_at_guint
")\
')
#declnamesynop("arrayptr_exch_at_gint")
#decldescrpt("\

This function exchanges the content of cell i of the array associated with
its first argument and that of the variable x (its third argument). Note
that the type for these contents can be linear. ")

#declnamesynop("arrayptr_exch_at_guint")
#decldescrpt('\

This function is like #dyncode("arrayptr_exch_at_gint") except that the
index is unsigned.  ')

(* ****** ****** *)

#declnamesynop("arrayptr_free")
#decldescrpt("\
This function frees the memory occupied by a given arrayptr-value,
which includes both the memory for the structure of this value and
the memory for the array associated with it.
")

(* ****** ****** *)

#declnamesynop("arrayptr_foreach")
#decldescrpt("

This function traverses the array associated with a given arrayptr-value
from left to right, applying the function implemented by
#dyncode("arrayptr_foreach__fwork") to each cell in the array.  ")

#declnamesynop("arrayptr_foreach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("arrayptr_foreach")
except for taking an additional argument that serves as an environment (for
recording changes).  ')

#declexample('\

The following code creates an array of integers, computes the sum of the
integers in the created array and then frees it.

#pats2xhtmld_tryit('\
implement
main () = let
//
val N = 10
val asz = g1int2uint (N)
val A = arrayptr_make_intrange (0, N)
//
var ans: int = 0
implement
array_foreach__fwork<int><int> (x, env) = env := env + x
val _(*ignored*) = arrayptr_foreach_env<int><int> (A, asz, ans)
//
val () = arrayptr_free (A)
//
val () = assert (ans = N*(N-1)/2)
//
in
  0(*normal*)
end // end of [main]
')')

#declnamesynop("arrayptr_foreach_funenv")
#decldescrpt("\

This function is like #dyncode("arrayptr_foreach") except that the function
to be applied to each array cell is provided as an argument.  ")

#declnamesynop("arrayptr_foreach_fun")
#decldescrpt("\

This function is a special case of #dyncode("arrayptr_foreach_funenv") in
that the provided function does not take an argument as its environment.

")

(* ****** ****** *)

#declnamesynop("arrayptr_rforeach")
#declnamesynop("arrayptr_rforeach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("arrayptr_rforeach")
except for taking an additional argument that serves as an environment.  ')

(* ****** ****** *)

#declnamesynop("arrayptr_initize")

(* ****** ****** *)

#declnamesynop("arrayptr_uninitize")

(* ****** ****** *)

(* end of [arrayptr.atxt] *)
