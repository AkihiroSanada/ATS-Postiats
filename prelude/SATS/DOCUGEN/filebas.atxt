(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/filebas")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/filebas\
")

(* ****** ****** *)

#declpreamble('\
#para("\

The functions declared in this package are mostly provided for the sake of
convenience.  For full-fledged IO support, please see
[ATSHOME/libc/SATS/stdio.sats].

") ')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("test_file_exists")
#decldescrpt('\
This function tests whether a given path refers to a file in existence.
')

(* ****** ****** *)

#declnamesynop("test_file_mode")
#decldescrpt("\

This function calls [stat] to obtain the mode of a given file and then
applies its second argument f to the mode to return an integer: ~1/0/1
means error/false/true, respectively.

")
#declnamesynop("test_file_isblk")
#declnamesynop("test_file_ischr")
#declnamesynop("test_file_isdir")
#declnamesynop("test_file_isfifo")
#declnamesynop("test_file_isreg")

(* ****** ****** *)

#declnamesynop("fileref_open_exn")
#decldescrpt('\

This function calls the libc-function fclose (declared in stdio) to create
a handle for the file referred to by its first argument #dyncode("path")
and then set the mode of the created handle according to its second
argument #dyncode("fm"). In case of a failure, a fatal non-catchable
exception is raised.

')

#declnamesynop("fileref_open_opt")
#decldescrpt('\

This function is the optional version of #dyncode("fileref_open_exn"): The
returned value is an option that indicates whether a call to
#dyncode("fileref_open_opt") successfully yields a file handle or not.

')

(* ****** ****** *)

#declnamesynop("fileref_close")
#decldescrpt('\

This function calls the libc-function fclose (declared in stdio) to close a
given file handle. Note that #dyncode("fileref_close") does not report any
errors. ')

(* ****** ****** *)

#declnamesynop("fileref_flush")
#decldescrpt('\

This function calls the libc-function fflush (declared in stdio) to flush a
given file handle. Note that #dyncode("fileref_flush") does not report any
errors.

')

(* ****** ****** *)

#declnamesynop("fileref_getc")
#decldescrpt('\

This function reads a char from a given file handle. If a
negative integer (EOF) is returned, then it is an indication
of error.

')

(* ****** ****** *)

#declnamesynop("fileref_putc")
#decldescrpt('\

This function writes a char to a given file handle. Note that it does not
report any errors.

')

(* ****** ****** *)

#declnamesynop("fileref_puts")
#decldescrpt('\

This function writes a string to a given file handle. Note that it does
not report any errors. The following code gives a reference implementation
of the function:

#pats2xhtmld_tryit('\
implement
fileref_puts (out, str) = let
//
val str = string1_of_string0 (str)
//
implement{env}
string_foreach__cont (c, env) = true
implement{env}
string_foreach__fwork (c, env) = fileref_putc (out, c)
//
val _ = string_foreach (str)
//
in
  // nothing
end // end of [fileref_puts]
')\

The actual implementation of #dyncode("fileref_fputs") in ATSLIB directly
calls the libc-function fputs declared in stdio.

')

(* ****** ****** *)

#declnamesynop("fileref_is_eof")
#decldescrpt('\
This function tests whether the end of a given file handle is reached.
')
#declexample('\

The following code gives a naive implementation of file-copying:

#pats2xhtmld_tryit('\
fun fprint_fileref (
  out: FILEref, inp: FILEref
) : void = (
  if ~fileref_is_eof(inp) then let
    val () = fileref_putc (out, fileref_getc (inp))
  in
    fprint_fileref (out, inp)
  end else () // end of [if]
) // end of [fprint_fileref]

implement
main () = let
  val () = fprint_fileref (stdout_ref, stdin_ref) in 0(*normal*)
end // end of [main]
')
')

(* ****** ****** *)

#declnamesynop("fileref_load_type")

(* ****** ****** *)

#declnamesynop("fileref_load")
#decldescrpt('\

This function loads a value from a given file handle into a given variable,
and returns a boolean to indicate whether loading is successful or not. It
is only implemented for certain template arguments.

')

#declnamesynop("fileref_load_int")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a integer.
')
#declnamesynop("fileref_load_char")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a character.
')
#declnamesynop("fileref_load_double")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a double-precision float.
')
#declnamesynop("fileref_load_string")
#decldescrpt('\
This function is a specific instance of #dyncode("fileref_load") for
loading a doubly-quoted string.
')

(* ****** ****** *)

#declnamesynop("fileref_get_optval")
#decldescrpt('\

This function reads a value from a given file handle. It is only
implemented for certain template arguments.  ')

(* ****** ****** *)

#declnamesynop("fileref_get_line_charlst")
#decldescrpt('\

This function reads out chars from a given file handle until a newline
symbol or EOF is reached and it then returns a linear list of the chars in
the order they were read. Note that the newline symbol is not included in
the chars returned.  ')

(* ****** ****** *)

#declnamesynop("fileref_get_line_string")
#decldescrpt('\

This function is a specialization of #dyncode("fileref_get_line_string"),
and its implementation is given as follows:

#pats2xhtmld_tryit('\
implement
fileref_get_line_string
  (filr) = let
  var n: size_t // uninitialized
  var ending: int // uninitialized
  val str = fileref_get_line_string_main (filr, n, ending)
  prval () = lemma_strnptr_param (str)
in
  strptr_of_strnptr (str)
end // end of [fileref_get_line_string]
')
')

#declnamesynop("fileref_get_line_string_main")

(* ****** ****** *)

#declnamesynop("fileref_get_file_charlst")
#decldescrpt('\

This function reads out chars from a given file handle until none is left
and it then returns a linear list of the chars in the order they were read.

')
#declexample('\

The following code prints out the content of a given file backwardly:

#pats2xhtmld_tryit('\
fun fprint_fileref_back
  (out: FILEref, inp: FILEref): void = let
  fun loop (cs: List_vt (char)):<cloref1> void =
    case+ cs of
    | ~list_vt_cons
        (c, cs) => let
        val () = fileref_putc (out, c) in loop (cs)
      end // end of [list_vt_cons]
    | ~list_vt_nil () => ()
  // end of [loop]
  val cs = fileref_get_file_charlst (inp)
in
  loop (list_vt_reverse (cs))
end // end of [fprint_fileref_back]

implement
main () = let
  val () = fprint_fileref_back (stdout_ref, stdin_ref) in 0(*normal*)
end // end of [main]
')
')

(* ****** ****** *)

#declnamesynop("fileref_put_charlst")
#decldescrpt('\

This function prints out the chars in its second argument to the file
handle provided as its first argument. Note that it does not report any
errors. ')

#declexample("\

The following code removes every empty line in a given file:

#pats2xhtmld_tryit("\
fun remove_empty_lines (
  out: FILEref, inp: FILEref, isfst: bool
) : void = let
  val EOL = '\\\n'
in
//
if ~fileref_is_eof (inp) then let
  var isfst: bool = isfst
  val cs = fileref_get_line_charlst (inp)
  val iscons = list_vt_is_cons (cs)
  val () = if iscons then {
    val () = if isfst then (isfst := false) else fileref_putc (out, EOL)
    val () = fileref_put_charlst (out, cs)
  } // end of [if] // end of [val]
  val () = list_vt_free (cs)
in
  remove_empty_lines (out, inp, isfst)
end else () // end of [if]
//
end // end of [remove_empty_lines]

implement
main () = let
  val () = remove_empty_lines (stdout_ref, stdin_ref, true(*isfst*))
in
  0(*normal*)
end // end of [main]
")

Clearly, this is a wasteful and inefficient way of removing empty lines.

")

(* ****** ****** *)

(* end of [filebas.atxt] *)
