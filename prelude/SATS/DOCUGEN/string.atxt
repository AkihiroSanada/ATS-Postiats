(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/string")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/string\
")

(* ****** ****** *)

#declpreamble('\
#para("\

This package contains various common functions for processing (immutable)
strings.

") ')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("string_index_p")
#decldescrpt('\

Given a string str of length n and an index i,
#stacode("string_index_p(n, i, c)") means that str[i] in the string is
of the type #stacode("char(c)").  If str[i] equals the null character, then
i equals n.

')

(* ****** ****** *)

#declnamesynop("string_sing")
#decldescrpt('\
This function constructs a singleton string consisting of its char argument.
')

(* ****** ****** *)

#declnamesynop("string_make_list")
#decldescrpt('\

This function returns a linear string consisting of the same sequence of
non-null chars in its argument.  ')
#declexample('\

The following code implements a function that returns a linear string
consisting of the reverse of the sequence of chars in its argument:

#pats2xhtmld_tryit('\
staload UN = "prelude/SATS/unsafe.sats"
//
fun string_reverse
  {n:int} .<>. (
  str: string(n)
) : strnptr(n) = let
//
  prval () = lemma_string_param (str)
//
  val cs = string_explode (str)
  val cs = list_vt_reverse (cs)
  val res = string_make_list ($UN.linlst2lst(cs))
  val () = list_vt_free (cs)
in
  res
end // end of [string_reverse]
')
')

#declnamesynop("string_make_listlen")
#decldescrpt('\

This function does the same as #dyncode("string_make_list") except for
taking the length of the given string as the second argument.  ')

(* ****** ****** *)

#declnamesynop("string_make_list_rev")
#decldescrpt('\

This function returns a linear string consisting of the reverse of the
sequence of non-null chars in its argument.  ')

#declnamesynop("string_make_listlen_rev")
#decldescrpt('\

This function does the same as #dyncode("string_make_list_rev") except for
taking the length of the given string as the second argument.  ')

(* ****** ****** *)

#declnamesynop("string_make_substring")

(* ****** ****** *)

#declnamesynop("string_is_empty")
#decldescrpt('\
This funtion returns true if and only if its string argument is empty.
')

#declnamesynop("string_isnot_empty")
#decldescrpt('\
This funtion returns true if and only if its string argument is non-empty.
')

(* ****** ****** *)

#declname("string_is_atend")
#declsynop2("
#pats2xhtmls('\
symintr string_is_atend
overload string_is_atend with string_is_atend_int
overload string_is_atend with string_is_atend_uint
')
")

(* ****** ****** *)

#declnamesynop("string_is_atend_int")
#decldescrpt('\

Given a string of length n and an index i &lt;= n, this function returns true
if and only if i equals n.  ')

#declnamesynop("string_is_atend_uint")
#decldescrpt('\

This function does the same as #dyncode("string_is_atend_int") except for
taking an unsigned integer as the string index.  ')

(* ****** ****** *)

#declname("string_get_at")
#declsynop2("
#pats2xhtmls('\
symintr string_get_at
overload string_get_at with string_get_at_int
overload string_get_at with string_get_at_uint
')
")

(* ****** ****** *)

#declnamesynop("string_get_at_int")
#decldescrpt('\

Given a string of length n and an index i &lt; n, this function returns the
char stored in cell i of the string.  Note that the returned character is
non-null. ')

#declnamesynop("string_get_at_uint")
#decldescrpt('\

This function does the same as #dyncode("string_get_at_int") except for
taking an unsigned signed integer as the string index.  ')

(* ****** ****** *)

#declname("string_test_at")
#declsynop2("
#pats2xhtmls('\
symintr string_test_at
overload string_test_at with string_test_at_int
overload string_test_at with string_test_at_uint
')
")

(* ****** ****** *)

#declnamesynop("string_test_at_int")
#decldescrpt('\

Given a string of length n and an index i &lt;= n, this function returns a
char c paired with a proof stating that i &lt; n holds if and only if c is
non-null. ')

#declnamesynop("string_test_at_uint")
#decldescrpt('\

This function does the same as #dyncode("string_test_at_int") except for
taking an unsigned integer as the string index.  ')

#declexample('\

The following code implements a function for computing the length of a
given string:

#pats2xhtmld_tryit('\
fun string1_length
  {n:int} .<>.
  (str: string n): size_t (n) = let
//
\#define NUL \'\\\000\'
//
prval () = lemma_string_param (str)
//
fun loop
  {i:nat | i <= n} .<n-i>. (
  str: string n, i: size_t i
) :<> size_t (n) = let
  val (pf | c) = string_test_at_uint (str, i)
in
  if c != NUL then let
    prval string_index_p_gt () = pf in loop (str, succ(i))
  end else let
    prval string_index_p_eq () = pf in i // HX: i equals n
  end // end of [if]
end // end of [loop]
//
in
  loop (str, g1int2uint (0))
end // end of [string1_length]
')
')

(* ****** ****** *)

#declnamesynop("lt_string_string")
#decldescrpt('\

This function returns true if and only if its first argument is less than
its second argument according to the lexicographic ordering on signed
characters.  ')

#declnamesynop("lte_string_string")
#decldescrpt('\

This function returns true if and only if its first argument is less than
or equal to its second argument according to the lexicographic ordering on
signed characters.  ')

(* ****** ****** *)

#declnamesynop("gt_string_string")

#decldescrpt('\

This function returns true if and only if its first argument is greater
than its second argument according to the lexicographic ordering on
signed characters.  ')

#declnamesynop("gte_string_string")

#decldescrpt('\

This function returns true if and only if its first argument is greater
than or equal to its second argument according to the lexicographic
ordering on signed characters.  ')

(* ****** ****** *)

#declnamesynop("eq_string_string")

#decldescrpt('\

This function returns true if and only if its first argument is equal to
its second argument according to the lexicographic ordering on
signed characters. ')

#declnamesynop("neq_string_string")
#decldescrpt('\

This function returns true if and only if its first argument is unequal to
its second argument according to the lexicographic ordering on
signed characters. ')

(* ****** ****** *)

#declnamesynop("compare_string_string")
#decldescrpt('\

This function returns ~1, 0 and 1 if and only if its first argument is less
than, equal to and greater than its second argument according to the
lexicographic ordering on signed characters. ')

')

(* ****** ****** *)

#declnamesynop("strcmp")
#decldescrpt('\

This function returns ~1,0 and 1 to indicate that its first string argument
is less than, equal to and greater than its second string argument,
respectively, where the comparison is based on the lexicographic ordering
on signed chars.  ')

#declnamesynop("strintcmp")
#decldescrpt('\

This function returns ~1,0 and 1 to indicate that the length of its first
string argument is less than, equal to and greater than the value of its
second integer argument, respectively.  ')

#declnamesynop("strlencmp")
#decldescrpt('\

This function returns ~1,0 and 1 to indicate that the length of its first
string argument is less than, equal to and greater than the length of its
second string argument, respectively.  ')

(* ****** ****** *)

#declnamesynop("fprint_string")
#decldescrpt('\

This function prints a string (its second argument) to a given output
channel (its first argument). The implementation of this function calls the
libc-function fputs declared in [stdio.h]. ')

(* ****** ****** *)

#declnamesynop("strchr")
#decldescrpt('\

Given a string str and a char c0, this function returns the index of the
first char in str that equals c0 if there is such a char.  Otherwise, it
returns ~1 (negative 1).  The implementation of this function in ATSLIB
calls the libc-function of the same name (declared in [string.h]).
')

#declnamesynop("strrchr")
#decldescrpt('\

Given a string str and a char c0, this function returns the index of the
last char in str that equals c0 if there is such a char.  Otherwise, it
returns ~1 (negative 1).  The implementation of this function in ATSLIB
calls the libc-function of the same name (declared in [string.h]).  ')

#declnamesynop("strstr")
#decldescrpt('\

Given a string str1 and a string str2, this function returns the index of
the first substring in str1 that equals str2 if there is such a
substring. Otherwise, it returns ~1 (negative 1).  Note that the function
returns 0 in the special case where str2 is empty, The implementation of
this function in ATSLIB calls the libc-function of the same name (declared
in [string.h]).  ')

(* ****** ****** *)

#declnamesynop("strspn")
#declnamesynop("strcspn")

(* ****** ****** *)

#declnamesynop("string_index")
#decldescrpt('\

This function is the same as #dyncode("strchr") except for requiring that
its second argument be a non-null char.  The implementation of this
function in ATSLIB calls the libc-function of the same name (declared in
[strings.h]).  ')

#declnamesynop("string_rindex")
#decldescrpt('\

This function is the same as #dyncode("strrchr") except for requiring that
its second argument be a non-null char.  The implementation of this
function in ATSLIB calls the libc-function of the same name (declared in
[strings.h]).  ')

(* ****** ****** *)

#declname("string_length")
#declsynop2("
#pats2xhtmld('\
symintr string_length
overload string_length with string0_length of 0
overload string_length with string1_length of 1
')
")

(* ****** ****** *)

#declnamesynop("string0_length")
#decldescrpt('\

This function, which overloads the symbol #dyncode("string_length"), computes
the length of a given string.  ')

#declnamesynop("string1_length")
#decldescrpt('\

This function, which overloads the symbol #dyncode("string_length"), does the
same as #dyncode("string0_length") but is assigned a more informative type.
')

(* ****** ****** *)

#declnamesynop("string0_copy")
#declnamesynop("string1_copy")

#declnamesynop("string0_append")
#decldescrpt('\

This function, which overloads the symbol #dyncode("string_append"),
returns a linear string equal to the concatenation of its two string
arguments. ')

#declnamesynop("string1_append")
#decldescrpt('\

This function, which overloads the symbol #dyncode("string_append"), does
the same as #dyncode("string0_append") but is assigned a more informative
type.  ')

(* ****** ****** *)

#declnamesynop("stringlst_concat")
#decldescrpt("\

This function returns a linear string that is the concatenation of the
strings in its argument.  ")

#declexample('\

The following code forms the string "Hello!" by concatenating six singleton
strings and then prints it (plus a newline) onto the standard output channel:

#pats2xhtmld_tryit('\
implement
main () = let
  val xs = $lst{string}
    ("H", "e", "l", "l", "o", "!")
  val hello = stringlst_concat (xs)
  val () = fprint_strptr (stdout_ref, hello)
  val () = fprint_newline (stdout_ref)
  val () = strptr_free (hello)
in
  0(*normal*)
end // end of [main]
')\

Note that the created string is freed before the code exits.

')

(* ****** ****** *)

#declnamesynop("string_explode")
#decldescrpt('\

Given a string of length n, this function returns a linear list
such that element i in the list equals char i in the string for
0 &lt;= i &lt; n.

')

(* ****** ****** *)

#declnamesynop("string_tabulate__fwork")
#declnamesynop("string_tabulate")
#decldescrpt('\

Given an integer n, this function returns a string of length n such that
char i in the string equals f(i) for 0 &lt;= i &lt n, where f is the
function implemented by #dyncode("string_tabulate__fwork").

')
#declexample('\

The following code gives an implementation of
#dyncode("string_make_substring"), which constructs a linear string
consisting of the chars in a segment of a given string:

#pats2xhtmld_tryit('\
//
staload UN = "prelude/SATS/unsafe.sats"
//
implement
string_make_substring
  {n}{st,ln} (str, st, ln) = let
//
implement
string_tabulate__fwork (i) = let
  val i = $UN.cast{sizeLt(ln)} (i) in str[st+i]
end // end of [string_tabulate__fwork]
//
in
  $effmask_all (string_tabulate (ln))
end // end of [string_make_substring]
')
')

(* ****** ****** *)

#declnamesynop("string_foreach__cont")
#declnamesynop("string_foreach__fwork")

#declnamesynop("string_foreach")
#decldescrpt('\

This function traverses a given string from left to right and applies to
each encountered char the function implemented by
#dyncode("string_foreach__fwork"). The traversal stops if the function
implemented by #dyncode("string_foreach__cont") returns false.  ')

#declexample('\

The following code implements the function #dyncode("strspn") that computes
the length of the longest prefix of a given string consisting of only chars
contained in the second argument of this function:

#pats2xhtmld_tryit('\
implement
strspn (str, accept) = let
//
val accept = string1_of_string0 (accept)
//
implement{env}
string_foreach__cont (c, env) = strchr (accept, c) >= 0
//
in
  $effmask_all (string_foreach<> (str))
end // end of [strspn]
')
')

(* ****** ****** *)

#declnamesynop("string_foreach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("string_foreach")
except for taking an additional argument that serves as an environment.  ')

#declexample('\
The following code implements a function that computes the value of an
unsigned integer represented as a sequence of digits (of base 10):

#pats2xhtmld_tryit('\
fun atoi
  (str: string): int = let
//
val str = string1_of_string0 (str)
//
var env: int = 0
implement
string_foreach__fwork<int>
  (c, env) = env := 10 * env + (c - \'0\')
val _ = string_foreach_env<int> (str, env)
//
in
  env
end // end of [atoi]
')
Note that this function assumes its string argument consisting of
a sequence of digits.
')

(* ****** ****** *)

#declnamesynop("string_rforeach__cont")
#declnamesynop("string_rforeach__fwork")

#declnamesynop("string_rforeach")
#decldescrpt('\

This function traverses a given string from right to left and applies to
each encountered char the function implemented by
#dyncode("string_rforeach__fwork"). The traversal stops if the function
implemented by #dyncode("string_rforeach__cont") returns false.

')
#declexample('\

The following code implements the function #dyncode("strrchr") that finds
the index of the last occurrence of a char in a given string. If there is
no such occurrence, then ~1 (negative 1) is returned.

#pats2xhtmld_tryit('\
implement
strrchr (str, c0) = let
//
implement{env}
string_rforeach__cont (c, env) = c0 != c
val i = $effmask_all (string_rforeach<> (str))
//
in
  if string_is_atend (str, i) then g1int2int(~1) else g1uint2int(i)
end // end of [strrchr]
')
')

(* ****** ****** *)

#declnamesynop("string_rforeach_env")
#decldescrpt('\

This function does essentially the same as #dyncode("string_rforeach")
except for taking an additional argument that serves as an environment.  ')

(* ****** ****** *)

#declnamesynop("stropt_none")
#declnamesynop("stropt_some")

#declnamesynop("stropt_is_none")
#decldescrpt('\

This function tests whether a stropt-value (optional string) is null.  ')

#declnamesynop("stropt_is_some")
#decldescrpt('\

This function tests whether a stropt-value (optional string) is non-null.  ')

#declnamesynop("stropt_unsome")
#decldescrpt('\

This function casts a non-null stropt-value (optional string) to a
string-value.  ')

(* ****** ****** *)

#declnamesynop("stropt_length")
#decldescrpt('\

This function computes the length of a given stropt-value (optional
string). If the argument is the null pointer, then the returned value is ~1
(negative 1).

')

(* ****** ****** *)

#declnamesynop("fprint_stropt")
#decldescrpt('\

This function prints a stropt-value (optional string) to a given output
channel (its first argument). If the stropt-value is not null, then it is
treated as a string. Otherwise, it is treated as the null pointer.

')

(* ****** ****** *)

(* end of [string.atxt] *)
