(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_dlist_vt")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/dlist_vt\
")

(* ****** ****** *)

#declpreamble('\

#para('\

This package contains a variety of common functions for creating/freeing
and manipulating linear lists.  ')

#para('\

The type for a doubly-linked linear list containing N elements of type T is
denoted by #stacode("dlist_vt(T, F, R)"), where T can be linear, and F and
R (satisfying F+R=N) indicate that there F and R elements before and after
the current pointer, respectively. The suffix \"vt\" in the name dlist_vt
stands for viewtype, which is the formal name for linear type in ATS.  Note
that the type constructor #stacode("dlist_vt") is co-variant in its first
argument, that is, #stacode("dlist_vt(T1, F, R)") is a subtype of
#stacode("dlist_vt(T2, F, R)") if T1 is a subtype of T2. The low-level
representation for dlist_vt is the same as that for a standard
doubly-linked list in C, and it is fairly straightforward to implement
functions in C that can directly manipulate doubly linked linear lists in
ATS and vice versa.  ')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("dlist_vt")

(* ****** ****** *)

#declnamesynop("lemma1_dlist_vt_params")
#declnamesynop("lemma2_dlist_vt_params")

(* ****** ****** *)

#declnamesynop("dlist_vt_nil")
#declnamesynop("dlist_vt_sing")
#declnamesynop("dlist_vt_cons")
#declnamesynop("dlist_vt_snoc")

(* ****** ****** *)

#declnamesynop("dlist_vt_is_beg")
#declnamesynop("dlist_vt_is_end")

#declnamesynop("rdlist_vt_is_beg")
#declnamesynop("rdlist_vt_is_end")

(* ****** ****** *)

#declnamesynop("dlist_vt_get")
#declnamesynop("dlist_vt_set")

(* ****** ****** *)

#declnamesynop("dlist_vt_length")
#declnamesynop("rdlist_vt_length")

(* ****** ****** *)

#declnamesynop("dlist_vt_move")
#declnamesynop("rdlist_vt_move")

(* ****** ****** *)

#declnamesynop("dlist_vt_move_end")
#declnamesynop("rdlist_vt_move_end")

(* ****** ****** *)

#declnamesynop("dlist_vt_insert")

(* ****** ****** *)

#declnamesynop("dlist_vt_free")

(* ****** ****** *)

#declnamesynop("dlist_vt_foreach")
#declnamesynop("dlist_vt_foreach_env")

(* ****** ****** *)

#declnamesynop("rdlist_vt_foreach")
#declnamesynop("rdlist_vt_foreach_env")

(* ****** ****** *)

(* end of [dlist_vt.atxt] *)
