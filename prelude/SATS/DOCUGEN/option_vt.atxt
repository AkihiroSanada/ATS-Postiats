(* ****** ****** *)

%{
implement srcfilename_get () = "../option_vt.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_option_vt")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/option_vt\
")

(* ****** ****** *)

#declpreamble('\

#para('\

This package contains some common functions for processing linear
option-values.\

')

#para('\

Please see #myatscodelink("prelude/SATS/option_vt.sats", "option_vt.sats")
and #myatscodelink("prelude/DATS/option_vt.dats", "option_vt.dats") for the
SATS file and DATS file in ATSLIB where the functions in this package are
declared and implemented, respectively.\

')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("option_vt")
#declsynop2("\
#para('\

The full name for the linear option-type constructor #stacode("option_vt")
is #stacode("option_viewt0ype_bool_viewtype"), which is given to the
linear datatype (dataviewtype) declared as follows:

#pats2xhtmls('\
dataviewtype // viewt@ype+: covariant
option_viewt0ype_bool_viewtype
  (a:viewt@ype+, bool) = Some_vt (a, true) of a | None_vt (a, false)
// end of [option_viewt0ype_bool_viewtype]
')')
")
#decldescrpt("\

There are two data constructors #dyncode("Some_vt") and #dyncode("None_vt")
associated with #stacode("option_vt"); the former constructs a null
option-value while the latter takes an element x to construct a non-null
option-value carrying x. ")

#declexample("\

The following code implements a function that combines two given
linear option-values into a single one:

#pats2xhtmld_tryit('\
fun{
a1,a2:t0p
} option_vt_zip {b1,b2:bool} (
  opt1: option_vt (a1, b1), opt2: option_vt (a2, b2)
) : option_vt (@(a1, a2), b1*b2) =
  case+ opt1 of
  | ~Some_vt (x1) => (
    case+ opt2 of
    | ~Some_vt (x2) => Some_vt @(x1, x2) | ~None_vt () => None_vt ()
    )
  | ~None_vt () => let
      val () = option_vt_free (opt2) in None_vt ()
    end // end of [None_vt]
// end of [option_vt_zip]
')
")

(* ****** ****** *)

#declnamesynop("Option_vt")

(* ****** ****** *)

#declnamesynop("option_vt_some")
#decldescrpt('\
This is just the function version of the constructor #dyncode("Some_vt").
')

(* ****** ****** *)

#declnamesynop("option_vt_none")
#decldescrpt('\
This is just the function version of the constructor #dyncode("None_vt").
')

(* ****** ****** *)

#declnamesynop("option_vt_is_some")
#decldescrpt('\
This funtion returns true if and only a linear option-value is formed with
the constructor #dyncode('Some_vt').
')

#declnamesynop("option_vt_is_none")
#decldescrpt('\
This funtion returns true if and only a linear option-value is formed with
the constructor #dyncode('None_vt').
')

(* ****** ****** *)

#declnamesynop("option_vt_unsome")
#decldescrpt('\
This is just the inverse of #dyncode("option_vt_some").
')
#declnamesynop("option_vt_unnone")
#decldescrpt('\
This is just the inverse of #dyncode("option_vt_none").
')

(* ****** ****** *)

#declnamesynop("option_vt_make_opt")
#decldescrpt('\

This function creates a linear option-value according to the optional
content of a given variable.  ')

(* ****** ****** *)

#declnamesynop("option_vt_free")
#decldescrpt('\
This function frees the memory occupied by a linear option-value.
')

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [option_vt.atxt] *)
