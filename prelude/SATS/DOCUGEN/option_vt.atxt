#decltitle("\
ATSLIB/prelude/option_vt\
")

(* ****** ****** *)

#declpreamble('\

#para('\
This package contains some common functions for processing linear
option-values.
')

')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("option_vt")

(* ****** ****** *)

#declnamesynop("option_vt_some")
#decldescrpt('\
This is just the function version of the constructor #dyncode("Some_vt").
')

(* ****** ****** *)

#declnamesynop("option_vt_none")
#decldescrpt('\
This is just the function version of the constructor #dyncode("None_vt").
')

(* ****** ****** *)

#declnamesynop("option_vt_is_some")
#decldescrpt('\
This funtion returns true if and only a linear option-value is formed with
the constructor #dyncode('Some_vt').
')

#declnamesynop("option_vt_is_none")
#decldescrpt('\
This funtion returns true if and only a linear option-value is formed with
the constructor #dyncode('None_vt').
')

(* ****** ****** *)

#declnamesynop("option_vt_unsome")
#decldescrpt('\
This is just the inverse of #dyncode("option_vt_some").
')
#declnamesynop("option_vt_unnone")
#decldescrpt('\
This is just the inverse of #dyncode("option_vt_none").
')

(* ****** ****** *)

#declnamesynop("option_vt_make_opt")
#decldescrpt('\

This function creates a linear option-value according to the optional
content of a given variable.  ')

(* ****** ****** *)

#declnamesynop("option_vt_free")
#decldescrpt('\
This function frees the memory occupied by a linear option-value.
')

(* ****** ****** *)

(* end of [option_vt.atxt] *)
