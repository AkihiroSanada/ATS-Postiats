%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"basics.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_LGPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/basics.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("January, 2013")
*/

#atscode_separator_for_C()

\#ifndef ATSHOME_PRELUDE_BASICS_CATS
\#define ATSHOME_PRELUDE_BASICS_CATS

#atscode_separator_for_C()

\#include <stdio.h>
\#include <stdlib.h>

#atscode_separator_for_C()

ATSinline()
atstype_bool
atspre_eq_int_int
(
  atstype_int x, atstype_int y
)
{
  return (x==y ? atsbool_true : atsbool_false) ;
} /* end of [atspre_eq_int_int] */

#atscode_separator_for_C()

ATSinline()
atstype_string
atspre_argv_get_at
(
  atstype_arrptr argv, atstype_int i
)
{
  return ((atstype_string*)argv)[i] ;
} /* end of [atspre_argv_get_at] */

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_exit
(
  atstype_int status
)
{
  exit(status) ; return ;
} /* endfun */

ATSinline()
atsvoid_t0ype
atspre_exit_errmsg
(
  atstype_int status, atstype_string msg
)
{
  fprintf(
    stderr, "exit(ATS): %s", (char*)msg
  ) ; exit(status) ; return ; // deadcode
} /* endfun */

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_assert_bool
  (atstype_bool b)
{
  if (!b) exit(1) ; return ;
} /* endfun */
\#define atspre_assert_bool0 atspre_assert_bool
\#define atspre_assert_bool1 atspre_assert_bool

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_assert_errmsg_bool
(
  atstype_bool b, atstype_string msg
)
{
  if (!b) {
    fprintf(stderr, "%s", (char*)msg) ; exit(1) ;
  } // end of [if]
  return ;
} /* endfun */
\#define atspre_assert_errmsg_bool0 atspre_assert_errmsg_bool
\#define atspre_assert_errmsg_bool1 atspre_assert_errmsg_bool

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_newline
  (atstype_ref out)
{
  int err = 0 ;
  err += fprintf((FILE*)out, "\n") ; err += fflush((FILE*)out) ;
  return ;
} // end [atspre_fprint_newline]

\#define atspre_print_newline() atspre_fprint_newline(stdout)
\#define atspre_prerr_newline() atspre_fprint_newline(stderr)

#atscode_separator_for_C()

\#endif // ifndef ATSHOME_PRELUDE_BASICS_CATS

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "basics_atxt.txt")
%}\
