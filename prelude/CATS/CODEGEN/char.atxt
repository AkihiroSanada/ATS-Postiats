%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"char.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_LGPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/char.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")
*/

#atscode_separator_for_C()

\#ifndef ATSHOME_PRELUDE_CHAR_CATS
\#define ATSHOME_PRELUDE_CHAR_CATS

#atscode_separator_for_C()

\#include <ctype.h>

\#ifndef isascii
extern int isascii (int c) ; // _XOPEN_SOURCE
\#endif // end of [isascii]

\#ifndef isblank
extern int isblank (int c) ; // _XOPEN_SOURCE >= 600
\#endif // end of [isblank]

\#ifndef toascii
extern int toascii (int c) ; // _XOPEN_SOURCE
\#endif // end of [toascii]

#atscode_separator_for_C()

extern
int fprintf (FILE *stream, const char *format, ...) ;
// in [stdio.h]

#atscode_separator_for_C()

ATSinline()
atstype_char
atspre_int2char (atstype_int i) { return ((atstype_char)i) ; }
\#define atspre_int2char0 atspre_int2char

ATSinline()
atstype_schar
atspre_int2schar (atstype_int i) { return ((atstype_schar)i) ; }
\#define atspre_int2schar0 atspre_int2schar

ATSinline()
atstype_uchar
atspre_int2uchar (atstype_int i) { return ((atstype_uchar)i) ; }
\#define atspre_int2uchar0 atspre_int2uchar

#atscode_separator_for_C()

ATSinline()
atstype_int
atspre_char2int (atstype_char c) { return ((atstype_int)c) ; }
\#define atspre_char2int0 atspre_char2int

ATSinline()
atstype_int
atspre_schar2int (atstype_schar c) { return ((atstype_int)c) ; }
\#define atspre_schar2int0 atspre_schar2int

ATSinline()
atstype_int
atspre_uchar2int (atstype_uchar c) { return ((atstype_int)c) ; }
\#define atspre_uchar2int0 atspre_uchar2int

#atscode_separator_for_C()

ATSinline()
atstype_int
atspre_sub_char_char
  (atstype_char c1, atstype_char c2) { return (c1 - c2) ; }
// end of [sub_char0_char0]
\#define atspre_sub_char0_char0 atspre_sub_char_char

#atscode_separator_for_C()

%{
fun
fun_char_cmp0_decl (
  opr: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_%s_char_char
  (atstype_char c1, atstype_char c2) {
  return (c1 %s c2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_%s_char_char]
#define atspre_%s_char0_char0 atspre_%s_char_char
#define atspre_%s_char1_char1 atspre_%s_char_char
", @(
 opr, fopr, opr, opr, opr, opr, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_char_cmp0_decl]
%}\
\
#fun_char_cmp0_decl("lt")
#fun_char_cmp0_decl("lte")
#fun_char_cmp0_decl("gt")
#fun_char_cmp0_decl("gte")
#fun_char_cmp0_decl("eq")
#fun_char_cmp0_decl("neq")

#atscode_separator_for_C()

ATSinline()
atstype_int
atspre_compare_char_char
  (atstype_char c1, atstype_char c2)
{
  return ((atstype_int)c1) - ((atstype_int)c2) ;
} // end of [atspre_compare_char_char]
\#define atspre_compare_char0_char0 atspre_compare_char_char
\#define atspre_compare_char1_char1 atspre_compare_char_char

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_char (
  atstype_ref out, atstype_char c
) {
  fprintf ((FILE*)out, "%c", c) ; return ;
} // end of [atspre_fprint_char]

\#define atspre_print_char(c) atspre_fprint_char(stdout, (c))
\#define atspre_prerr_char(c) atspre_fprint_char(stderr, (c))

#atscode_separator_for_C()
//
// unsigned characters
//
#atscode_separator_for_C()

%{
fun
fun_uchar_cmp0_decl (
  opr: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_%s_uchar_uchar
  (atstype_uchar c1, atstype_uchar c2) {
  return (c1 %s c2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_%s_uchar_uchar]
#define atspre_%s_uchar0_uchar0 atspre_%s_uchar_uchar
#define atspre_%s_uchar1_uchar1 atspre_%s_uchar_uchar
", @(
 opr, fopr, opr, opr, opr, opr, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_uchar_cmp0_decl]
%}\
\
#fun_uchar_cmp0_decl("lt")
#fun_uchar_cmp0_decl("lte")
#fun_uchar_cmp0_decl("gt")
#fun_uchar_cmp0_decl("gte")
#fun_uchar_cmp0_decl("eq")
#fun_uchar_cmp0_decl("neq")

ATSinline()
atstype_int
atspre_compare_uchar_uchar
  (atstype_uchar c1, atstype_uchar c2) {
  return ((atstype_int)c1 - (atstype_int)c2) ;
} // end of [atspre_compare_uchar_uchar]
\#define atspre_compare_uchar0_uchar0 atspre_compare_uchar_uchar
\#define atspre_compare_uchar1_uchar1 atspre_compare_uchar_uchar

#atscode_separator_for_C()

%{
fun
fun_isX_decl (
  isX: string
) : atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_%s_int
  (atstype_int c) {
  return (%s(c) ? atsbool_true : atsbool_false) ;
} // end of [atspre_%s_int]
#define atspre_%s_char(c) atspre_%s_int((atstype_int)(c))\
", @(
 isX, isX, isX, isX, isX
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_isX_decl]
%}\
\
#fun_isX_decl("isalpha")
#fun_isX_decl("isalnum")

#fun_isX_decl("isascii")

#fun_isX_decl("isblank")
#fun_isX_decl("isspace")

#fun_isX_decl("iscntrl")

#fun_isX_decl("isdigit")
#fun_isX_decl("isxdigit")

#fun_isX_decl("isgraph")
#fun_isX_decl("isprint")
#fun_isX_decl("ispunct")

#fun_isX_decl("islower")
#fun_isX_decl("isupper")

#atscode_separator_for_C()

\#define atspre_toascii toascii

#atscode_separator_for_C()

ATSinline()
atstype_int
atspre_tolower_int
  (atstype_int c) { return tolower(c) ; }
ATSinline()
atstype_char
atspre_tolower_char
  (atstype_char c) { return tolower(c) ; }
//
ATSinline()
atstype_int
atspre_toupper_int
  (atstype_int c) { return toupper(c) ; }
ATSinline()
atstype_char
atspre_toupper_char
  (atstype_char c) { return toupper(c) ; }
//
#atscode_separator_for_C()

\#endif // ifndef ATSHOME_PRELUDE_CHAR_CATS

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "char_atxt.txt")
%}\
