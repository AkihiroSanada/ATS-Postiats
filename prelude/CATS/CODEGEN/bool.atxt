%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"bool.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_LGPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/bool.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("February, 2012")
*/

#atscode_separator_for_C()

\#ifndef ATSHOME_PRELUDE_BOOL_CATS
\#define ATSHOME_PRELUDE_BOOL_CATS

#atscode_separator_for_C()

extern
int fprintf (FILE *stream, const char *format, ...) ;
// in [stdio.h]

#atscode_separator_for_C()

ATSinline()
atstype_bool
atspre_neg_bool
  (atstype_bool b) {
  return (b) ? atsbool_false : atsbool_true ;
} // end of [atspre_neg_bool]

ATSinline()
atstype_bool
atspre_add_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1) ? atsbool_true : (b2) ;
} // end of [atspre_add_bool_bool]

ATSinline()
atstype_bool
atspre_mul_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1) ? (b2) : atsbool_false ;
} // end of [atspre_add_bool_bool]

#atscode_separator_for_C()

ATSinline()
atstype_bool
atspre_lt_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1) ? atsbool_false : (b2) ;
} // end of [atspre_lt_bool_bool]
ATSinline()
atstype_bool
atspre_lte_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1) ? (b2) : atsbool_true ;
} // end of [atspre_lte_bool_bool]

ATSinline()
atstype_bool
atspre_gt_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return atspre_lt_bool_bool (b2, b1) ;
} // end of [atspre_gt_bool_bool]
ATSinline()
atstype_bool
atspre_gte_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return atspre_lte_bool_bool (b2, b1) ;
} // end of [atspre_gte_bool_bool]

ATSinline()
atstype_bool
atspre_eq_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1 == b2) ;
} // end of [atspre_eq_bool_bool]
ATSinline()
atstype_bool
atspre_neq_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1 != b2) ;
} // end of [atspre_neq_bool_bool]

#atscode_separator_for_C()

ATSinline()
atstype_int
atspre_compare_bool_bool (
  atstype_bool b1, atstype_bool b2
) {
  return (b1 - b2) ;
} // end of [atspre_compare_bool_bool]

#atscode_separator_for_C()

ATSinline()
atstype_string
atspre_tostring_bool (
  atstype_bool x
) {
  return (x) ? "true" : "false" ;
} // end of [atspre_tostring_bool]

#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_bool (
  atstype_ref out, atstype_bool x
) {
  int err ;
  err = fprintf((FILE*)out, "%s", atspre_tostring_bool(x)) ;
  return ;
} // end [atspre_fprint_bool]

\#define atspre_print_bool(x) atspre_fprint_bool(stdout_ref, (x))
\#define atspre_prerr_bool(x) atspre_fprint_bool(stderr_ref, (x))

#atscode_separator_for_C()

\#define lt_bool1_bool1 lt_bool_bool
\#define lte_bool1_bool1 lte_bool_bool
\#define gt_bool1_bool1 gt_bool_bool
\#define gte_bool1_bool1 gte_bool_bool
\#define eq_bool1_bool1 eq_bool_bool
\#define neq_bool1_bool1 neq_bool_bool
\#define compare_bool1_bool1 compare_bool_bool

#atscode_separator_for_C()

\#endif // ifndef ATSHOME_PRELUDE_BOOL_CATS

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "bool_atxt.txt")
%}\
