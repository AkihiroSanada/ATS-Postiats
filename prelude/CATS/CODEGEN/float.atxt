%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"float.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_LGPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/float.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")
*/

#atscode_separator_for_C()

\#ifndef ATSHOME_PRELUDE_FLOAT_CATS
\#define ATSHOME_PRELUDE_FLOAT_CATS

#atscode_separator_for_C()

extern
int fprintf (FILE *stream, const char *format, ...) ;
// in [stdio.h]

#atscode_separator_for_C()

ATSinline()
atstype_float
atspre_g0int2float_int_float
  (atstype_int x) { return ((atstype_float)x) ; }
// end of [atspre_g0int2float_int_float]

ATSinline()
atstype_double
atspre_g0int2float_int_double
  (atstype_int x) { return ((atstype_double)x) ; }
// end of [atspre_g0int2float_int_double]

ATSinline()
atstype_double
atspre_g0int2float_lint_double
  (atstype_lint x) { return ((atstype_double)x) ; }
// end of [atspre_g0int2float_lint_double]

#atscode_separator_for_C()

ATSinline()
atstype_float
atspre_g0float2float_float_float (atstype_float x) { return (x) ; }

ATSinline()
atstype_double
atspre_g0float2float_float_double
(
atstype_float x
)
{
 return ((atstype_double)x) ;
}

ATSinline()
atstype_double
atspre_g0float2float_double_double (atstype_double x) { return (x) ; }

#atscode_separator_for_C()

%{
fun
fun_f0loat_aop_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "add" => "+" | "sub" => "-"
  | "mul" => "*" | "div" => "/"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0float_%s_%s
  (atstype_%s f1, atstype_%s f2) { return (f1 %s f2) ; }
// end of [atspre_g0float_%s_%s]\
", @(
 knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_f0loat_aop_decl]
%}\
\
#fun_f0loat_aop_decl("add", "float")
#fun_f0loat_aop_decl("sub", "float"))
#fun_f0loat_aop_decl("mul", "float"))
#fun_f0loat_aop_decl("div", "float"))
//
#fun_f0loat_aop_decl("add", "double")
#fun_f0loat_aop_decl("sub", "double"))
#fun_f0loat_aop_decl("mul", "double"))
#fun_f0loat_aop_decl("div", "double"))
//
#fun_f0loat_aop_decl("add", "ldouble")
#fun_f0loat_aop_decl("sub", "ldouble"))
#fun_f0loat_aop_decl("mul", "ldouble"))
#fun_f0loat_aop_decl("div", "ldouble"))
//
#atscode_separator_for_C()

%{
fun
fun_f0loat_cmp_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0float_%s_%s
  (atstype_%s f1, atstype_%s f2) {
  return (f1 %s f2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0float_%s_%s]\
", @(
 opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_f0loat_cmp_decl]
%}\
\
#fun_f0loat_cmp_decl("lt", "float")
#fun_f0loat_cmp_decl("lte", "float"))
#fun_f0loat_cmp_decl("gt", "float"))
#fun_f0loat_cmp_decl("gte", "float"))
#fun_f0loat_cmp_decl("eq", "float"))
#fun_f0loat_cmp_decl("neq", "float"))
//
#fun_f0loat_cmp_decl("lt", "double")
#fun_f0loat_cmp_decl("lte", "double"))
#fun_f0loat_cmp_decl("gt", "double"))
#fun_f0loat_cmp_decl("gte", "double"))
#fun_f0loat_cmp_decl("eq", "double"))
#fun_f0loat_cmp_decl("neq", "double"))
//
#fun_f0loat_cmp_decl("lt", "ldouble")
#fun_f0loat_cmp_decl("lte", "ldouble"))
#fun_f0loat_cmp_decl("gt", "ldouble"))
#fun_f0loat_cmp_decl("gte", "ldouble"))
#fun_f0loat_cmp_decl("eq", "ldouble"))
#fun_f0loat_cmp_decl("neq", "ldouble"))
//
#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_float (
  atstype_ref r, atstype_float x
) {
  int err ;
  err = fprintf((FILE*)r, "%f", x) ;
  return ;
} // end [atspre_fprint_float]

\#define atspre_print_float(x) atspre_fprint_float(stdout, (x))
\#define atspre_prerr_float(x) atspre_fprint_float(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_double (
  atstype_ref r, atstype_double x
) {
  int err ;
  err = fprintf((FILE*)r, "%f", x) ;
  return ;
} // end [atspre_fprint_double]

\#define atspre_print_double(x) atspre_fprint_double(stdout, (x))
\#define atspre_prerr_double(x) atspre_fprint_double(stderr, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_ldouble (
  atstype_ref r, atstype_ldouble x
) {
  int err ;
  err = fprintf((FILE*)r, "%Lf", x) ;
  return ;
} // end [atspre_fprint_ldouble]

\#define atspre_print_ldouble(x) atspre_fprint_ldouble(stdout, (x))
\#define atspre_prerr_ldouble(x) atspre_fprint_ldouble(stderr, (x))

#atscode_separator_for_C()

ATSinline()
atstype_float
atspre_mul_int_float
(
  atstype_int x, atstype_float y
) {
  return ((atstype_float)x * y) ;
}
ATSinline()
atstype_double
atspre_mul_int_double
(
  atstype_int x, atstype_double y
) {
  return ((atstype_double)x * y) ;
}

#atscode_separator_for_C()

ATSinline()
atstype_float
atspre_mul_float_int
(
  atstype_float x, atstype_int y
) {
  return (x * (atstype_float)y) ;
}
ATSinline()
atstype_double
atspre_mul_double_int
(
  atstype_double x, atstype_int y
) {
  return (x * (atstype_double)y) ;
}

#atscode_separator_for_C()

ATSinline()
atstype_float
atspre_div_int_float
(
  atstype_int x, atstype_float y
) {
  return ((atstype_float)x / y) ;
}
ATSinline()
atstype_double
atspre_div_int_double
(
  atstype_int x, atstype_double y
) {
  return ((atstype_double)x / y) ;
}

#atscode_separator_for_C()

ATSinline()
atstype_float
atspre_div_float_int
(
  atstype_float x, atstype_int y
) {
  return (x / (atstype_float)y) ;
}
ATSinline()
atstype_double
atspre_div_double_int
(
  atstype_double x, atstype_int y
) {
  return (x / (atstype_double)y) ;
}

#atscode_separator_for_C()

\#endif // ifndef ATSHOME_PRELUDE_FLOAT_CATS

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "float_atxt.txt")
%}\
