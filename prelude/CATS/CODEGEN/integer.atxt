%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"integer.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_LGPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/integer.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("January, 2013")
*/

#atscode_separator_for_C()

\#ifndef ATSHOME_PRELUDE_INTEGER_CATS
\#define ATSHOME_PRELUDE_INTEGER_CATS

#atscode_separator_for_C()

extern
int fprintf (FILE *stream, const char *format, ...) ;
// in [stdio.h]

#atscode_separator_for_C()
//
\#define atspre_g0int2int_int_int(x) ((atstype_int)(x))
\#define atspre_g0int2int_int_lint(x) ((atstype_lint)(x))
\#define atspre_g0int2int_int_llint(x) ((atstype_llint)(x))
\#define atspre_g0int2int_int_ssize(x) ((atstype_ssize)(x))
//
\#define atspre_g1int2int_int_int atspre_g0int2int_int_int
\#define atspre_g1int2int_int_lint atspre_g0int2int_int_lint
\#define atspre_g1int2int_int_llint atspre_g0int2int_int_llint
\#define atspre_g1int2int_int_ssize atspre_g0int2int_int_ssize
//
#atscode_separator_for_C()
//
\#define atspre_g0int2uint_int_uint(x) ((atstype_uint)(x))
\#define atspre_g0int2uint_int_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0int2uint_int_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0int2uint_int_size(x) ((atstype_size)(x))
//
\#define atspre_g1int2uint_int_uint atspre_g0int2uint_int_uint
\#define atspre_g1int2uint_int_ulint atspre_g0int2uint_int_ulint
\#define atspre_g1int2uint_int_ullint atspre_g0int2uint_int_ullint
\#define atspre_g1int2uint_int_size atspre_g0int2uint_int_size
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2uint_uint_uint(x) (x)
\#define atspre_g0uint2uint_uint_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0uint2uint_uint_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0uint2uint_uint_size(x) ((atstype_size)(x))
//
\#define atspre_g1uint2uint_uint_uint atspre_g0uint2uint_uint_uint
\#define atspre_g1uint2uint_uint_ulint atspre_g0uint2uint_uint_ulint
\#define atspre_g1uint2uint_uint_ullint atspre_g0uint2uint_uint_ullint
\#define atspre_g1uint2uint_uint_size atspre_g0uint2uint_uint_size
//
#atscode_separator_for_C()
//
\#define atspre_g0uint2uint_size_ulint(x) ((atstype_ulint)(x))
\#define atspre_g0uint2uint_size_ullint(x) ((atstype_ullint)(x))
\#define atspre_g0uint2uint_size_size(x) (x)
//
\#define atspre_g1uint2uint_size_ulint atspre_g0uint2uint_size_ulint
\#define atspre_g1uint2uint_size_ullint atspre_g0uint2uint_size_ullint
\#define atspre_g1uint2uint_size_size atspre_g0uint2uint_size_size
//
#atscode_separator_for_C()

%{
local
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun
fun_neg_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0int_neg_%s
  (atstype_%s x) { return (-x) ; }
// end of [atspre_g0int_neg_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_neg_decl]
//
fun
fun_succ_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0int_succ_%s
  (atstype_%s x) { return (x + 1) ; }
// end of [atspre_g0int_succ_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_succ_decl]
//
fun
fun_pred_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0int_pred_%s
  (atstype_%s x) { return (x - 1) ; }
// end of [atspre_g0int_pred_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_pred_decl]
//
fun
fun_half_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0int_half_%s
  (atstype_%s x) { return (x / 2) ; }
// end of [atspre_g0int_half_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_half_decl]
//
fun
fun_aop_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "add" => "+"
  | "sub" => "-"
  | "mul" => "*"
  | "div" => "/"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0int_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2) ; }
// end of [atspre_g0int_%s_%s]
", @(
 knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_aop_decl]
//
fun
fun_cmpz_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "isltz" => "<"
  | "isltez" => "<="
  | "isgtz" => ">"
  | "isgtez" => ">="
  | "iseqz" => "=="
  | "isneqz" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0int_%s_%s (atstype_%s x)
{
  return (x %s 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0int_%s_%s]
", @(
  opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmpz_decl]
//
fun
fun_cmp_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0int_%s_%s
(
  atstype_%s x1, atstype_%s x2
) {
  return (x1 %s x2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0int_%s_%s]
", @(
  opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmp_decl]
//
in // in of [local]
//
fun g0int_implist
  (tnm: string): atext = let
//
var res: atextlst = list_nil
//
val () = res := list_cons (fun_neg_decl(tnm), res)
//
val () = res := list_cons (fun_succ_decl(tnm), res)
val () = res := list_cons (fun_pred_decl(tnm), res)
//
val () = res := list_cons (fun_half_decl(tnm), res)
//
val () = res := list_cons (fun_aop_decl("add", tnm), res)
val () = res := list_cons (fun_aop_decl("sub", tnm), res)
val () = res := list_cons (fun_aop_decl("mul", tnm), res)
val () = res := list_cons (fun_aop_decl("div", tnm), res)
//
val () = res := list_cons (fun_cmpz_decl("isltz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isltez", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isgtz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isgtez", tnm), res)
val () = res := list_cons (fun_cmpz_decl("iseqz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isneqz", tnm), res)
//
val () = res := list_cons (fun_cmp_decl("lt", tnm), res)
val () = res := list_cons (fun_cmp_decl("lte", tnm), res)
val () = res := list_cons (fun_cmp_decl("gt", tnm), res)
val () = res := list_cons (fun_cmp_decl("gte", tnm), res)
val () = res := list_cons (fun_cmp_decl("eq", tnm), res)
val () = res := list_cons (fun_cmp_decl("neq", tnm), res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0int_implist]
//
end // end of [local]
//
%}\
\
#g0int_implist("int")\
//
#g0int_implist("lint")\
//
#g0int_implist("llint")\
//
#g0int_implist("ssize")\
//
#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_int
(
  atstype_ref r, atstype_int x
) {
  int err ;
  err = fprintf((FILE*)r, "%i", x) ;
  return ;
} // end [atspre_fprint_int]

\#define atspre_print_int(x) atspre_fprint_int(stdout_ref, (x))
\#define atspre_prerr_int(x) atspre_fprint_int(stderr_ref, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_lint
(
  atstype_ref r, atstype_lint x
) {
  int err ;
  err = fprintf((FILE*)r, "%li", x) ;
  return ;
} // end [atspre_fprint_lint]

\#define atspre_print_lint(x) atspre_fprint_lint(stdout_ref, (x))
\#define atspre_prerr_lint(x) atspre_fprint_lint(stderr_ref, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_llint
(
  atstype_ref r, atstype_llint x
) {
  int err ;
  err = fprintf((FILE*)r, "%lli", x) ;
  return ;
} // end [atspre_fprint_llint]

\#define atspre_print_llint(x) atspre_fprint_llint(stdout_ref, (x))
\#define atspre_prerr_llint(x) atspre_fprint_llint(stderr_ref, (x))

#atscode_separator_for_C()

\#define atspre_g1int_neg_int atspre_g0int_neg_int
\#define atspre_g1int_succ_int atspre_g0int_succ_int
\#define atspre_g1int_pred_int atspre_g0int_pred_int
\#define atspre_g1int_half_int atspre_g0int_half_int
\#define atspre_g1int_add_int atspre_g0int_add_int
\#define atspre_g1int_sub_int atspre_g0int_sub_int
\#define atspre_g1int_mul_int atspre_g0int_mul_int
\#define atspre_g1int_div_int atspre_g0int_div_int
\#define atspre_g1int_isltz_int atspre_g0int_isltz_int
\#define atspre_g1int_isltez_int atspre_g0int_isltez_int
\#define atspre_g1int_isgtz_int atspre_g0int_isgtz_int
\#define atspre_g1int_isgtez_int atspre_g0int_isgtez_int
\#define atspre_g1int_iseqz_int atspre_g0int_iseqz_int
\#define atspre_g1int_isneqz_int atspre_g0int_isneqz_int
\#define atspre_g1int_lt_int atspre_g0int_lt_int
\#define atspre_g1int_lte_int atspre_g0int_lte_int
\#define atspre_g1int_gt_int atspre_g0int_gt_int
\#define atspre_g1int_gte_int atspre_g0int_gte_int
\#define atspre_g1int_eq_int atspre_g0int_eq_int
\#define atspre_g1int_neq_int atspre_g0int_neq_int
\#define atspre_g1int_compare_int atspre_g0int_compare_int
\#define atspre_g1int_max_int atspre_g0int_max_int
\#define atspre_g1int_min_int atspre_g0int_min_int

#atscode_separator_for_C()

%{
local
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
fun
fun_succ_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0uint_succ_%s
  (atstype_%s x) { return (x + 1) ; }
// end of [atspre_g0uint_succ_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_succ_decl]
//
fun
fun_pred_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0uint_pred_%s
  (atstype_%s x) { return (x - 1) ; }
// end of [atspre_g0uint_pred_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_pred_decl]
//
fun
fun_half_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0uint_half_%s
  (atstype_%s x) { return (x >> 1) ; }
// end of [atspre_g0uint_pred_%s]
", @(knd, knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_half_decl]
//
fun
fun_aop_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "add" => "+"
  | "sub" => "-"
  | "mul" => "*"
  | "div" => "/"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0uint_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2) ; }
// end of [atspre_g0uint_%s_%s]
", @(
 knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_aop_decl]
//
fun
fun_cmpz_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "isgtz" => ">"
  | "iseqz" => "=="
  | "isneqz" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0uint_%s_%s (atstype_%s x)
{
  return (x %s 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0uint_%s_%s]
", @(
  opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmpz_decl]
//
fun
fun_cmp_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0uint_%s_%s
(
  atstype_%s x1, atstype_%s x2
) {
  return (x1 %s x2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0uint_%s_%s]
", @(
  opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_cmp_decl]
//
in // in of [local]
//
fun g0uint_implist
  (tnm: string): atext = let
//
var res: atextlst = list_nil
//
val () = res := list_cons (fun_succ_decl(tnm), res)
val () = res := list_cons (fun_pred_decl(tnm), res)
//
val () = res := list_cons (fun_half_decl(tnm), res)
//
val () = res := list_cons (fun_aop_decl("add", tnm), res)
val () = res := list_cons (fun_aop_decl("sub", tnm), res)
val () = res := list_cons (fun_aop_decl("mul", tnm), res)
val () = res := list_cons (fun_aop_decl("div", tnm), res)
//
val () = res := list_cons (fun_cmpz_decl("isgtz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("iseqz", tnm), res)
val () = res := list_cons (fun_cmpz_decl("isneqz", tnm), res)
//
val () = res := list_cons (fun_cmp_decl("lt", tnm), res)
val () = res := list_cons (fun_cmp_decl("lte", tnm), res)
val () = res := list_cons (fun_cmp_decl("gt", tnm), res)
val () = res := list_cons (fun_cmp_decl("gte", tnm), res)
val () = res := list_cons (fun_cmp_decl("eq", tnm), res)
val () = res := list_cons (fun_cmp_decl("neq", tnm), res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0uint_implist]
//
end // end of [local]
%}\
\
#g0uint_implist("uint")\
//
#g0uint_implist("ulint")\
//
#g0uint_implist("ullint")\
//
#g0uint_implist("size")\
//
#atscode_separator_for_C()

ATSinline()
atsvoid_t0ype
atspre_fprint_uint
(
  atstype_ref r, atstype_uint x
) {
  int err ;
  err = fprintf((FILE*)r, "%u", x) ;
  return ;
} // end [atspre_fprint_uint]

\#define atspre_print_uint(x) atspre_fprint_uint(stdout_ref, (x))
\#define atspre_prerr_uint(x) atspre_fprint_uint(stderr_ref, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_ulint
(
  atstype_ref r, atstype_ulint x
) {
  int err ;
  err = fprintf((FILE*)r, "%lu", x) ;
  return ;
} // end [atspre_fprint_ulint]

\#define atspre_print_ulint(x) atspre_fprint_ulint(stdout_ref, (x))
\#define atspre_prerr_ulint(x) atspre_fprint_ulint(stderr_ref, (x))

ATSinline()
atsvoid_t0ype
atspre_fprint_ullint
(
  atstype_ref r, atstype_ullint x
) {
  int err ;
  err = fprintf((FILE*)r, "%llu", x) ;
  return ;
} // end [atspre_fprint_ullint]

\#define atspre_print_ullint(x) atspre_fprint_ullint(stdout_ref, (x))
\#define atspre_prerr_ullint(x) atspre_fprint_ullint(stderr_ref, (x))

#atscode_separator_for_C()

\#define atspre_g1uint_succ_uint atspre_g0uint_succ_uint
\#define atspre_g1uint_pred_uint atspre_g0uint_pred_uint
\#define atspre_g1uint_half_uint atspre_g0uint_half_uint
\#define atspre_g1uint_add_uint atspre_g0uint_add_uint
\#define atspre_g1uint_sub_uint atspre_g0uint_sub_uint
\#define atspre_g1uint_mul_uint atspre_g0uint_mul_uint
\#define atspre_g1uint_div_uint atspre_g0uint_div_uint
\#define atspre_g1uint_isgtz_uint atspre_g0uint_isgtz_uint
\#define atspre_g1uint_iseqz_uint atspre_g0uint_iseqz_uint
\#define atspre_g1uint_isneqz_uint atspre_g0uint_isneqz_uint
\#define atspre_g1uint_lt_uint atspre_g0uint_lt_uint
\#define atspre_g1uint_lte_uint atspre_g0uint_lte_uint
\#define atspre_g1uint_gt_uint atspre_g0uint_gt_uint
\#define atspre_g1uint_gte_uint atspre_g0uint_gte_uint
\#define atspre_g1uint_eq_uint atspre_g0uint_eq_uint
\#define atspre_g1uint_neq_uint atspre_g0uint_neq_uint
\#define atspre_g1uint_compare_uint atspre_g0uint_compare_uint
\#define atspre_g1uint_max_uint atspre_g0uint_max_uint
\#define atspre_g1uint_min_uint atspre_g0uint_min_uint

#atscode_separator_for_C()

\#endif // ifndef ATSHOME_PRELUDE_INTEGER_CATS

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "integer_atxt.txt")
%}\
