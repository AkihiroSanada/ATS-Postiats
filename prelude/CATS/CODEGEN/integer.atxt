%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"integer.cats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_LGPL_for_C()

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/integer.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("January, 2013")
*/

#atscode_separator_for_C()

\#ifndef ATSHOME_PRELUDE_INTEGER_CATS
\#define ATSHOME_PRELUDE_INTEGER_CATS

#atscode_separator_for_C()

\#include <stdio.h> // for [FILE], [fprintf], ...

#atscode_separator_for_C()

%{
fun
fun_g0int_succ_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_int
atspre_g0int_succ_%s
  (atstype_%s x) { return (x + 1) ; }
// end of [atspre_g0int_succ_%s]\
", @(knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0int_succ_decl]
//
fun
fun_g0int_pred_decl
  (knd: string): atext = let
//
val ent = sprintf ("\
ATSinline()
atstype_int
atspre_g0int_pred_%s
  (atstype_%s x) { return (x - 1) ; }
// end of [atspre_g0int_pred_%s]\
", @(knd, knd, knd)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0int_pred_decl]
//
fun
fun_g0int_aop_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "add" => "+" | "sub" => "-"
  | "mul" => "*" | "div" => "/"
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_%s
atspre_g0int_%s_%s
  (atstype_%s x1, atstype_%s x2) { return (x1 %s x2) ; }
// end of [atspre_g0int_%s_%s]\
", @(
 knd, opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0int_aop_decl]
%}\
\
#fun_g0int_succ_decl("int")
#fun_g0int_pred_decl("int")
#fun_g0int_aop_decl("add", "int")
#fun_g0int_aop_decl("sub", "int"))
#fun_g0int_aop_decl("mul", "int"))
#fun_g0int_aop_decl("div", "int"))
//
#fun_g0int_succ_decl("lint")
#fun_g0int_pred_decl("lint")
#fun_g0int_aop_decl("add", "lint")
#fun_g0int_aop_decl("sub", "lint"))
#fun_g0int_aop_decl("mul", "lint"))
#fun_g0int_aop_decl("div", "lint"))
//
#fun_g0int_succ_decl("llint")
#fun_g0int_pred_decl("llint")
#fun_g0int_aop_decl("add", "llint")
#fun_g0int_aop_decl("sub", "llint"))
#fun_g0int_aop_decl("mul", "llint"))
#fun_g0int_aop_decl("div", "llint"))
//
#atscode_separator_for_C()

%{
fun
fun_g0int_cmpz_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "isltz" => "<"
  | "isltez" => "<="
  | "isgtz" => ">"
  | "isgtez" => ">="
  | "iseqz" => "=="
  | "isneqz" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0int_%s_%s
  (atstype_%s x) {
  return (x %s 0 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0int_%s_%s]\
", @(
 opr, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0int_cmpz_decl]
%}\
\
#fun_g0int_cmpz_decl("isltz", "int")
#fun_g0int_cmpz_decl("isltez", "int")
#fun_g0int_cmpz_decl("isgtz", "int")
#fun_g0int_cmpz_decl("isgtez", "int")
#fun_g0int_cmpz_decl("iseqz", "int")
#fun_g0int_cmpz_decl("isneqz", "int")
//
#fun_g0int_cmpz_decl("isltz", "lint")
#fun_g0int_cmpz_decl("isltez", "lint")
#fun_g0int_cmpz_decl("isgtz", "lint")
#fun_g0int_cmpz_decl("isgtez", "lint")
#fun_g0int_cmpz_decl("iseqz", "lint")
#fun_g0int_cmpz_decl("isneqz", "lint")
//
#fun_g0int_cmpz_decl("isltz", "llint")
#fun_g0int_cmpz_decl("isltez", "llint")
#fun_g0int_cmpz_decl("isgtz", "llint")
#fun_g0int_cmpz_decl("isgtez", "llint")
#fun_g0int_cmpz_decl("iseqz", "llint")
#fun_g0int_cmpz_decl("isneqz", "llint")

#atscode_separator_for_C()

%{
fun
fun_g0int_cmp_decl (
  opr: string, knd: string
) : atext = let
//
val fopr = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val ent = sprintf ("\
ATSinline()
atstype_bool
atspre_g0int_%s_%s
  (atstype_%s x1, atstype_%s x2) {
  return (x1 %s x2 ? atsbool_true : atsbool_false) ;
} // end of [atspre_g0int_%s_%s]\
", @(
 opr, knd, knd, knd, fopr, opr, knd
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_g0int_cmp_decl]
%}\
\
#fun_g0int_cmp_decl("lt", "int")
#fun_g0int_cmp_decl("lte", "int"))
#fun_g0int_cmp_decl("gt", "int"))
#fun_g0int_cmp_decl("gte", "int"))
#fun_g0int_cmp_decl("eq", "int"))
#fun_g0int_cmp_decl("neq", "int"))
//
#fun_g0int_cmp_decl("lt", "lint")
#fun_g0int_cmp_decl("lte", "lint"))
#fun_g0int_cmp_decl("gt", "lint"))
#fun_g0int_cmp_decl("gte", "lint"))
#fun_g0int_cmp_decl("eq", "lint"))
#fun_g0int_cmp_decl("neq", "lint"))
//
#fun_g0int_cmp_decl("lt", "llint")
#fun_g0int_cmp_decl("lte", "llint"))
#fun_g0int_cmp_decl("gt", "llint"))
#fun_g0int_cmp_decl("gte", "llint"))
#fun_g0int_cmp_decl("eq", "llint"))
#fun_g0int_cmp_decl("neq", "llint"))
//
#atscode_separator_for_C()

ATSinline()
atstype_void
atspre_fprint_int (
  atstype_ref r, atstype_int x
) {
  int err ;
  err = fprintf((FILE*)r, "%i", x) ;
  return ;
} // end [atspre_fprint_int]

\#define atspre_print_int(x) atspre_fprint_int(stdout_ref, (x))
\#define atspre_prerr_int(x) atspre_fprint_int(stderr_ref, (x))

ATSinline()
atstype_void
atspre_fprint_lint (
  atstype_ref r, atstype_lint x
) {
  int err ;
  err = fprintf((FILE*)r, "%li", x) ;
  return ;
} // end [atspre_fprint_lint]

\#define atspre_print_lint(x) atspre_fprint_lint(stdout_ref, (x))
\#define atspre_prerr_lint(x) atspre_fprint_lint(stderr_ref, (x))

ATSinline()
atstype_void
atspre_fprint_llint (
  atstype_ref r, atstype_llint x
) {
  int err ;
  err = fprintf((FILE*)r, "%lli", x) ;
  return ;
} // end [atspre_fprint_llint]

\#define atspre_print_llint(x) atspre_fprint_llint(stdout_ref, (x))
\#define atspre_prerr_llint(x) atspre_fprint_llint(stderr_ref, (x))

#atscode_separator_for_C()

\#define atspre_g1int_neg_int atspre_g0int_neg_int
\#define atspre_g1int_succ_int atspre_g0int_succ_int
\#define atspre_g1int_pred_int atspre_g0int_pred_int

\#define atspre_g1int_add_int atspre_g0int_add_int
\#define atspre_g1int_sub_int atspre_g0int_sub_int
\#define atspre_g1int_mul_int atspre_g0int_mul_int
\#define atspre_g1int_div_int atspre_g0int_div_int

\#define atspre_g1int_lt_int atspre_g0int_lt_int
\#define atspre_g1int_lte_int atspre_g0int_lte_int
\#define atspre_g1int_gt_int atspre_g0int_gt_int
\#define atspre_g1int_gte_int atspre_g0int_gte_int
\#define atspre_g1int_eq_int atspre_g0int_eq_int
\#define atspre_g1int_neq_int atspre_g0int_neq_int

\#define atspre_g1int_compare_int atspre_g0int_compare_int


#atscode_separator_for_C()

\#endif // ifndef ATSHOME_PRELUDE_INTEGER_CATS

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement main () = fprint_filsub (stdout_ref, "integer_atxt.txt")
%}\
